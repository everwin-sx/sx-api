/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.api;

import fr.everwin.sx.client.*;
import fr.everwin.sx.client.auth.*;
import fr.everwin.sx.client.model.Document;
import fr.everwin.sx.client.model.DocumentList;
import fr.everwin.sx.client.model.ErrorMessage;
import fr.everwin.sx.client.model.FormDataContentDisposition;
import fr.everwin.sx.client.model.SupplierReceivingNote;
import fr.everwin.sx.client.model.SupplierReceivingNoteLine;
import fr.everwin.sx.client.model.SupplierReceivingNoteLineList;
import fr.everwin.sx.client.model.SupplierReceivingNoteList;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SupplierReceivingNotesApi
 */
public class SupplierReceivingNotesApiTest {

    private final SupplierReceivingNotesApi api = new SupplierReceivingNotesApi();

    /**
     * Create a supplier delivery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        //SupplierReceivingNote supplierReceivingNote = null;
        //api.create(supplierReceivingNote);
        // TODO: test validations
    }

    /**
     * Create a new document for the supplier delivery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentTest() throws ApiException {
        //Long id = null;
        //Document document = null;
        //api.createDocument(id, document);
        // TODO: test validations
    }

    /**
     * Create a supplier delivery Line for a supplier delivery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSupplierReceivingNoteLineTest() throws ApiException {
        //Long id = null;
        //SupplierReceivingNoteLine supplierReceivingNoteLine = null;
        //api.createSupplierReceivingNoteLine(id, supplierReceivingNoteLine);
        // TODO: test validations
    }

    /**
     * Delete a supplier delivery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        //Long id = null;
        //api.delete(id);
        // TODO: test validations
    }

    /**
     * Delete a supplier delivery document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //api.deleteDocument(id, did);
        // TODO: test validations
    }

    /**
     * Delete a supplier delivery Line  for a supplier delivery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSupplierReceivingNoteLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //api.deleteSupplierReceivingNoteLine(id, lineid);
        // TODO: test validations
    }

    /**
     * Get physical file linked to the supplier delivery document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //api.downloadDocument(id, did);
        // TODO: test validations
    }

    /**
     * Get a supplier delivery by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        //Long id = null;
        //String fields = null;
        //SupplierReceivingNote response = api.getById(id, fields);
        // TODO: test validations
    }

    /**
     * Get a supplier delivery document by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentByIdTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //String fields = null;
        //Document response = api.getDocumentById(id, did, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of documents for the given supplier delivery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentsTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //DocumentList response = api.getDocuments(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a supplier delivery line for the given supplier delivery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSupplierReceivingNoteLineByIdTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //String fields = null;
        //SupplierReceivingNoteLine response = api.getSupplierReceivingNoteLineById(id, lineid, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of supplier delivery lines for the given supplier delivery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSupplierReceivingNoteLinesTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //SupplierReceivingNoteLineList response = api.getSupplierReceivingNoteLines(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Test Supplier Deliveries service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        //String response = api.ping();
        // TODO: test validations
    }

    /**
     * Get a supplier deliveries collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //SupplierReceivingNoteList response = api.query(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Full update of a supplier delivery. If supplier delivery doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        //Long id = null;
        //SupplierReceivingNote supplierReceivingNote = null;
        //api.update(id, supplierReceivingNote);
        // TODO: test validations
    }

    /**
     * Full update of a supplier delivery document. If document doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //Document document = null;
        //api.updateDocument(id, did, document);
        // TODO: test validations
    }

    /**
     * Partial update of a supplier delivery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialTest() throws ApiException {
        //Long id = null;
        //SupplierReceivingNote supplierReceivingNote = null;
        //api.updatePartial(id, supplierReceivingNote);
        // TODO: test validations
    }

    /**
     * Partial update of a document supplier delivery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //Document document = null;
        //api.updatePartialDocument(id, did, document);
        // TODO: test validations
    }

    /**
     * Partial update of a supplier delivery Line  for a supplier delivery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialSupplierReceivingNoteLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //SupplierReceivingNoteLine supplierReceivingNoteLine = null;
        //api.updatePartialSupplierReceivingNoteLine(id, lineid, supplierReceivingNoteLine);
        // TODO: test validations
    }

    /**
     * Full update of a supplier delivery line for a supplier delivery. If supplier delivery Line doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSupplierReceivingNoteLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //SupplierReceivingNoteLine supplierReceivingNoteLine = null;
        //api.updateSupplierReceivingNoteLine(id, lineid, supplierReceivingNoteLine);
        // TODO: test validations
    }

    /**
     * Upload physical file linked to the supplier delivery document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //FormDataContentDisposition _file = null;
        //api.uploadDocument(id, did, _file);
        // TODO: test validations
    }

}
