/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.api;

import fr.everwin.sx.client.*;
import fr.everwin.sx.client.auth.*;
import fr.everwin.sx.client.model.CopyData;
import fr.everwin.sx.client.model.Document;
import fr.everwin.sx.client.model.DocumentList;
import fr.everwin.sx.client.model.ErrorMessage;
import fr.everwin.sx.client.model.FormDataContentDisposition;
import java.time.OffsetDateTime;
import fr.everwin.sx.client.model.ProjectLineList;
import fr.everwin.sx.client.model.ProjectList;
import fr.everwin.sx.client.model.ProjectSubLineList;
import fr.everwin.sx.client.model.SpecialTimeTypeList;
import fr.everwin.sx.client.model.TimeSheetFlowHistoryList;
import fr.everwin.sx.client.model.Timesheet;
import fr.everwin.sx.client.model.TimesheetLine;
import fr.everwin.sx.client.model.TimesheetLineList;
import fr.everwin.sx.client.model.TimesheetList;
import fr.everwin.sx.client.model.TimesheetTaskVisibility;
import fr.everwin.sx.client.model.ValidationInfo;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimesheetsApi
 */
public class TimesheetsApiTest {

    private final TimesheetsApi api = new TimesheetsApi();

    /**
     * Converts the duration of the rows of a timesheet according to the tasks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void convertDurationFromActionTest() throws ApiException {
        //Long id = null;
        //api.convertDurationFromAction(id);
        // TODO: test validations
    }

    /**
     * Converts the duration of a timesheet row according to a task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void convertDurationFromAction_0Test() throws ApiException {
        //Long id = null;
        //Long idTsk = null;
        //OffsetDateTime date = null;
        //api.convertDurationFromAction_0(id, idTsk, date);
        // TODO: test validations
    }

    /**
     * Create a timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        //Timesheet timesheet = null;
        //api.create(timesheet);
        // TODO: test validations
    }

    /**
     * Create a new document for the timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentTest() throws ApiException {
        //Long id = null;
        //Document document = null;
        //api.createDocument(id, document);
        // TODO: test validations
    }

    /**
     * Create a Timesheet Line for A Timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTimesheetLineTest() throws ApiException {
        //Long id = null;
        //TimesheetLine timesheetLine = null;
        //api.createTimesheetLine(id, timesheetLine);
        // TODO: test validations
    }

    /**
     * Delete a timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        //Long id = null;
        //api.delete(id);
        // TODO: test validations
    }

    /**
     * Delete a timesheet document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //api.deleteDocument(id, did);
        // TODO: test validations
    }

    /**
     * Delete a Timesheet Line  for a Timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTimesheetLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //api.deleteTimesheetLine(id, lineid);
        // TODO: test validations
    }

    /**
     * Get physical file linked to the timesheet document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //api.downloadDocument(id, did);
        // TODO: test validations
    }

    /**
     * Duplicate a timesheet on a date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void duplicateTest() throws ApiException {
        //Long id = null;
        //CopyData copyData = null;
        //api.duplicate(id, copyData);
        // TODO: test validations
    }

    /**
     * Get a timesheet by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        //Long id = null;
        //String fields = null;
        //Timesheet response = api.getById(id, fields);
        // TODO: test validations
    }

    /**
     * Get a timesheet document by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentByIdTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //String fields = null;
        //Document response = api.getDocumentById(id, did, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of documents for the given timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentsTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //DocumentList response = api.getDocuments(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of schedulings for a timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlanificationsTest() throws ApiException {
        //Long id = null;
        //api.getPlanifications(id);
        // TODO: test validations
    }

    /**
     * Get 20 last recent projects for an timesheet by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentProjectsTest() throws ApiException {
        //Long id = null;
        //String fields = null;
        //ProjectList response = api.getRecentProjects(id, fields);
        // TODO: test validations
    }

    /**
     * Get a timesheet line for the given timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimesheetLineByIdTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //String fields = null;
        //TimesheetLine response = api.getTimesheetLineById(id, lineid, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of timesheet lines for the given timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimesheetLinesTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //TimesheetLineList response = api.getTimesheetLines(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of tasks with visibility for a timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimesheetTaskVisibilityTest() throws ApiException {
        //Long id = null;
        //TimesheetTaskVisibility response = api.getTimesheetTaskVisibility(id);
        // TODO: test validations
    }

    /**
     * Get a collection of validation errors for the given timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getValidationErrorsTest() throws ApiException {
        //Long id = null;
        //Boolean partialValidation = null;
        //String filter = null;
        //String fields = null;
        //api.getValidationErrors(id, partialValidation, filter, fields);
        // TODO: test validations
    }

    /**
     * Masks a task for a date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void maskTimesheetTaskVisibilityTest() throws ApiException {
        //Long idTsk = null;
        //OffsetDateTime date = null;
        //api.maskTimesheetTaskVisibility(idTsk, date);
        // TODO: test validations
    }

    /**
     * Test timesheets service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        //String response = api.ping();
        // TODO: test validations
    }

    /**
     * Get a timesheets collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //TimesheetList response = api.query(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get the project lines linked to the project and timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryProjectLinesTest() throws ApiException {
        //Long id = null;
        //Long projectid = null;
        //String fields = null;
        //ProjectLineList response = api.queryProjectLines(id, projectid, fields);
        // TODO: test validations
    }

    /**
     * Get the project sub lines linked to the project line and timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryProjectSubLinesTest() throws ApiException {
        //Long id = null;
        //Long projectlineid = null;
        //String fields = null;
        //ProjectSubLineList response = api.queryProjectSubLines(id, projectlineid, fields);
        // TODO: test validations
    }

    /**
     * Get available projects for the times on a timesheet by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryProjectsTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String fields = null;
        //ProjectList response = api.queryProjects(id, filter, fields);
        // TODO: test validations
    }

    /**
     * Get the project lines linked to the project, special time type and timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void querySpecialTimeProjectLinesTest() throws ApiException {
        //Long id = null;
        //Long projectid = null;
        //Long specialtimetypeid = null;
        //String fields = null;
        //ProjectLineList response = api.querySpecialTimeProjectLines(id, projectid, specialtimetypeid, fields);
        // TODO: test validations
    }

    /**
     * Get the project sub lines linked to the project line and timesheet for special time
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void querySpecialTimeProjectSubLinesTest() throws ApiException {
        //Long id = null;
        //Long projectlineid = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //ProjectSubLineList response = api.querySpecialTimeProjectSubLines(id, projectlineid, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get available projects for the special times on a timesheet by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void querySpecialTimeProjectsTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String fields = null;
        //ProjectList response = api.querySpecialTimeProjects(id, filter, fields);
        // TODO: test validations
    }

    /**
     * Get the special type types linked to the project and timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void querySpecialTimeTypesTest() throws ApiException {
        //Long id = null;
        //Long projectid = null;
        //String fields = null;
        //SpecialTimeTypeList response = api.querySpecialTimeTypes(id, projectid, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of flow history for the given timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryValidationHistoryListTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String fields = null;
        //TimeSheetFlowHistoryList response = api.queryValidationHistoryList(id, filter, fields);
        // TODO: test validations
    }

    /**
     * Unvalidate the timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unvalidateTest() throws ApiException {
        //Long id = null;
        //ValidationInfo validationInfo = null;
        //api.unvalidate(id, validationInfo);
        // TODO: test validations
    }

    /**
     * Full update of a Timesheet. If Timesheet doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        //Long id = null;
        //Timesheet timesheet = null;
        //api.update(id, timesheet);
        // TODO: test validations
    }

    /**
     * Full update of a timesheet document. If document doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //Document document = null;
        //api.updateDocument(id, did, document);
        // TODO: test validations
    }

    /**
     * Partial update of an Timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialTest() throws ApiException {
        //Long id = null;
        //Timesheet timesheet = null;
        //api.updatePartial(id, timesheet);
        // TODO: test validations
    }

    /**
     * Partial update of a document timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //Document document = null;
        //api.updatePartialDocument(id, did, document);
        // TODO: test validations
    }

    /**
     * Partial update of a Timesheet Line  for a Timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialTimesheetLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //TimesheetLine timesheetLine = null;
        //api.updatePartialTimesheetLine(id, lineid, timesheetLine);
        // TODO: test validations
    }

    /**
     * Full update of a Timesheet Line for a Timesheet. If Timesheet Line doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTimesheetLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //TimesheetLine timesheetLine = null;
        //api.updateTimesheetLine(id, lineid, timesheetLine);
        // TODO: test validations
    }

    /**
     * Upload physical file linked to the timesheet document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //FormDataContentDisposition _file = null;
        //api.uploadDocument(id, did, _file);
        // TODO: test validations
    }

    /**
     * Validate the timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateTest() throws ApiException {
        //Long id = null;
        //ValidationInfo validationInfo = null;
        //api.validate(id, validationInfo);
        // TODO: test validations
    }

}
