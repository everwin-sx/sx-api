/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.api;

import fr.everwin.sx.client.*;
import fr.everwin.sx.client.auth.*;
import fr.everwin.sx.client.model.CopyData;
import fr.everwin.sx.client.model.Document;
import fr.everwin.sx.client.model.DocumentList;
import fr.everwin.sx.client.model.ErrorMessage;
import fr.everwin.sx.client.model.ExpenseSheetLine;
import fr.everwin.sx.client.model.ExpenseSheetLineList;
import fr.everwin.sx.client.model.FormDataContentDisposition;
import fr.everwin.sx.client.model.GuestList;
import fr.everwin.sx.client.model.MindeeConfig;
import fr.everwin.sx.client.model.MissionOrderList;
import fr.everwin.sx.client.model.OcrData;
import fr.everwin.sx.client.model.OcrExtractedData;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExpenseSheetLinesApi
 */
public class ExpenseSheetLinesApiTest {

    private final ExpenseSheetLinesApi api = new ExpenseSheetLinesApi();

    /**
     * Create an Expense Sheet Line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        //ExpenseSheetLine expenseSheetLine = null;
        //api.create(expenseSheetLine);
        // TODO: test validations
    }

    /**
     * Create a new document for the expense sheet line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentTest() throws ApiException {
        //Long id = null;
        //Document document = null;
        //api.createDocument(id, document);
        // TODO: test validations
    }

    /**
     * Delete an Expense Sheet Line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        //Long id = null;
        //api.delete(id);
        // TODO: test validations
    }

    /**
     * Delete an expense sheet line document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //api.deleteDocument(id, did);
        // TODO: test validations
    }

    /**
     * Get physical file linked to the expense sheet line document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //api.downloadDocument(id, did);
        // TODO: test validations
    }

    /**
     * Duplicates an expense sheet line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void duplicateTest() throws ApiException {
        //Long id = null;
        //CopyData copyData = null;
        //ExpenseSheetLine response = api.duplicate(id, copyData);
        // TODO: test validations
    }

    /**
     * Extract Ocr data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extractOcrDataTest() throws ApiException {
        //OcrData ocrData = null;
        //OcrExtractedData response = api.extractOcrData(ocrData);
        // TODO: test validations
    }

    /**
     * Get an Expense Sheet Line by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        //Long id = null;
        //String fields = null;
        //ExpenseSheetLine response = api.getById(id, fields);
        // TODO: test validations
    }

    /**
     * Get an expense sheet line document by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentByIdTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //String fields = null;
        //Document response = api.getDocumentById(id, did, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of documents for the given expense sheet line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentsTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //DocumentList response = api.getDocuments(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get the Ocr URL to call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOcrInfosTest() throws ApiException {
        //MindeeConfig response = api.getOcrInfos();
        // TODO: test validations
    }

    /**
     * Test Expense Sheet lines service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        //String response = api.ping();
        // TODO: test validations
    }

    /**
     * Get an Expense Sheet Lines collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //ExpenseSheetLineList response = api.query(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of guests for the given expense line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryGuestListTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String fields = null;
        //GuestList response = api.queryGuestList(id, filter, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of available mission orders for the given expense line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryMissionOrdersTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String fields = null;
        //MissionOrderList response = api.queryMissionOrders(id, filter, fields);
        // TODO: test validations
    }

    /**
     * Full update of an Expense Sheet Line. If Expense Sheet Line doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        //Long id = null;
        //ExpenseSheetLine expenseSheetLine = null;
        //api.update(id, expenseSheetLine);
        // TODO: test validations
    }

    /**
     * Full update of an expense sheet line document. If document doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //Document document = null;
        //api.updateDocument(id, did, document);
        // TODO: test validations
    }

    /**
     * Partial update of an Expense Sheet Line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialTest() throws ApiException {
        //Long id = null;
        //ExpenseSheetLine expenseSheetLine = null;
        //api.updatePartial(id, expenseSheetLine);
        // TODO: test validations
    }

    /**
     * Partial update of a document expense sheet line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //Document document = null;
        //api.updatePartialDocument(id, did, document);
        // TODO: test validations
    }

    /**
     * Upload physical file linked to the expense sheet line document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //FormDataContentDisposition _file = null;
        //api.uploadDocument(id, did, _file);
        // TODO: test validations
    }

}
