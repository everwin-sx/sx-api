/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.api;

import fr.everwin.sx.client.*;
import fr.everwin.sx.client.auth.*;
import fr.everwin.sx.client.model.ErrorMessage;
import java.time.OffsetDateTime;
import fr.everwin.sx.client.model.ProjectLine;
import fr.everwin.sx.client.model.ProjectLineGlobalEstimatedInvoicing;
import fr.everwin.sx.client.model.ProjectLineOtherRealInvoicing;
import fr.everwin.sx.client.model.ProjectLineTimeRealInvoicing;
import fr.everwin.sx.client.model.ProjectSubLineList;
import fr.everwin.sx.client.model.WritableProjectLine;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectLinesApi
 */
public class ProjectLinesApiTest {

    private final ProjectLinesApi api = new ProjectLinesApi();

    /**
     * Cancel invoicing of the project line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelInvoicingTest() throws ApiException {
        //Long id = null;
        //api.cancelInvoicing(id);
        // TODO: test validations
    }

    /**
     * Create a project line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        //WritableProjectLine writableProjectLine = null;
        //api.create(writableProjectLine);
        // TODO: test validations
    }

    /**
     * Delete a project line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        //Long id = null;
        //api.delete(id);
        // TODO: test validations
    }

    /**
     * Finish a project line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void finishTest() throws ApiException {
        //Long id = null;
        //OffsetDateTime finishedDate = null;
        //api.finish(id, finishedDate);
        // TODO: test validations
    }

    /**
     * Get a project line by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        //Long id = null;
        //String fields = null;
        //ProjectLine response = api.getById(id, fields);
        // TODO: test validations
    }

    /**
     * Get invoicing information of a project line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvoicingTest() throws ApiException {
        //Long id = null;
        //api.getInvoicing(id);
        // TODO: test validations
    }

    /**
     * Get a project subline for the given project line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectSubLineByIdTest() throws ApiException {
        //Long id = null;
        //Long sublineid = null;
        //String fields = null;
        //ProjectSubLineList response = api.getProjectSubLineById(id, sublineid, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of project sublines for the given project line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectSubLinesTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //ProjectSubLineList response = api.getProjectSubLines(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Test project-lines service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        //String response = api.ping();
        // TODO: test validations
    }

    /**
     * Start a project line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startTest() throws ApiException {
        //Long id = null;
        //api.start(id);
        // TODO: test validations
    }

    /**
     * Partial update of a project line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEstimatedTest() throws ApiException {
        //Long id = null;
        //WritableProjectLine writableProjectLine = null;
        //api.updateEstimated(id, writableProjectLine);
        // TODO: test validations
    }

    /**
     * Update invoicing of a project line with estimated, included or global invoicing mode
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGlobalInvoicingTest() throws ApiException {
        //Long id = null;
        //ProjectLineGlobalEstimatedInvoicing projectLineGlobalEstimatedInvoicing = null;
        //api.updateGlobalInvoicing(id, projectLineGlobalEstimatedInvoicing);
        // TODO: test validations
    }

    /**
     * Update invoicing of expense or purchase project line with real invoicing mode
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOtherRealInvoicingTest() throws ApiException {
        //Long id = null;
        //List<ProjectLineOtherRealInvoicing> projectLineOtherRealInvoicing = null;
        //api.updateOtherRealInvoicing(id, projectLineOtherRealInvoicing);
        // TODO: test validations
    }

    /**
     * Update invoicing of time project line with real invoicing mode
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTimeRealInvoicingTest() throws ApiException {
        //Long id = null;
        //List<ProjectLineTimeRealInvoicing> projectLineTimeRealInvoicing = null;
        //api.updateTimeRealInvoicing(id, projectLineTimeRealInvoicing);
        // TODO: test validations
    }

    /**
     * Validate a project line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateTest() throws ApiException {
        //Long id = null;
        //api.validate(id);
        // TODO: test validations
    }

}
