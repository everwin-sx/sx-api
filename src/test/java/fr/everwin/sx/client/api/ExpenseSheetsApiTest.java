/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.api;

import fr.everwin.sx.client.*;
import fr.everwin.sx.client.auth.*;
import fr.everwin.sx.client.model.Comment;
import fr.everwin.sx.client.model.Document;
import fr.everwin.sx.client.model.ErrorMessage;
import fr.everwin.sx.client.model.ExpenseSheet;
import fr.everwin.sx.client.model.ExpenseSheetLine;
import fr.everwin.sx.client.model.FormDataContentDisposition;
import java.time.OffsetDateTime;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExpenseSheetsApi
 */
public class ExpenseSheetsApiTest {

    private final ExpenseSheetsApi api = new ExpenseSheetsApi();

    /**
     * Create an Expense Sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        //ExpenseSheet expenseSheet = null;
        //api.create(expenseSheet);
        // TODO: test validations
    }

    /**
     * Create a new document for the expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentTest() throws ApiException {
        //Long id = null;
        //Document document = null;
        //api.createDocument(id, document);
        // TODO: test validations
    }

    /**
     * Create a new document of the expense sheet line for an expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //Document document = null;
        //api.createDocumentLine(id, lineid, document);
        // TODO: test validations
    }

    /**
     * Create an Expense Sheet Line for An Expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createExpenseSheetLineTest() throws ApiException {
        //Long id = null;
        //ExpenseSheetLine expenseSheetLine = null;
        //api.createExpenseSheetLine(id, expenseSheetLine);
        // TODO: test validations
    }

    /**
     * Delete an Expense Sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        //Long id = null;
        //api.delete(id);
        // TODO: test validations
    }

    /**
     * Delete an expense sheet document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //api.deleteDocument(id, did);
        // TODO: test validations
    }

    /**
     * Delete an expense sheet line document for an Expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDocumentLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //Long did = null;
        //api.deleteDocumentLine(id, lineid, did);
        // TODO: test validations
    }

    /**
     * Delete an Expense Sheet Line for an Expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExpenseSheetLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //api.deleteExpenseSheetLine(id, lineid);
        // TODO: test validations
    }

    /**
     * Get physical file linked to the expense sheet document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //api.downloadDocument(id, did);
        // TODO: test validations
    }

    /**
     * Get physical file linked to the expense sheet line document for an expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadDocumentLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //Long did = null;
        //api.downloadDocumentLine(id, lineid, did);
        // TODO: test validations
    }

    /**
     * Get an expense sheet by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        //Long id = null;
        //String fields = null;
        //api.getById(id, fields);
        // TODO: test validations
    }

    /**
     * Get an expense sheet document by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentByIdTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //String fields = null;
        //api.getDocumentById(id, did, fields);
        // TODO: test validations
    }

    /**
     * Get an expense sheet line document by id for an expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentLineByIdTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //Long did = null;
        //String fields = null;
        //api.getDocumentLineById(id, lineid, did, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of documents for the given expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentsTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //api.getDocuments(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of documents of the given expense sheet line for an expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentsLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //api.getDocumentsLine(id, lineid, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get an expense sheet line for the given expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExpenseSheetLineByIdTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //String fields = null;
        //api.getExpenseSheetLineById(id, lineid, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of expense sheet lines for the given expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExpenseSheetLinesTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //api.getExpenseSheetLines(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of mission orders for the given expense sheet and project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMissionFormListTest() throws ApiException {
        //Long id = null;
        //Long projectId = null;
        //OffsetDateTime date = null;
        //String filter = null;
        //String fields = null;
        //api.getMissionFormList(id, projectId, date, filter, fields);
        // TODO: test validations
    }

    /**
     * Get 20 last recent projects for an expense sheet by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentProjectsTest() throws ApiException {
        //Long id = null;
        //String fields = null;
        //api.getRecentProjects(id, fields);
        // TODO: test validations
    }

    /**
     * Test expense sheets service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        //api.ping();
        // TODO: test validations
    }

    /**
     * Get an expense sheets collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //api.query(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of affectations for the given expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryAffectationListTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String fields = null;
        //api.queryAffectationList(id, filter, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of available guests for the given expense line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryAvailableGuestListTest() throws ApiException {
        //Long id = null;
        //OffsetDateTime date = null;
        //Long projectId = null;
        //Long rowtypeId = null;
        //String filter = null;
        //String fields = null;
        //api.queryAvailableGuestList(id, date, projectId, rowtypeId, filter, fields);
        // TODO: test validations
    }

    /**
     * Get the project lines linked to the project, expense and rowtype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryProjectLinesTest() throws ApiException {
        //Long id = null;
        //Long projectid = null;
        //Long rowtypeid = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //api.queryProjectLines(id, projectid, rowtypeid, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get available projects for an expense sheet by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryProjectsTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //api.queryProjects(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of guests recent
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryRecentGuestListTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String fields = null;
        //api.queryRecentGuestList(id, filter, fields);
        // TODO: test validations
    }

    /**
     * Get all visible rowtype for expenses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryRowTypesTest() throws ApiException {
        //Long id = null;
        //Long projectid = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //api.queryRowTypes(id, projectid, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of scales for the given expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryScaleListTest() throws ApiException {
        //Long id = null;
        //Long rowtypeId = null;
        //Long vehicleId = null;
        //String filter = null;
        //String fields = null;
        //api.queryScaleList(id, rowtypeId, vehicleId, filter, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of flow history for the given expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryValidationHistoryListTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String fields = null;
        //api.queryValidationHistoryList(id, filter, fields);
        // TODO: test validations
    }

    /**
     * Unvalidate the expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unvalidateTest() throws ApiException {
        //Long id = null;
        //Comment comment = null;
        //api.unvalidate(id, comment);
        // TODO: test validations
    }

    /**
     * Full update of an Expense Sheet. If Expense Sheet doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        //Long id = null;
        //ExpenseSheet expenseSheet = null;
        //api.update(id, expenseSheet);
        // TODO: test validations
    }

    /**
     * Full update of an expense sheet document. If document doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //Document document = null;
        //api.updateDocument(id, did, document);
        // TODO: test validations
    }

    /**
     * Full update of an expense sheet line document for an expense sheet. If document doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDocumentLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //Long did = null;
        //Document document = null;
        //api.updateDocumentLine(id, lineid, did, document);
        // TODO: test validations
    }

    /**
     * Full update of an Expense Sheet Line for an Expense sheet. If Expense Sheet Line doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExpenseSheetLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //ExpenseSheetLine expenseSheetLine = null;
        //api.updateExpenseSheetLine(id, lineid, expenseSheetLine);
        // TODO: test validations
    }

    /**
     * Partial update of an Expense Sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialTest() throws ApiException {
        //Long id = null;
        //ExpenseSheet expenseSheet = null;
        //api.updatePartial(id, expenseSheet);
        // TODO: test validations
    }

    /**
     * Partial update of a document expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //Document document = null;
        //api.updatePartialDocument(id, did, document);
        // TODO: test validations
    }

    /**
     * Partial update of a document expense sheet line for an expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialDocumentLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //Long did = null;
        //Document document = null;
        //api.updatePartialDocumentLine(id, lineid, did, document);
        // TODO: test validations
    }

    /**
     * Partial update of an Expense Sheet Line for an Expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialExpenseSheetLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //ExpenseSheetLine expenseSheetLine = null;
        //api.updatePartialExpenseSheetLine(id, lineid, expenseSheetLine);
        // TODO: test validations
    }

    /**
     * Upload physical file linked to the expense sheet document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //FormDataContentDisposition _file = null;
        //api.uploadDocument(id, did, _file);
        // TODO: test validations
    }

    /**
     * Upload physical file linked to the expense sheet line document for an expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadDocumentLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //Long did = null;
        //FormDataContentDisposition _file = null;
        //api.uploadDocumentLine(id, lineid, did, _file);
        // TODO: test validations
    }

    /**
     * Validate the expense sheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateTest() throws ApiException {
        //Long id = null;
        //Comment comment = null;
        //api.validate(id, comment);
        // TODO: test validations
    }

}
