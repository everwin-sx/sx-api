/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.02.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.api;

import fr.everwin.sx.client.ApiException;
import org.junit.jupiter.api.Test;

/**
 * API tests for PuchaseRequestsApi
 */
public class PuchaseRequestsApiTest {

    private final PuchaseRequestsApi api = new PuchaseRequestsApi();

    /**
     * Create a Purchase Request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPurchaseRequestTest() throws ApiException {
        //PurchaseRequest purchaseRequest = null;
        //PurchaseRequest response = api.createPurchaseRequest(purchaseRequest);
        // TODO: test validations
    }

    /**
     * Create a new document for the Purchase Request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPurchaseRequestDocumentTest() throws ApiException {
        //Long id = null;
        //Document document = null;
        //Document response = api.createPurchaseRequestDocument(id, document);
        // TODO: test validations
    }

    /**
     * Create a Purchase Request Line for A Purchase Request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPurchaseRequestPurchaseRequestLineTest() throws ApiException {
        //Long id = null;
        //PurchaseRequestLine purchaseRequestLine = null;
        //PurchaseRequestLine response = api.createPurchaseRequestPurchaseRequestLine(id, purchaseRequestLine);
        // TODO: test validations
    }

    /**
     * Delete a Purchase Request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePurchaseRequestTest() throws ApiException {
        //Long id = null;
        //api.deletePurchaseRequest(id);
        // TODO: test validations
    }

    /**
     * Delete a Purchase Request document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePurchaseRequestDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //api.deletePurchaseRequestDocument(id, did);
        // TODO: test validations
    }

    /**
     * Delete a Purchase Request Line  for a Purchase Request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePurchaseRequestPurchaseRequestLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //api.deletePurchaseRequestPurchaseRequestLine(id, lineid);
        // TODO: test validations
    }

    /**
     * Get physical file linked to the purchase request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadPurchaseRequestDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //api.downloadPurchaseRequestDocument(id, did);
        // TODO: test validations
    }

    /**
     * Get an Purchase Request by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPurchaseRequestByIdTest() throws ApiException {
        //Long id = null;
        //String fields = null;
        //PurchaseRequest response = api.getPurchaseRequestById(id, fields);
        // TODO: test validations
    }

    /**
     * Get a Purchase Request document by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPurchaseRequestDocumentByIdTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //String fields = null;
        //Document response = api.getPurchaseRequestDocumentById(id, did, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of documents for the given purchase request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPurchaseRequestDocumentsTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //DocumentList response = api.getPurchaseRequestDocuments(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of purchase request lines for the given purchase request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPurchaseRequestLinesTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //PurchaseRequestLineList response = api.getPurchaseRequestLines(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a purchase request line for the given purchase request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPurchaseRequestPurchaseRequestLineByIdTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //String fields = null;
        //PurchaseRequestLine response = api.getPurchaseRequestPurchaseRequestLineById(id, lineid, fields);
        // TODO: test validations
    }

    /**
     * Test Purchase Request service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingPurchaseRequestTest() throws ApiException {
        //String response = api.pingPurchaseRequest();
        // TODO: test validations
    }

    /**
     * Get a Purchase Request collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryPurchaseRequestTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //PurchaseRequestList response = api.queryPurchaseRequest(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Partial update of a Purchase Request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialPurchaseRequestTest() throws ApiException {
        //Long id = null;
        //PurchaseRequest purchaseRequest = null;
        //api.updatePartialPurchaseRequest(id, purchaseRequest);
        // TODO: test validations
    }

    /**
     * Partial update of a document Purchase Request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialPurchaseRequestDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //Document document = null;
        //api.updatePartialPurchaseRequestDocument(id, did, document);
        // TODO: test validations
    }

    /**
     * Partial update of a Purchase Request Line  for a Purchase Request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialPurchaseRequestPurchaseRequestLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //PurchaseRequestLine purchaseRequestLine = null;
        //api.updatePartialPurchaseRequestPurchaseRequestLine(id, lineid, purchaseRequestLine);
        // TODO: test validations
    }

    /**
     * Full update of a Purchase Request. If Purchase Request doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePurchaseRequestTest() throws ApiException {
        //Long id = null;
        //PurchaseRequest purchaseRequest = null;
        //api.updatePurchaseRequest(id, purchaseRequest);
        // TODO: test validations
    }

    /**
     * Full update of a Purchase Request document. If document doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePurchaseRequestDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //Document document = null;
        //api.updatePurchaseRequestDocument(id, did, document);
        // TODO: test validations
    }

    /**
     * Full update of a Purchase Request Line for a Purchase Request. If Purchase Request Line doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePurchaseRequestPurchaseRequestLineTest() throws ApiException {
        //Long id = null;
        //Long lineid = null;
        //PurchaseRequestLine purchaseRequestLine = null;
        //api.updatePurchaseRequestPurchaseRequestLine(id, lineid, purchaseRequestLine);
        // TODO: test validations
    }

    /**
     * Upload physical file linked to the Purchase Request document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadPurchaseRequestDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //FormDataContentDisposition _file = null;
        //api.uploadPurchaseRequestDocument(id, did, _file);
        // TODO: test validations
    }

}
