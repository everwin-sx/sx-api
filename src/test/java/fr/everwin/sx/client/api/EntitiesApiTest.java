/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.api;

import fr.everwin.sx.client.*;
import fr.everwin.sx.client.auth.*;
import fr.everwin.sx.client.model.AccountList;
import fr.everwin.sx.client.model.CurrencyList;
import fr.everwin.sx.client.model.CurrencyRateList;
import fr.everwin.sx.client.model.Entity;
import fr.everwin.sx.client.model.EntityList;
import fr.everwin.sx.client.model.ErrorMessage;
import java.time.OffsetDateTime;
import fr.everwin.sx.client.model.RowtypeListV3;
import fr.everwin.sx.client.model.Weekend;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EntitiesApi
 */
public class EntitiesApiTest {

    private final EntitiesApi api = new EntitiesApi();

    /**
     * Get a bank holidays dates collection for the period
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankHolidaysTest() throws ApiException {
        //Long id = null;
        //OffsetDateTime startDate = null;
        //OffsetDateTime endDate = null;
        //api.getBankHolidays(id, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Get an entity by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        //Long id = null;
        //String fields = null;
        //Entity response = api.getById(id, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of rowtypes for the given entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRowtypesTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String fields = null;
        //RowtypeListV3 response = api.getRowtypes(id, filter, fields);
        // TODO: test validations
    }

    /**
     * Get week-end days for the given entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWeekendsTest() throws ApiException {
        //Long id = null;
        //Weekend response = api.getWeekends(id);
        // TODO: test validations
    }

    /**
     * Test entities service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        //String response = api.ping();
        // TODO: test validations
    }

    /**
     * Get a entities collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //EntityList response = api.query(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of accounting entities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryAccountingTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //EntityList response = api.queryAccounting(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of accounts for the given entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryAccountsTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String fields = null;
        //AccountList response = api.queryAccounts(id, filter, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of charge accounts with vatmode debit for expense sheets of the given entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryAccountsExpenseSheetTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String fields = null;
        //AccountList response = api.queryAccountsExpenseSheet(id, filter, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of currencies for the given entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryCurrenciesTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String fields = null;
        //CurrencyList response = api.queryCurrencies(id, filter, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of currencies for the given entity and the given currency
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryCurrencies_0Test() throws ApiException {
        //Long id = null;
        //Long cid = null;
        //String filter = null;
        //String fields = null;
        //CurrencyList response = api.queryCurrencies_0(id, cid, filter, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of currency rates for the given entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryCurrencyRatesTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String fields = null;
        //CurrencyRateList response = api.queryCurrencyRates(id, filter, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of financial entities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryFinancialTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //EntityList response = api.queryFinancial(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of last level financial entities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryLastFinancialTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //EntityList response = api.queryLastFinancial(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of last level operational entities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryLastOpertationalTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //EntityList response = api.queryLastOpertational(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of operational entities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryOpertationalTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //EntityList response = api.queryOpertational(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

}
