/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.api;

import fr.everwin.sx.client.*;
import fr.everwin.sx.client.auth.*;
import fr.everwin.sx.client.model.ErrorMessage;
import fr.everwin.sx.client.model.ProjectActivity;
import fr.everwin.sx.client.model.ProjectActivityList;
import fr.everwin.sx.client.model.RenewInfos;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectActivitiesApi
 */
public class ProjectActivitiesApiTest {

    private final ProjectActivitiesApi api = new ProjectActivitiesApi();

    /**
     * Create a project activity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        //ProjectActivity projectActivity = null;
        //api.create(projectActivity);
        // TODO: test validations
    }

    /**
     * Delete a project activity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        //Long id = null;
        //api.delete(id);
        // TODO: test validations
    }

    /**
     * Get a project activity by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        //Long id = null;
        //String fields = null;
        //ProjectActivity response = api.getById(id, fields);
        // TODO: test validations
    }

    /**
     * Test project-activities service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        //String response = api.ping();
        // TODO: test validations
    }

    /**
     * Get a project activities collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //ProjectActivityList response = api.query(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Renew an activity in a new one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renewTest() throws ApiException {
        //Long id = null;
        //RenewInfos renewInfos = null;
        //api.renew(id, renewInfos);
        // TODO: test validations
    }

    /**
     * Renew an activity ligne in the same activity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renewLineTest() throws ApiException {
        //Long id = null;
        //Long lid = null;
        //RenewInfos renewInfos = null;
        //api.renewLine(id, lid, renewInfos);
        // TODO: test validations
    }

    /**
     * Full update of a project activity. If project activity doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        //Long id = null;
        //ProjectActivity projectActivity = null;
        //api.update(id, projectActivity);
        // TODO: test validations
    }

    /**
     * Partial update of a project activity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialTest() throws ApiException {
        //Long id = null;
        //ProjectActivity projectActivity = null;
        //api.updatePartial(id, projectActivity);
        // TODO: test validations
    }

}
