/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.api;

import fr.everwin.sx.client.*;
import fr.everwin.sx.client.auth.*;
import fr.everwin.sx.client.model.Comment;
import fr.everwin.sx.client.model.CommentList;
import fr.everwin.sx.client.model.CommercialList;
import fr.everwin.sx.client.model.CounterList;
import fr.everwin.sx.client.model.Document;
import fr.everwin.sx.client.model.DocumentList;
import fr.everwin.sx.client.model.Employee;
import fr.everwin.sx.client.model.EmployeeList;
import fr.everwin.sx.client.model.EmployeeScope;
import fr.everwin.sx.client.model.EmployeeSkillList;
import fr.everwin.sx.client.model.ErrorMessage;
import fr.everwin.sx.client.model.FormDataContentDisposition;
import fr.everwin.sx.client.model.LeaveRequestList;
import fr.everwin.sx.client.model.ManagerList;
import fr.everwin.sx.client.model.ProjectDirectorList;
import fr.everwin.sx.client.model.Projection;
import fr.everwin.sx.client.model.ProjectionRequest;
import fr.everwin.sx.client.model.RecruitmentManagerList;
import fr.everwin.sx.client.model.TypeList;
import fr.everwin.sx.client.model.VehicleList;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeesApi
 */
public class EmployeesApiTest {

    private final EmployeesApi api = new EmployeesApi();

    /**
     * Create an employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        //Employee employee = null;
        //api.create(employee);
        // TODO: test validations
    }

    /**
     * Create a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCommentTest() throws ApiException {
        //Long id = null;
        //Comment comment = null;
        //api.createComment(id, comment);
        // TODO: test validations
    }

    /**
     * Create a new document for the employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentTest() throws ApiException {
        //Long id = null;
        //Document document = null;
        //api.createDocument(id, document);
        // TODO: test validations
    }

    /**
     * Create a scope for an employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createScopeTest() throws ApiException {
        //Long id = null;
        //EmployeeScope employeeScope = null;
        //api.createScope(id, employeeScope);
        // TODO: test validations
    }

    /**
     * Delete an employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        //Long id = null;
        //api.delete(id);
        // TODO: test validations
    }

    /**
     * Delete a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCommentTest() throws ApiException {
        //Long id = null;
        //Long cid = null;
        //api.deleteComment(id, cid);
        // TODO: test validations
    }

    /**
     * Delete a employee document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //api.deleteDocument(id, did);
        // TODO: test validations
    }

    /**
     * Delete an scope for an employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScopeTest() throws ApiException {
        //Long id = null;
        //Long scopeid = null;
        //api.deleteScope(id, scopeid);
        // TODO: test validations
    }

    /**
     * Get physical file linked to the employee document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //api.downloadDocument(id, did);
        // TODO: test validations
    }

    /**
     * Get an employee by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        //Long id = null;
        //String fields = null;
        //Employee response = api.getById(id, fields);
        // TODO: test validations
    }

    /**
     * Get a comment by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentByIdTest() throws ApiException {
        //Long id = null;
        //Long cid = null;
        //String fields = null;
        //Comment response = api.getCommentById(id, cid, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of comments for the given employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentsTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //CommentList response = api.getComments(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get current expense and time periods for the employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentTimePeriodTest() throws ApiException {
        //api.getCurrentTimePeriod();
        // TODO: test validations
    }

    /**
     * Get a employee document by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentByIdTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //String fields = null;
        //Document response = api.getDocumentById(id, did, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of documents for the given employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentsTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //DocumentList response = api.getDocuments(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get leave-requests types for an employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLeaveRequestTypesTest() throws ApiException {
        //Long id = null;
        //Integer offset = null;
        //Integer limit = null;
        //TypeList response = api.getLeaveRequestTypes(id, offset, limit);
        // TODO: test validations
    }

    /**
     * Get leave-requests types for an employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLeaveRequestTypesForTimeCounterTest() throws ApiException {
        //Long id = null;
        //Long timeCounterId = null;
        //Integer offset = null;
        //Integer limit = null;
        //TypeList response = api.getLeaveRequestTypesForTimeCounter(id, timeCounterId, offset, limit);
        // TODO: test validations
    }

    /**
     * Get leave requests of the employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLeaveRequestsTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //LeaveRequestList response = api.getLeaveRequests(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get current employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeTest() throws ApiException {
        //String fields = null;
        //api.getMe(fields);
        // TODO: test validations
    }

    /**
     * Get a time counter
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceCounterByIdTest() throws ApiException {
        //Long id = null;
        //Long idCounter = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //CounterList response = api.getResourceCounterById(id, idCounter, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get time counters of the employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceCountersTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //CounterList response = api.getResourceCounters(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get scopes of the employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScopesTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //api.getScopes(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get skills of the employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSkillsTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //EmployeeSkillList response = api.getSkills(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a collection of vehicles for the given employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVehiclesTest() throws ApiException {
        //Long id = null;
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //VehicleList response = api.getVehicles(id, filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Test employees service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        //String response = api.ping();
        // TODO: test validations
    }

    /**
     * Get the projection for a time counter
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectionTest() throws ApiException {
        //Long id = null;
        //Long idCounter = null;
        //ProjectionRequest projectionRequest = null;
        //Projection response = api.projection(id, idCounter, projectionRequest);
        // TODO: test validations
    }

    /**
     * Get an employees collection for pwa
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pwaQueryTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //EmployeeList response = api.pwaQuery(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get an employees collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //EmployeeList response = api.query(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a project commercial collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryCommercialTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //CommercialList response = api.queryCommercial(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a manager collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryManagerTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //ManagerList response = api.queryManager(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a project director collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryProjectDirectorTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //ProjectDirectorList response = api.queryProjectDirector(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a project manager collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryProjectManagerTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //api.queryProjectManager(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get a recruitment manager collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryRecruitmentManagerTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //RecruitmentManagerList response = api.queryRecruitmentManager(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Full update of an employee. If employee doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        //Long id = null;
        //Employee employee = null;
        //api.update(id, employee);
        // TODO: test validations
    }

    /**
     * Full update of a comment. If comment doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCommentTest() throws ApiException {
        //Long id = null;
        //Long cid = null;
        //Comment comment = null;
        //api.updateComment(id, cid, comment);
        // TODO: test validations
    }

    /**
     * Full update of a employee document. If document doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //Document document = null;
        //api.updateDocument(id, did, document);
        // TODO: test validations
    }

    /**
     * Partial update of an employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialTest() throws ApiException {
        //Long id = null;
        //Employee employee = null;
        //api.updatePartial(id, employee);
        // TODO: test validations
    }

    /**
     * Partial update of a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialCommentTest() throws ApiException {
        //Long id = null;
        //Long cid = null;
        //Comment comment = null;
        //api.updatePartialComment(id, cid, comment);
        // TODO: test validations
    }

    /**
     * Partial update of a employee company
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //Document document = null;
        //api.updatePartialDocument(id, did, document);
        // TODO: test validations
    }

    /**
     * Partial update of a scope for an employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialScopeTest() throws ApiException {
        //Long id = null;
        //Long scopeid = null;
        //EmployeeScope employeeScope = null;
        //api.updatePartialScope(id, scopeid, employeeScope);
        // TODO: test validations
    }

    /**
     * Full update of a scope for an employee. If the scope doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateScopeTest() throws ApiException {
        //Long id = null;
        //Long scopeid = null;
        //EmployeeScope employeeScope = null;
        //api.updateScope(id, scopeid, employeeScope);
        // TODO: test validations
    }

    /**
     * Upload physical file linked to the employee document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadDocumentTest() throws ApiException {
        //Long id = null;
        //Long did = null;
        //FormDataContentDisposition _file = null;
        //api.uploadDocument(id, did, _file);
        // TODO: test validations
    }

}
