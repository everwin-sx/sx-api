/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.api;

import fr.everwin.sx.client.*;
import fr.everwin.sx.client.auth.*;
import fr.everwin.sx.client.model.CopyData;
import fr.everwin.sx.client.model.ErrorMessage;
import fr.everwin.sx.client.model.ExpensePack;
import fr.everwin.sx.client.model.ExpensePackList;
import fr.everwin.sx.client.model.MissionOrderList;
import java.time.OffsetDateTime;
import fr.everwin.sx.client.model.ProjectLineList;
import fr.everwin.sx.client.model.RowtypeListV3;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExpensePacksApi
 */
public class ExpensePacksApiTest {

    private final ExpensePacksApi api = new ExpensePacksApi();

    /**
     * Create an expense pack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        //ExpensePack expensePack = null;
        //api.create(expensePack);
        // TODO: test validations
    }

    /**
     * Delete an expense pack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        //Long id = null;
        //api.delete(id);
        // TODO: test validations
    }

    /**
     * Duplicate a expense pack on dates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void duplicateTest() throws ApiException {
        //Long id = null;
        //CopyData copyData = null;
        //api.duplicate(id, copyData);
        // TODO: test validations
    }

    /**
     * Get a expense pack by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        //Long id = null;
        //String fields = null;
        //ExpensePack response = api.getById(id, fields);
        // TODO: test validations
    }

    /**
     * Test expense pack service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        //String response = api.ping();
        // TODO: test validations
    }

    /**
     * Get a expense pack collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        //String filter = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //String fields = null;
        //ExpensePackList response = api.query(filter, sort, offset, limit, fields);
        // TODO: test validations
    }

    /**
     * Get the mission orders linked to the project available for the employee and the date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryMissionOrdersTest() throws ApiException {
        //OffsetDateTime date = null;
        //Long emp = null;
        //Long prj = null;
        //String fields = null;
        //MissionOrderList response = api.queryMissionOrders(date, emp, prj, fields);
        // TODO: test validations
    }

    /**
     * Get the project lines linked to the project available for the employee, the rowtype and the date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryProjectLinesTest() throws ApiException {
        //OffsetDateTime date = null;
        //Long emp = null;
        //Long prj = null;
        //Long rty = null;
        //String fields = null;
        //ProjectLineList response = api.queryProjectLines(date, emp, prj, rty, fields);
        // TODO: test validations
    }

    /**
     * Get the expense packs types linked to the project available for the employee, the missform and the date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryTypesTest() throws ApiException {
        //OffsetDateTime date = null;
        //Long emp = null;
        //Long prj = null;
        //Long msf = null;
        //Long rxp = null;
        //String fields = null;
        //RowtypeListV3 response = api.queryTypes(date, emp, prj, msf, rxp, fields);
        // TODO: test validations
    }

    /**
     * Full update of an expense pack. If expense pack doesn&#39;t exist, it&#39;s created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        //Long id = null;
        //ExpensePack expensePack = null;
        //api.update(id, expensePack);
        // TODO: test validations
    }

    /**
     * Partial update of an expense pack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartialTest() throws ApiException {
        //Long id = null;
        //ExpensePack expensePack = null;
        //api.updatePartial(id, expensePack);
        // TODO: test validations
    }

}
