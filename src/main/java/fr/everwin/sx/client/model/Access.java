/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.02.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.Objects;


/**
 * Access
 */
@JsonPropertyOrder({
  Access.JSON_PROPERTY_CAN_VALIDATE,
  Access.JSON_PROPERTY_CAN_UNVALIDATE,
  Access.JSON_PROPERTY_CAN_REFUSE,
  Access.JSON_PROPERTY_CAN_UPDATE,
  Access.JSON_PROPERTY_CAN_DELETE,
  Access.JSON_PROPERTY_CAN_COPY
})
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-10-06T08:58:20.555636300+02:00[Europe/Paris]")
public class Access {
  public static final String JSON_PROPERTY_CAN_VALIDATE = "canValidate";
  private Boolean canValidate;

  public static final String JSON_PROPERTY_CAN_UNVALIDATE = "canUnvalidate";
  private Boolean canUnvalidate;

  public static final String JSON_PROPERTY_CAN_REFUSE = "canRefuse";
  private Boolean canRefuse;

  public static final String JSON_PROPERTY_CAN_UPDATE = "canUpdate";
  private Boolean canUpdate;

  public static final String JSON_PROPERTY_CAN_DELETE = "canDelete";
  private Boolean canDelete;

  public static final String JSON_PROPERTY_CAN_COPY = "canCopy";
  private Boolean canCopy;

  public Access() { 
  }

  public Access canValidate(Boolean canValidate) {
    this.canValidate = canValidate;
    return this;
  }

   /**
   * True if can piece can be validated
   * @return canValidate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_VALIDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanValidate() {
    return canValidate;
  }


  @JsonProperty(JSON_PROPERTY_CAN_VALIDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanValidate(Boolean canValidate) {
    this.canValidate = canValidate;
  }


  public Access canUnvalidate(Boolean canUnvalidate) {
    this.canUnvalidate = canUnvalidate;
    return this;
  }

   /**
   * True if can piece can be unvalidated
   * @return canUnvalidate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_UNVALIDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanUnvalidate() {
    return canUnvalidate;
  }


  @JsonProperty(JSON_PROPERTY_CAN_UNVALIDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanUnvalidate(Boolean canUnvalidate) {
    this.canUnvalidate = canUnvalidate;
  }


  public Access canRefuse(Boolean canRefuse) {
    this.canRefuse = canRefuse;
    return this;
  }

   /**
   * True if can piece can be refused or canceled
   * @return canRefuse
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_REFUSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanRefuse() {
    return canRefuse;
  }


  @JsonProperty(JSON_PROPERTY_CAN_REFUSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanRefuse(Boolean canRefuse) {
    this.canRefuse = canRefuse;
  }


  public Access canUpdate(Boolean canUpdate) {
    this.canUpdate = canUpdate;
    return this;
  }

   /**
   * True if can piece can be updated
   * @return canUpdate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanUpdate() {
    return canUpdate;
  }


  @JsonProperty(JSON_PROPERTY_CAN_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanUpdate(Boolean canUpdate) {
    this.canUpdate = canUpdate;
  }


  public Access canDelete(Boolean canDelete) {
    this.canDelete = canDelete;
    return this;
  }

   /**
   * True if can piece can be deleted
   * @return canDelete
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_DELETE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanDelete() {
    return canDelete;
  }


  @JsonProperty(JSON_PROPERTY_CAN_DELETE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanDelete(Boolean canDelete) {
    this.canDelete = canDelete;
  }


  public Access canCopy(Boolean canCopy) {
    this.canCopy = canCopy;
    return this;
  }

   /**
   * True if can piece can be duplicated
   * @return canCopy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_COPY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanCopy() {
    return canCopy;
  }


  @JsonProperty(JSON_PROPERTY_CAN_COPY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanCopy(Boolean canCopy) {
    this.canCopy = canCopy;
  }


  /**
   * Return true if this Access object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Access access = (Access) o;
    return Objects.equals(this.canValidate, access.canValidate) &&
        Objects.equals(this.canUnvalidate, access.canUnvalidate) &&
        Objects.equals(this.canRefuse, access.canRefuse) &&
        Objects.equals(this.canUpdate, access.canUpdate) &&
        Objects.equals(this.canDelete, access.canDelete) &&
        Objects.equals(this.canCopy, access.canCopy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canValidate, canUnvalidate, canRefuse, canUpdate, canDelete, canCopy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Access {\n");
    sb.append("    canValidate: ").append(toIndentedString(canValidate)).append("\n");
    sb.append("    canUnvalidate: ").append(toIndentedString(canUnvalidate)).append("\n");
    sb.append("    canRefuse: ").append(toIndentedString(canRefuse)).append("\n");
    sb.append("    canUpdate: ").append(toIndentedString(canUpdate)).append("\n");
    sb.append("    canDelete: ").append(toIndentedString(canDelete)).append("\n");
    sb.append("    canCopy: ").append(toIndentedString(canCopy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

