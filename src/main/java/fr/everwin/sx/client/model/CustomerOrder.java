/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import fr.everwin.sx.client.model.CompanyDataLink;
import fr.everwin.sx.client.model.CurrencyDataLink;
import fr.everwin.sx.client.model.DataLink;
import fr.everwin.sx.client.model.EmployeeDataLink;
import fr.everwin.sx.client.model.SpecificData;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import fr.everwin.sx.client.JSON;


/**
 * CustomerOrder
 */
@JsonPropertyOrder({
  CustomerOrder.JSON_PROPERTY_ID,
  CustomerOrder.JSON_PROPERTY_VALIDATION_STEP,
  CustomerOrder.JSON_PROPERTY_CODE,
  CustomerOrder.JSON_PROPERTY_ESTIMATES,
  CustomerOrder.JSON_PROPERTY_DATE,
  CustomerOrder.JSON_PROPERTY_RECEIPT_DATE,
  CustomerOrder.JSON_PROPERTY_TOTAL,
  CustomerOrder.JSON_PROPERTY_CUSTOMER,
  CustomerOrder.JSON_PROPERTY_STATUS,
  CustomerOrder.JSON_PROPERTY_START_DATE,
  CustomerOrder.JSON_PROPERTY_END_DATE,
  CustomerOrder.JSON_PROPERTY_REMAINING_TOTAL,
  CustomerOrder.JSON_PROPERTY_QUANTITY,
  CustomerOrder.JSON_PROPERTY_REMAINING_QUANTITY,
  CustomerOrder.JSON_PROPERTY_ACCOUNT,
  CustomerOrder.JSON_PROPERTY_CREATOR,
  CustomerOrder.JSON_PROPERTY_CURRENCY,
  CustomerOrder.JSON_PROPERTY_REFERENCE,
  CustomerOrder.JSON_PROPERTY_TOTAL_ASSIGNED,
  CustomerOrder.JSON_PROPERTY_QUANTITY_ASSIGNED,
  CustomerOrder.JSON_PROPERTY_LABEL,
  CustomerOrder.JSON_PROPERTY_CREATED_ON_TIME,
  CustomerOrder.JSON_PROPERTY_UPDATED_ON_TIME,
  CustomerOrder.JSON_PROPERTY_UPDATED_BY,
  CustomerOrder.JSON_PROPERTY_COMMENT,
  CustomerOrder.JSON_PROPERTY_EXTRA_DATA
})
@JsonTypeName("customerOrder")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-22T08:24:46.022483900+02:00[Europe/Paris]")
public class CustomerOrder {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_VALIDATION_STEP = "validationStep";
  private String validationStep;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_ESTIMATES = "estimates";
  private List<DataLink> estimates = new ArrayList<>();

  public static final String JSON_PROPERTY_DATE = "date";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime date;

  public static final String JSON_PROPERTY_RECEIPT_DATE = "receiptDate";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime receiptDate;

  public static final String JSON_PROPERTY_TOTAL = "total";
  private Double total;

  public static final String JSON_PROPERTY_CUSTOMER = "customer";
  private CompanyDataLink customer;

  /**
   * Status of the customer order. 0: Draft; 1 Open; 2: Closed
   */
  public enum StatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    StatusEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(Integer value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_START_DATE = "startDate";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime startDate;

  public static final String JSON_PROPERTY_END_DATE = "endDate";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime endDate;

  public static final String JSON_PROPERTY_REMAINING_TOTAL = "remainingTotal";
  private Double remainingTotal;

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  private Double quantity;

  public static final String JSON_PROPERTY_REMAINING_QUANTITY = "remainingQuantity";
  private Double remainingQuantity;

  public static final String JSON_PROPERTY_ACCOUNT = "account";
  private DataLink account;

  public static final String JSON_PROPERTY_CREATOR = "creator";
  private EmployeeDataLink creator;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private CurrencyDataLink currency;

  public static final String JSON_PROPERTY_REFERENCE = "reference";
  private String reference;

  public static final String JSON_PROPERTY_TOTAL_ASSIGNED = "totalAssigned";
  private Double totalAssigned;

  public static final String JSON_PROPERTY_QUANTITY_ASSIGNED = "quantityAssigned";
  private Double quantityAssigned;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  public static final String JSON_PROPERTY_CREATED_ON_TIME = "createdOnTime";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime createdOnTime;

  public static final String JSON_PROPERTY_UPDATED_ON_TIME = "updatedOnTime";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime updatedOnTime;

  public static final String JSON_PROPERTY_UPDATED_BY = "updatedBy";
  private String updatedBy;

  public static final String JSON_PROPERTY_COMMENT = "comment";
  private String comment;

  public static final String JSON_PROPERTY_EXTRA_DATA = "extraData";
  private List<SpecificData> extraData;

  public CustomerOrder() { 
  }

  @JsonCreator
  public CustomerOrder(
    @JsonProperty(JSON_PROPERTY_ESTIMATES) List<DataLink> estimates, 
    @JsonProperty(JSON_PROPERTY_CREATED_ON_TIME) java.time.LocalDateTime createdOnTime, 
    @JsonProperty(JSON_PROPERTY_UPDATED_ON_TIME) java.time.LocalDateTime updatedOnTime, 
    @JsonProperty(JSON_PROPERTY_UPDATED_BY) String updatedBy
  ) {
    this();
    this.estimates = estimates;
    this.createdOnTime = createdOnTime;
    this.updatedOnTime = updatedOnTime;
    this.updatedBy = updatedBy;
  }

  public CustomerOrder id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * id of the object
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public CustomerOrder validationStep(String validationStep) {
    this.validationStep = validationStep;
    return this;
  }

   /**
   * Validation step of the element
   * @return validationStep
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VALIDATION_STEP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getValidationStep() {
    return validationStep;
  }


  @JsonProperty(JSON_PROPERTY_VALIDATION_STEP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValidationStep(String validationStep) {
    this.validationStep = validationStep;
  }


  public CustomerOrder code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Code of the customer order
   * @return code
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(String code) {
    this.code = code;
  }


   /**
   * Link to the estimate for the customer order
   * @return estimates
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ESTIMATES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<DataLink> getEstimates() {
    return estimates;
  }




  public CustomerOrder date(java.time.LocalDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Date of the customer order
   * @return date
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public java.time.LocalDateTime getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDate(java.time.LocalDateTime date) {
    this.date = date;
  }


  public CustomerOrder receiptDate(java.time.LocalDateTime receiptDate) {
    this.receiptDate = receiptDate;
    return this;
  }

   /**
   * Date of the receipt of the customer order
   * @return receiptDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECEIPT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getReceiptDate() {
    return receiptDate;
  }


  @JsonProperty(JSON_PROPERTY_RECEIPT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReceiptDate(java.time.LocalDateTime receiptDate) {
    this.receiptDate = receiptDate;
  }


  public CustomerOrder total(Double total) {
    this.total = total;
    return this;
  }

   /**
   * Total of the customer order
   * @return total
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getTotal() {
    return total;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotal(Double total) {
    this.total = total;
  }


  public CustomerOrder customer(CompanyDataLink customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CompanyDataLink getCustomer() {
    return customer;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomer(CompanyDataLink customer) {
    this.customer = customer;
  }


  public CustomerOrder status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the customer order. 0: Draft; 1 Open; 2: Closed
   * @return status
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CustomerOrder startDate(java.time.LocalDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date of the customer order
   * @return startDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getStartDate() {
    return startDate;
  }


  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartDate(java.time.LocalDateTime startDate) {
    this.startDate = startDate;
  }


  public CustomerOrder endDate(java.time.LocalDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * End date of the customer order
   * @return endDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getEndDate() {
    return endDate;
  }


  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndDate(java.time.LocalDateTime endDate) {
    this.endDate = endDate;
  }


  public CustomerOrder remainingTotal(Double remainingTotal) {
    this.remainingTotal = remainingTotal;
    return this;
  }

   /**
   * Remaining total of the customer order
   * @return remainingTotal
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMAINING_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getRemainingTotal() {
    return remainingTotal;
  }


  @JsonProperty(JSON_PROPERTY_REMAINING_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemainingTotal(Double remainingTotal) {
    this.remainingTotal = remainingTotal;
  }


  public CustomerOrder quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Quantity of the customer order
   * @return quantity
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getQuantity() {
    return quantity;
  }


  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public CustomerOrder remainingQuantity(Double remainingQuantity) {
    this.remainingQuantity = remainingQuantity;
    return this;
  }

   /**
   * Remaining quantity of the customer order
   * @return remainingQuantity
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMAINING_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getRemainingQuantity() {
    return remainingQuantity;
  }


  @JsonProperty(JSON_PROPERTY_REMAINING_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemainingQuantity(Double remainingQuantity) {
    this.remainingQuantity = remainingQuantity;
  }


  public CustomerOrder account(DataLink account) {
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DataLink getAccount() {
    return account;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccount(DataLink account) {
    this.account = account;
  }


  public CustomerOrder creator(EmployeeDataLink creator) {
    this.creator = creator;
    return this;
  }

   /**
   * Get creator
   * @return creator
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EmployeeDataLink getCreator() {
    return creator;
  }


  @JsonProperty(JSON_PROPERTY_CREATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreator(EmployeeDataLink creator) {
    this.creator = creator;
  }


  public CustomerOrder currency(CurrencyDataLink currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CurrencyDataLink getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(CurrencyDataLink currency) {
    this.currency = currency;
  }


  public CustomerOrder reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Reference of the customer order
   * @return reference
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReference() {
    return reference;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReference(String reference) {
    this.reference = reference;
  }


  public CustomerOrder totalAssigned(Double totalAssigned) {
    this.totalAssigned = totalAssigned;
    return this;
  }

   /**
   * Total assigned to the customer order
   * @return totalAssigned
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_ASSIGNED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getTotalAssigned() {
    return totalAssigned;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_ASSIGNED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalAssigned(Double totalAssigned) {
    this.totalAssigned = totalAssigned;
  }


  public CustomerOrder quantityAssigned(Double quantityAssigned) {
    this.quantityAssigned = quantityAssigned;
    return this;
  }

   /**
   * Quantity assigned to the customer order
   * @return quantityAssigned
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUANTITY_ASSIGNED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getQuantityAssigned() {
    return quantityAssigned;
  }


  @JsonProperty(JSON_PROPERTY_QUANTITY_ASSIGNED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuantityAssigned(Double quantityAssigned) {
    this.quantityAssigned = quantityAssigned;
  }


  public CustomerOrder label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Label of the customer order
   * @return label
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabel(String label) {
    this.label = label;
  }


   /**
   * Date &amp; time of creation of the customer order
   * @return createdOnTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_ON_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getCreatedOnTime() {
    return createdOnTime;
  }




   /**
   * Date &amp; time of the last update of the customer order
   * @return updatedOnTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED_ON_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getUpdatedOnTime() {
    return updatedOnTime;
  }




   /**
   * Login of the user doing the last update on the customer order
   * @return updatedBy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUpdatedBy() {
    return updatedBy;
  }




  public CustomerOrder comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Comment of the customer order
   * @return comment
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getComment() {
    return comment;
  }


  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComment(String comment) {
    this.comment = comment;
  }


  public CustomerOrder extraData(List<SpecificData> extraData) {
    this.extraData = extraData;
    return this;
  }

  public CustomerOrder addExtraDataItem(SpecificData extraDataItem) {
    if (this.extraData == null) {
      this.extraData = new ArrayList<>();
    }
    this.extraData.add(extraDataItem);
    return this;
  }

   /**
   * Extra data of the customer order. For more information, see Extra data section
   * @return extraData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SpecificData> getExtraData() {
    return extraData;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtraData(List<SpecificData> extraData) {
    this.extraData = extraData;
  }


  /**
   * Return true if this customerOrder object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerOrder customerOrder = (CustomerOrder) o;
    return Objects.equals(this.id, customerOrder.id) &&
        Objects.equals(this.validationStep, customerOrder.validationStep) &&
        Objects.equals(this.code, customerOrder.code) &&
        Objects.equals(this.estimates, customerOrder.estimates) &&
        Objects.equals(this.date, customerOrder.date) &&
        Objects.equals(this.receiptDate, customerOrder.receiptDate) &&
        Objects.equals(this.total, customerOrder.total) &&
        Objects.equals(this.customer, customerOrder.customer) &&
        Objects.equals(this.status, customerOrder.status) &&
        Objects.equals(this.startDate, customerOrder.startDate) &&
        Objects.equals(this.endDate, customerOrder.endDate) &&
        Objects.equals(this.remainingTotal, customerOrder.remainingTotal) &&
        Objects.equals(this.quantity, customerOrder.quantity) &&
        Objects.equals(this.remainingQuantity, customerOrder.remainingQuantity) &&
        Objects.equals(this.account, customerOrder.account) &&
        Objects.equals(this.creator, customerOrder.creator) &&
        Objects.equals(this.currency, customerOrder.currency) &&
        Objects.equals(this.reference, customerOrder.reference) &&
        Objects.equals(this.totalAssigned, customerOrder.totalAssigned) &&
        Objects.equals(this.quantityAssigned, customerOrder.quantityAssigned) &&
        Objects.equals(this.label, customerOrder.label) &&
        Objects.equals(this.createdOnTime, customerOrder.createdOnTime) &&
        Objects.equals(this.updatedOnTime, customerOrder.updatedOnTime) &&
        Objects.equals(this.updatedBy, customerOrder.updatedBy) &&
        Objects.equals(this.comment, customerOrder.comment) &&
        Objects.equals(this.extraData, customerOrder.extraData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, validationStep, code, estimates, date, receiptDate, total, customer, status, startDate, endDate, remainingTotal, quantity, remainingQuantity, account, creator, currency, reference, totalAssigned, quantityAssigned, label, createdOnTime, updatedOnTime, updatedBy, comment, extraData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerOrder {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    validationStep: ").append(toIndentedString(validationStep)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    estimates: ").append(toIndentedString(estimates)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    receiptDate: ").append(toIndentedString(receiptDate)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    remainingTotal: ").append(toIndentedString(remainingTotal)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    remainingQuantity: ").append(toIndentedString(remainingQuantity)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    totalAssigned: ").append(toIndentedString(totalAssigned)).append("\n");
    sb.append("    quantityAssigned: ").append(toIndentedString(quantityAssigned)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    createdOnTime: ").append(toIndentedString(createdOnTime)).append("\n");
    sb.append("    updatedOnTime: ").append(toIndentedString(updatedOnTime)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

