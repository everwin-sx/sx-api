/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * JspPropertyGroupDescriptor
 */
@JsonPropertyOrder({
  JspPropertyGroupDescriptor.JSON_PROPERTY_BUFFER,
  JspPropertyGroupDescriptor.JSON_PROPERTY_SCRIPTING_INVALID,
  JspPropertyGroupDescriptor.JSON_PROPERTY_DEFAULT_CONTENT_TYPE,
  JspPropertyGroupDescriptor.JSON_PROPERTY_ERROR_ON_E_L_NOT_FOUND,
  JspPropertyGroupDescriptor.JSON_PROPERTY_TRIM_DIRECTIVE_WHITESPACES,
  JspPropertyGroupDescriptor.JSON_PROPERTY_DEFERRED_SYNTAX_ALLOWED_AS_LITERAL,
  JspPropertyGroupDescriptor.JSON_PROPERTY_ERROR_ON_UNDECLARED_NAMESPACE,
  JspPropertyGroupDescriptor.JSON_PROPERTY_PAGE_ENCODING,
  JspPropertyGroupDescriptor.JSON_PROPERTY_URL_PATTERNS,
  JspPropertyGroupDescriptor.JSON_PROPERTY_EL_IGNORED,
  JspPropertyGroupDescriptor.JSON_PROPERTY_INCLUDE_PRELUDES,
  JspPropertyGroupDescriptor.JSON_PROPERTY_INCLUDE_CODAS,
  JspPropertyGroupDescriptor.JSON_PROPERTY_IS_XML
})
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-21T16:37:39.682984900+02:00[Europe/Paris]")
public class JspPropertyGroupDescriptor {
  public static final String JSON_PROPERTY_BUFFER = "buffer";
  private String buffer;

  public static final String JSON_PROPERTY_SCRIPTING_INVALID = "scriptingInvalid";
  private String scriptingInvalid;

  public static final String JSON_PROPERTY_DEFAULT_CONTENT_TYPE = "defaultContentType";
  private String defaultContentType;

  public static final String JSON_PROPERTY_ERROR_ON_E_L_NOT_FOUND = "errorOnELNotFound";
  private String errorOnELNotFound;

  public static final String JSON_PROPERTY_TRIM_DIRECTIVE_WHITESPACES = "trimDirectiveWhitespaces";
  private String trimDirectiveWhitespaces;

  public static final String JSON_PROPERTY_DEFERRED_SYNTAX_ALLOWED_AS_LITERAL = "deferredSyntaxAllowedAsLiteral";
  private String deferredSyntaxAllowedAsLiteral;

  public static final String JSON_PROPERTY_ERROR_ON_UNDECLARED_NAMESPACE = "errorOnUndeclaredNamespace";
  private String errorOnUndeclaredNamespace;

  public static final String JSON_PROPERTY_PAGE_ENCODING = "pageEncoding";
  private String pageEncoding;

  public static final String JSON_PROPERTY_URL_PATTERNS = "urlPatterns";
  private List<String> urlPatterns;

  public static final String JSON_PROPERTY_EL_IGNORED = "elIgnored";
  private String elIgnored;

  public static final String JSON_PROPERTY_INCLUDE_PRELUDES = "includePreludes";
  private List<String> includePreludes;

  public static final String JSON_PROPERTY_INCLUDE_CODAS = "includeCodas";
  private List<String> includeCodas;

  public static final String JSON_PROPERTY_IS_XML = "isXml";
  private String isXml;

  public JspPropertyGroupDescriptor() { 
  }

  public JspPropertyGroupDescriptor buffer(String buffer) {
    this.buffer = buffer;
    return this;
  }

   /**
   * Get buffer
   * @return buffer
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUFFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBuffer() {
    return buffer;
  }


  @JsonProperty(JSON_PROPERTY_BUFFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuffer(String buffer) {
    this.buffer = buffer;
  }


  public JspPropertyGroupDescriptor scriptingInvalid(String scriptingInvalid) {
    this.scriptingInvalid = scriptingInvalid;
    return this;
  }

   /**
   * Get scriptingInvalid
   * @return scriptingInvalid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCRIPTING_INVALID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScriptingInvalid() {
    return scriptingInvalid;
  }


  @JsonProperty(JSON_PROPERTY_SCRIPTING_INVALID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScriptingInvalid(String scriptingInvalid) {
    this.scriptingInvalid = scriptingInvalid;
  }


  public JspPropertyGroupDescriptor defaultContentType(String defaultContentType) {
    this.defaultContentType = defaultContentType;
    return this;
  }

   /**
   * Get defaultContentType
   * @return defaultContentType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDefaultContentType() {
    return defaultContentType;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultContentType(String defaultContentType) {
    this.defaultContentType = defaultContentType;
  }


  public JspPropertyGroupDescriptor errorOnELNotFound(String errorOnELNotFound) {
    this.errorOnELNotFound = errorOnELNotFound;
    return this;
  }

   /**
   * Get errorOnELNotFound
   * @return errorOnELNotFound
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR_ON_E_L_NOT_FOUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getErrorOnELNotFound() {
    return errorOnELNotFound;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_ON_E_L_NOT_FOUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrorOnELNotFound(String errorOnELNotFound) {
    this.errorOnELNotFound = errorOnELNotFound;
  }


  public JspPropertyGroupDescriptor trimDirectiveWhitespaces(String trimDirectiveWhitespaces) {
    this.trimDirectiveWhitespaces = trimDirectiveWhitespaces;
    return this;
  }

   /**
   * Get trimDirectiveWhitespaces
   * @return trimDirectiveWhitespaces
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRIM_DIRECTIVE_WHITESPACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTrimDirectiveWhitespaces() {
    return trimDirectiveWhitespaces;
  }


  @JsonProperty(JSON_PROPERTY_TRIM_DIRECTIVE_WHITESPACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrimDirectiveWhitespaces(String trimDirectiveWhitespaces) {
    this.trimDirectiveWhitespaces = trimDirectiveWhitespaces;
  }


  public JspPropertyGroupDescriptor deferredSyntaxAllowedAsLiteral(String deferredSyntaxAllowedAsLiteral) {
    this.deferredSyntaxAllowedAsLiteral = deferredSyntaxAllowedAsLiteral;
    return this;
  }

   /**
   * Get deferredSyntaxAllowedAsLiteral
   * @return deferredSyntaxAllowedAsLiteral
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFERRED_SYNTAX_ALLOWED_AS_LITERAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDeferredSyntaxAllowedAsLiteral() {
    return deferredSyntaxAllowedAsLiteral;
  }


  @JsonProperty(JSON_PROPERTY_DEFERRED_SYNTAX_ALLOWED_AS_LITERAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeferredSyntaxAllowedAsLiteral(String deferredSyntaxAllowedAsLiteral) {
    this.deferredSyntaxAllowedAsLiteral = deferredSyntaxAllowedAsLiteral;
  }


  public JspPropertyGroupDescriptor errorOnUndeclaredNamespace(String errorOnUndeclaredNamespace) {
    this.errorOnUndeclaredNamespace = errorOnUndeclaredNamespace;
    return this;
  }

   /**
   * Get errorOnUndeclaredNamespace
   * @return errorOnUndeclaredNamespace
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR_ON_UNDECLARED_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getErrorOnUndeclaredNamespace() {
    return errorOnUndeclaredNamespace;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_ON_UNDECLARED_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrorOnUndeclaredNamespace(String errorOnUndeclaredNamespace) {
    this.errorOnUndeclaredNamespace = errorOnUndeclaredNamespace;
  }


  public JspPropertyGroupDescriptor pageEncoding(String pageEncoding) {
    this.pageEncoding = pageEncoding;
    return this;
  }

   /**
   * Get pageEncoding
   * @return pageEncoding
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAGE_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPageEncoding() {
    return pageEncoding;
  }


  @JsonProperty(JSON_PROPERTY_PAGE_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPageEncoding(String pageEncoding) {
    this.pageEncoding = pageEncoding;
  }


  public JspPropertyGroupDescriptor urlPatterns(List<String> urlPatterns) {
    this.urlPatterns = urlPatterns;
    return this;
  }

  public JspPropertyGroupDescriptor addUrlPatternsItem(String urlPatternsItem) {
    if (this.urlPatterns == null) {
      this.urlPatterns = new ArrayList<>();
    }
    this.urlPatterns.add(urlPatternsItem);
    return this;
  }

   /**
   * Get urlPatterns
   * @return urlPatterns
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URL_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getUrlPatterns() {
    return urlPatterns;
  }


  @JsonProperty(JSON_PROPERTY_URL_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrlPatterns(List<String> urlPatterns) {
    this.urlPatterns = urlPatterns;
  }


  public JspPropertyGroupDescriptor elIgnored(String elIgnored) {
    this.elIgnored = elIgnored;
    return this;
  }

   /**
   * Get elIgnored
   * @return elIgnored
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EL_IGNORED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getElIgnored() {
    return elIgnored;
  }


  @JsonProperty(JSON_PROPERTY_EL_IGNORED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setElIgnored(String elIgnored) {
    this.elIgnored = elIgnored;
  }


  public JspPropertyGroupDescriptor includePreludes(List<String> includePreludes) {
    this.includePreludes = includePreludes;
    return this;
  }

  public JspPropertyGroupDescriptor addIncludePreludesItem(String includePreludesItem) {
    if (this.includePreludes == null) {
      this.includePreludes = new ArrayList<>();
    }
    this.includePreludes.add(includePreludesItem);
    return this;
  }

   /**
   * Get includePreludes
   * @return includePreludes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCLUDE_PRELUDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getIncludePreludes() {
    return includePreludes;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDE_PRELUDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncludePreludes(List<String> includePreludes) {
    this.includePreludes = includePreludes;
  }


  public JspPropertyGroupDescriptor includeCodas(List<String> includeCodas) {
    this.includeCodas = includeCodas;
    return this;
  }

  public JspPropertyGroupDescriptor addIncludeCodasItem(String includeCodasItem) {
    if (this.includeCodas == null) {
      this.includeCodas = new ArrayList<>();
    }
    this.includeCodas.add(includeCodasItem);
    return this;
  }

   /**
   * Get includeCodas
   * @return includeCodas
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCLUDE_CODAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getIncludeCodas() {
    return includeCodas;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDE_CODAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncludeCodas(List<String> includeCodas) {
    this.includeCodas = includeCodas;
  }


  public JspPropertyGroupDescriptor isXml(String isXml) {
    this.isXml = isXml;
    return this;
  }

   /**
   * Get isXml
   * @return isXml
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_XML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIsXml() {
    return isXml;
  }


  @JsonProperty(JSON_PROPERTY_IS_XML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsXml(String isXml) {
    this.isXml = isXml;
  }


  /**
   * Return true if this JspPropertyGroupDescriptor object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JspPropertyGroupDescriptor jspPropertyGroupDescriptor = (JspPropertyGroupDescriptor) o;
    return Objects.equals(this.buffer, jspPropertyGroupDescriptor.buffer) &&
        Objects.equals(this.scriptingInvalid, jspPropertyGroupDescriptor.scriptingInvalid) &&
        Objects.equals(this.defaultContentType, jspPropertyGroupDescriptor.defaultContentType) &&
        Objects.equals(this.errorOnELNotFound, jspPropertyGroupDescriptor.errorOnELNotFound) &&
        Objects.equals(this.trimDirectiveWhitespaces, jspPropertyGroupDescriptor.trimDirectiveWhitespaces) &&
        Objects.equals(this.deferredSyntaxAllowedAsLiteral, jspPropertyGroupDescriptor.deferredSyntaxAllowedAsLiteral) &&
        Objects.equals(this.errorOnUndeclaredNamespace, jspPropertyGroupDescriptor.errorOnUndeclaredNamespace) &&
        Objects.equals(this.pageEncoding, jspPropertyGroupDescriptor.pageEncoding) &&
        Objects.equals(this.urlPatterns, jspPropertyGroupDescriptor.urlPatterns) &&
        Objects.equals(this.elIgnored, jspPropertyGroupDescriptor.elIgnored) &&
        Objects.equals(this.includePreludes, jspPropertyGroupDescriptor.includePreludes) &&
        Objects.equals(this.includeCodas, jspPropertyGroupDescriptor.includeCodas) &&
        Objects.equals(this.isXml, jspPropertyGroupDescriptor.isXml);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buffer, scriptingInvalid, defaultContentType, errorOnELNotFound, trimDirectiveWhitespaces, deferredSyntaxAllowedAsLiteral, errorOnUndeclaredNamespace, pageEncoding, urlPatterns, elIgnored, includePreludes, includeCodas, isXml);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JspPropertyGroupDescriptor {\n");
    sb.append("    buffer: ").append(toIndentedString(buffer)).append("\n");
    sb.append("    scriptingInvalid: ").append(toIndentedString(scriptingInvalid)).append("\n");
    sb.append("    defaultContentType: ").append(toIndentedString(defaultContentType)).append("\n");
    sb.append("    errorOnELNotFound: ").append(toIndentedString(errorOnELNotFound)).append("\n");
    sb.append("    trimDirectiveWhitespaces: ").append(toIndentedString(trimDirectiveWhitespaces)).append("\n");
    sb.append("    deferredSyntaxAllowedAsLiteral: ").append(toIndentedString(deferredSyntaxAllowedAsLiteral)).append("\n");
    sb.append("    errorOnUndeclaredNamespace: ").append(toIndentedString(errorOnUndeclaredNamespace)).append("\n");
    sb.append("    pageEncoding: ").append(toIndentedString(pageEncoding)).append("\n");
    sb.append("    urlPatterns: ").append(toIndentedString(urlPatterns)).append("\n");
    sb.append("    elIgnored: ").append(toIndentedString(elIgnored)).append("\n");
    sb.append("    includePreludes: ").append(toIndentedString(includePreludes)).append("\n");
    sb.append("    includeCodas: ").append(toIndentedString(includeCodas)).append("\n");
    sb.append("    isXml: ").append(toIndentedString(isXml)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

