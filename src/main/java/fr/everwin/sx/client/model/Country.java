/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import fr.everwin.sx.client.JSON;


/**
 * Country
 */
@JsonPropertyOrder({
  Country.JSON_PROPERTY_ID,
  Country.JSON_PROPERTY_LABEL,
  Country.JSON_PROPERTY_NATIONALITY,
  Country.JSON_PROPERTY_IS_DEFAULT,
  Country.JSON_PROPERTY_ISO
})
@JsonTypeName("country")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-22T08:24:46.022483900+02:00[Europe/Paris]")
public class Country {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  public static final String JSON_PROPERTY_NATIONALITY = "nationality";
  private String nationality;

  /**
   * Indicates if the country is used as default. 0 : No, 1 : Yes
   */
  public enum IsDefaultEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    IsDefaultEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IsDefaultEnum fromValue(Integer value) {
      for (IsDefaultEnum b : IsDefaultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_IS_DEFAULT = "isDefault";
  private IsDefaultEnum isDefault;

  public static final String JSON_PROPERTY_ISO = "iso";
  private String iso;

  public Country() { 
  }

  public Country id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * id of the object
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public Country label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Label of the country
   * @return label
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabel(String label) {
    this.label = label;
  }


  public Country nationality(String nationality) {
    this.nationality = nationality;
    return this;
  }

   /**
   * Nationality of the country
   * @return nationality
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NATIONALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNationality() {
    return nationality;
  }


  @JsonProperty(JSON_PROPERTY_NATIONALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNationality(String nationality) {
    this.nationality = nationality;
  }


  public Country isDefault(IsDefaultEnum isDefault) {
    this.isDefault = isDefault;
    return this;
  }

   /**
   * Indicates if the country is used as default. 0 : No, 1 : Yes
   * @return isDefault
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_DEFAULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IsDefaultEnum getIsDefault() {
    return isDefault;
  }


  @JsonProperty(JSON_PROPERTY_IS_DEFAULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsDefault(IsDefaultEnum isDefault) {
    this.isDefault = isDefault;
  }


  public Country iso(String iso) {
    this.iso = iso;
    return this;
  }

   /**
   * ISO code of the country
   * @return iso
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIso() {
    return iso;
  }


  @JsonProperty(JSON_PROPERTY_ISO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIso(String iso) {
    this.iso = iso;
  }


  /**
   * Return true if this country object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Country country = (Country) o;
    return Objects.equals(this.id, country.id) &&
        Objects.equals(this.label, country.label) &&
        Objects.equals(this.nationality, country.nationality) &&
        Objects.equals(this.isDefault, country.isDefault) &&
        Objects.equals(this.iso, country.iso);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, nationality, isDefault, iso);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Country {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    iso: ").append(toIndentedString(iso)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

