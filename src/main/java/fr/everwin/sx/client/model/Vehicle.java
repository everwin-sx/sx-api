/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import fr.everwin.sx.client.model.EmployeeDataLink;
import fr.everwin.sx.client.model.ScaleDataLink;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import fr.everwin.sx.client.JSON;


/**
 * Vehicle
 */
@JsonPropertyOrder({
  Vehicle.JSON_PROPERTY_ID,
  Vehicle.JSON_PROPERTY_TYPE,
  Vehicle.JSON_PROPERTY_LABEL,
  Vehicle.JSON_PROPERTY_REGISTRATION,
  Vehicle.JSON_PROPERTY_FISCAL_POWER,
  Vehicle.JSON_PROPERTY_FUEL,
  Vehicle.JSON_PROPERTY_SCALE,
  Vehicle.JSON_PROPERTY_OWNER
})
@JsonTypeName("vehicle")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-22T08:24:46.022483900+02:00[Europe/Paris]")
public class Vehicle {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_TYPE = "type";
  private Integer type;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  public static final String JSON_PROPERTY_REGISTRATION = "registration";
  private String registration;

  public static final String JSON_PROPERTY_FISCAL_POWER = "fiscalPower";
  private Integer fiscalPower;

  public static final String JSON_PROPERTY_FUEL = "fuel";
  private Integer fuel;

  public static final String JSON_PROPERTY_SCALE = "scale";
  private ScaleDataLink scale;

  public static final String JSON_PROPERTY_OWNER = "owner";
  private EmployeeDataLink owner;

  public Vehicle() { 
  }

  public Vehicle id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * id of the object
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public Vehicle type(Integer type) {
    this.type = type;
    return this;
  }

   /**
   * Type of the vehicle. For more information, see &lt;a href&#x3D;&#39;Javascript:systemInfos(\&quot;Vehicles-Type\&quot;);&#39;&gt;Vehicle Type&lt;/a&gt; in System data section
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(Integer type) {
    this.type = type;
  }


  public Vehicle label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Label of the vehicle
   * @return label
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabel(String label) {
    this.label = label;
  }


  public Vehicle registration(String registration) {
    this.registration = registration;
    return this;
  }

   /**
   * Registration number of the vehicle
   * @return registration
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REGISTRATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRegistration() {
    return registration;
  }


  @JsonProperty(JSON_PROPERTY_REGISTRATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegistration(String registration) {
    this.registration = registration;
  }


  public Vehicle fiscalPower(Integer fiscalPower) {
    this.fiscalPower = fiscalPower;
    return this;
  }

   /**
   * Fiscal power of the vehicle. For more information, see &lt;a href&#x3D;&#39;Javascript:systemInfos(\&quot;Vehicles-FiscalPower\&quot;);&#39;&gt;Fiscal Power&lt;/a&gt; in System data section
   * @return fiscalPower
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FISCAL_POWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFiscalPower() {
    return fiscalPower;
  }


  @JsonProperty(JSON_PROPERTY_FISCAL_POWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFiscalPower(Integer fiscalPower) {
    this.fiscalPower = fiscalPower;
  }


  public Vehicle fuel(Integer fuel) {
    this.fuel = fuel;
    return this;
  }

   /**
   * Fuel used by the vehicle. For more information, see &lt;a href&#x3D;&#39;Javascript:systemInfos(\&quot;Vehicles-Fuel\&quot;);&#39;&gt;Fuel&lt;/a&gt; in System data section
   * @return fuel
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FUEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFuel() {
    return fuel;
  }


  @JsonProperty(JSON_PROPERTY_FUEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFuel(Integer fuel) {
    this.fuel = fuel;
  }


  public Vehicle scale(ScaleDataLink scale) {
    this.scale = scale;
    return this;
  }

   /**
   * Get scale
   * @return scale
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ScaleDataLink getScale() {
    return scale;
  }


  @JsonProperty(JSON_PROPERTY_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScale(ScaleDataLink scale) {
    this.scale = scale;
  }


  public Vehicle owner(EmployeeDataLink owner) {
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OWNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EmployeeDataLink getOwner() {
    return owner;
  }


  @JsonProperty(JSON_PROPERTY_OWNER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOwner(EmployeeDataLink owner) {
    this.owner = owner;
  }


  /**
   * Return true if this vehicle object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vehicle vehicle = (Vehicle) o;
    return Objects.equals(this.id, vehicle.id) &&
        Objects.equals(this.type, vehicle.type) &&
        Objects.equals(this.label, vehicle.label) &&
        Objects.equals(this.registration, vehicle.registration) &&
        Objects.equals(this.fiscalPower, vehicle.fiscalPower) &&
        Objects.equals(this.fuel, vehicle.fuel) &&
        Objects.equals(this.scale, vehicle.scale) &&
        Objects.equals(this.owner, vehicle.owner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, label, registration, fiscalPower, fuel, scale, owner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vehicle {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    registration: ").append(toIndentedString(registration)).append("\n");
    sb.append("    fiscalPower: ").append(toIndentedString(fiscalPower)).append("\n");
    sb.append("    fuel: ").append(toIndentedString(fuel)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

