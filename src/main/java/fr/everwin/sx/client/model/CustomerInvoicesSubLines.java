/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.02.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * CustomerInvoicesSubLines
 */
@JsonPropertyOrder({
  CustomerInvoicesSubLines.JSON_PROPERTY_ID,
  CustomerInvoicesSubLines.JSON_PROPERTY_INVOICE,
  CustomerInvoicesSubLines.JSON_PROPERTY_LINE,
  CustomerInvoicesSubLines.JSON_PROPERTY_LABEL,
  CustomerInvoicesSubLines.JSON_PROPERTY_PRINT_MODE,
  CustomerInvoicesSubLines.JSON_PROPERTY_QUANTITY,
  CustomerInvoicesSubLines.JSON_PROPERTY_AMOUNT_WITHOUT_VAT,
  CustomerInvoicesSubLines.JSON_PROPERTY_TOTAL_WITHOUT_VAT,
  CustomerInvoicesSubLines.JSON_PROPERTY_EXTRA_DATA
})
@JsonTypeName("customer-invoices-sub-lines")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-10-06T08:58:20.555636300+02:00[Europe/Paris]")
public class CustomerInvoicesSubLines {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_INVOICE = "invoice";
  private CustomerInvoiceDataLink invoice;

  public static final String JSON_PROPERTY_LINE = "line";
  private CustomerInvoiceLineDataLink line;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  /**
   * Print mode for the customer invoice sub line. 0 : Hidden, 2 : Label, 4 : Total, 6 : Label/Total, 8 : Label/Details/Total
   */
  public enum PrintModeEnum {
    NUMBER_0(0),
    
    NUMBER_2(2),
    
    NUMBER_4(4),
    
    NUMBER_6(6),
    
    NUMBER_8(8);

    private Integer value;

    PrintModeEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PrintModeEnum fromValue(Integer value) {
      for (PrintModeEnum b : PrintModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PRINT_MODE = "printMode";
  private PrintModeEnum printMode;

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  private Double quantity;

  public static final String JSON_PROPERTY_AMOUNT_WITHOUT_VAT = "amountWithoutVat";
  private CustomerInvoiceSubLineMultiCurrency amountWithoutVat;

  public static final String JSON_PROPERTY_TOTAL_WITHOUT_VAT = "totalWithoutVat";
  private CustomerInvoiceSubLineMultiCurrency totalWithoutVat;

  public static final String JSON_PROPERTY_EXTRA_DATA = "extraData";
  private List<SpecificData> extraData;

  public CustomerInvoicesSubLines() { 
  }

  @JsonCreator
  public CustomerInvoicesSubLines(
    @JsonProperty(JSON_PROPERTY_QUANTITY) Double quantity
  ) {
    this();
    this.quantity = quantity;
  }

  public CustomerInvoicesSubLines id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * id of the object
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public CustomerInvoicesSubLines invoice(CustomerInvoiceDataLink invoice) {
    this.invoice = invoice;
    return this;
  }

   /**
   * Get invoice
   * @return invoice
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVOICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CustomerInvoiceDataLink getInvoice() {
    return invoice;
  }


  @JsonProperty(JSON_PROPERTY_INVOICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvoice(CustomerInvoiceDataLink invoice) {
    this.invoice = invoice;
  }


  public CustomerInvoicesSubLines line(CustomerInvoiceLineDataLink line) {
    this.line = line;
    return this;
  }

   /**
   * Get line
   * @return line
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CustomerInvoiceLineDataLink getLine() {
    return line;
  }


  @JsonProperty(JSON_PROPERTY_LINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLine(CustomerInvoiceLineDataLink line) {
    this.line = line;
  }


  public CustomerInvoicesSubLines label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Label of the customer invoice sub line
   * @return label
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabel(String label) {
    this.label = label;
  }


  public CustomerInvoicesSubLines printMode(PrintModeEnum printMode) {
    this.printMode = printMode;
    return this;
  }

   /**
   * Print mode for the customer invoice sub line. 0 : Hidden, 2 : Label, 4 : Total, 6 : Label/Total, 8 : Label/Details/Total
   * @return printMode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRINT_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PrintModeEnum getPrintMode() {
    return printMode;
  }


  @JsonProperty(JSON_PROPERTY_PRINT_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrintMode(PrintModeEnum printMode) {
    this.printMode = printMode;
  }


   /**
   * Quantity of the customer invoice sub line. Uses the duration unit of the project if it&#39;s linked to a time row
   * @return quantity
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getQuantity() {
    return quantity;
  }




  public CustomerInvoicesSubLines amountWithoutVat(CustomerInvoiceSubLineMultiCurrency amountWithoutVat) {
    this.amountWithoutVat = amountWithoutVat;
    return this;
  }

   /**
   * Get amountWithoutVat
   * @return amountWithoutVat
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT_WITHOUT_VAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CustomerInvoiceSubLineMultiCurrency getAmountWithoutVat() {
    return amountWithoutVat;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_WITHOUT_VAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmountWithoutVat(CustomerInvoiceSubLineMultiCurrency amountWithoutVat) {
    this.amountWithoutVat = amountWithoutVat;
  }


  public CustomerInvoicesSubLines totalWithoutVat(CustomerInvoiceSubLineMultiCurrency totalWithoutVat) {
    this.totalWithoutVat = totalWithoutVat;
    return this;
  }

   /**
   * Get totalWithoutVat
   * @return totalWithoutVat
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_WITHOUT_VAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CustomerInvoiceSubLineMultiCurrency getTotalWithoutVat() {
    return totalWithoutVat;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_WITHOUT_VAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalWithoutVat(CustomerInvoiceSubLineMultiCurrency totalWithoutVat) {
    this.totalWithoutVat = totalWithoutVat;
  }


  public CustomerInvoicesSubLines extraData(List<SpecificData> extraData) {
    this.extraData = extraData;
    return this;
  }

  public CustomerInvoicesSubLines addExtraDataItem(SpecificData extraDataItem) {
    if (this.extraData == null) {
      this.extraData = new ArrayList<>();
    }
    this.extraData.add(extraDataItem);
    return this;
  }

   /**
   * Extra data of the customer invoice sub line. For more information, see Extra data section
   * @return extraData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SpecificData> getExtraData() {
    return extraData;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtraData(List<SpecificData> extraData) {
    this.extraData = extraData;
  }


  /**
   * Return true if this customer-invoices-sub-lines object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerInvoicesSubLines customerInvoicesSubLines = (CustomerInvoicesSubLines) o;
    return Objects.equals(this.id, customerInvoicesSubLines.id) &&
        Objects.equals(this.invoice, customerInvoicesSubLines.invoice) &&
        Objects.equals(this.line, customerInvoicesSubLines.line) &&
        Objects.equals(this.label, customerInvoicesSubLines.label) &&
        Objects.equals(this.printMode, customerInvoicesSubLines.printMode) &&
        Objects.equals(this.quantity, customerInvoicesSubLines.quantity) &&
        Objects.equals(this.amountWithoutVat, customerInvoicesSubLines.amountWithoutVat) &&
        Objects.equals(this.totalWithoutVat, customerInvoicesSubLines.totalWithoutVat) &&
        Objects.equals(this.extraData, customerInvoicesSubLines.extraData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, invoice, line, label, printMode, quantity, amountWithoutVat, totalWithoutVat, extraData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerInvoicesSubLines {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    printMode: ").append(toIndentedString(printMode)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    amountWithoutVat: ").append(toIndentedString(amountWithoutVat)).append("\n");
    sb.append("    totalWithoutVat: ").append(toIndentedString(totalWithoutVat)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

