/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * Category
 */
@JsonPropertyOrder({
  Category.JSON_PROPERTY_ID,
  Category.JSON_PROPERTY_LABEL,
  Category.JSON_PROPERTY_ROW_TYPES,
  Category.JSON_PROPERTY_IS_ARCHIVED,
  Category.JSON_PROPERTY_EXTRA_DATA
})
@JsonTypeName("category")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-22T08:24:46.022483900+02:00[Europe/Paris]")
public class Category {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  public static final String JSON_PROPERTY_ROW_TYPES = "rowTypes";
  private List<RowtypeDataLink> rowTypes;

  /**
   * Indicates if category is active or not. 0 : Active, 10 : Unavailable
   */
  public enum IsArchivedEnum {
    NUMBER_0(0),
    
    NUMBER_10(10);

    private Integer value;

    IsArchivedEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IsArchivedEnum fromValue(Integer value) {
      for (IsArchivedEnum b : IsArchivedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_IS_ARCHIVED = "isArchived";
  private IsArchivedEnum isArchived;

  public static final String JSON_PROPERTY_EXTRA_DATA = "extraData";
  private List<SpecificData> extraData;

  public Category() { 
  }

  public Category id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * id of the object
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public Category label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Mandatory label of the category
   * @return label
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLabel(String label) {
    this.label = label;
  }


  public Category rowTypes(List<RowtypeDataLink> rowTypes) {
    this.rowTypes = rowTypes;
    return this;
  }

  public Category addRowTypesItem(RowtypeDataLink rowTypesItem) {
    if (this.rowTypes == null) {
      this.rowTypes = new ArrayList<>();
    }
    this.rowTypes.add(rowTypesItem);
    return this;
  }

   /**
   * Link to the row type of the category
   * @return rowTypes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROW_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RowtypeDataLink> getRowTypes() {
    return rowTypes;
  }


  @JsonProperty(JSON_PROPERTY_ROW_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRowTypes(List<RowtypeDataLink> rowTypes) {
    this.rowTypes = rowTypes;
  }


  public Category isArchived(IsArchivedEnum isArchived) {
    this.isArchived = isArchived;
    return this;
  }

   /**
   * Indicates if category is active or not. 0 : Active, 10 : Unavailable
   * @return isArchived
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IsArchivedEnum getIsArchived() {
    return isArchived;
  }


  @JsonProperty(JSON_PROPERTY_IS_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsArchived(IsArchivedEnum isArchived) {
    this.isArchived = isArchived;
  }


  public Category extraData(List<SpecificData> extraData) {
    this.extraData = extraData;
    return this;
  }

  public Category addExtraDataItem(SpecificData extraDataItem) {
    if (this.extraData == null) {
      this.extraData = new ArrayList<>();
    }
    this.extraData.add(extraDataItem);
    return this;
  }

   /**
   * Extra data of the category. For more information, see Extra data section
   * @return extraData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SpecificData> getExtraData() {
    return extraData;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtraData(List<SpecificData> extraData) {
    this.extraData = extraData;
  }


  /**
   * Return true if this category object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Category category = (Category) o;
    return Objects.equals(this.id, category.id) &&
        Objects.equals(this.label, category.label) &&
        Objects.equals(this.rowTypes, category.rowTypes) &&
        Objects.equals(this.isArchived, category.isArchived) &&
        Objects.equals(this.extraData, category.extraData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, rowTypes, isArchived, extraData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Category {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    rowTypes: ").append(toIndentedString(rowTypes)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

