/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.02.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import fr.everwin.sx.client.model.EntityDataLink;
import fr.everwin.sx.client.model.SpecificData;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import fr.everwin.sx.client.JSON;


/**
 * CurrencyRate
 */
@JsonPropertyOrder({
  CurrencyRate.JSON_PROPERTY_ID,
  CurrencyRate.JSON_PROPERTY_ENTITY,
  CurrencyRate.JSON_PROPERTY_BASE_CURRENCY,
  CurrencyRate.JSON_PROPERTY_COUNTER_CURRENCY,
  CurrencyRate.JSON_PROPERTY_RATE,
  CurrencyRate.JSON_PROPERTY_START_DATE,
  CurrencyRate.JSON_PROPERTY_END_DATE,
  CurrencyRate.JSON_PROPERTY_UPDATED_ON_TIME,
  CurrencyRate.JSON_PROPERTY_CREATED_ON_TIME,
  CurrencyRate.JSON_PROPERTY_UPDATE_MAIN_RATE,
  CurrencyRate.JSON_PROPERTY_EXTRA_DATA
})
@JsonTypeName("currencyRate")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-10-06T08:58:20.555636300+02:00[Europe/Paris]")
public class CurrencyRate {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_ENTITY = "entity";
  private EntityDataLink entity;

  public static final String JSON_PROPERTY_BASE_CURRENCY = "baseCurrency";
  private String baseCurrency;

  public static final String JSON_PROPERTY_COUNTER_CURRENCY = "counterCurrency";
  private String counterCurrency;

  public static final String JSON_PROPERTY_RATE = "rate";
  private Double rate;

  public static final String JSON_PROPERTY_START_DATE = "startDate";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime startDate;

  public static final String JSON_PROPERTY_END_DATE = "endDate";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime endDate;

  public static final String JSON_PROPERTY_UPDATED_ON_TIME = "updatedOnTime";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime updatedOnTime;

  public static final String JSON_PROPERTY_CREATED_ON_TIME = "createdOnTime";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime createdOnTime;

  /**
   * Update main rate. 0 : No, 1 : Yes
   */
  public enum UpdateMainRateEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    UpdateMainRateEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UpdateMainRateEnum fromValue(Integer value) {
      for (UpdateMainRateEnum b : UpdateMainRateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_UPDATE_MAIN_RATE = "updateMainRate";
  private UpdateMainRateEnum updateMainRate;

  public static final String JSON_PROPERTY_EXTRA_DATA = "extraData";
  private List<SpecificData> extraData;

  public CurrencyRate() { 
  }

  @JsonCreator
  public CurrencyRate(
    @JsonProperty(JSON_PROPERTY_UPDATED_ON_TIME) java.time.LocalDateTime updatedOnTime, 
    @JsonProperty(JSON_PROPERTY_CREATED_ON_TIME) java.time.LocalDateTime createdOnTime
  ) {
    this();
    this.updatedOnTime = updatedOnTime;
    this.createdOnTime = createdOnTime;
  }

  public CurrencyRate id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * id of the object
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public CurrencyRate entity(EntityDataLink entity) {
    this.entity = entity;
    return this;
  }

   /**
   * Get entity
   * @return entity
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityDataLink getEntity() {
    return entity;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntity(EntityDataLink entity) {
    this.entity = entity;
  }


  public CurrencyRate baseCurrency(String baseCurrency) {
    this.baseCurrency = baseCurrency;
    return this;
  }

   /**
   * Mandatory ISO code of the base currency of the accounting entity
   * @return baseCurrency
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BASE_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBaseCurrency() {
    return baseCurrency;
  }


  @JsonProperty(JSON_PROPERTY_BASE_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBaseCurrency(String baseCurrency) {
    this.baseCurrency = baseCurrency;
  }


  public CurrencyRate counterCurrency(String counterCurrency) {
    this.counterCurrency = counterCurrency;
    return this;
  }

   /**
   * Mandatory ISO code of the counter currency (which value of this currency gives one unit of base currency)
   * @return counterCurrency
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTER_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCounterCurrency() {
    return counterCurrency;
  }


  @JsonProperty(JSON_PROPERTY_COUNTER_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCounterCurrency(String counterCurrency) {
    this.counterCurrency = counterCurrency;
  }


  public CurrencyRate rate(Double rate) {
    this.rate = rate;
    return this;
  }

   /**
   * Mandatory value of the currency rate X where 1 unit of base currency &#x3D; X units of counter currency
   * @return rate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getRate() {
    return rate;
  }


  @JsonProperty(JSON_PROPERTY_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRate(Double rate) {
    this.rate = rate;
  }


  public CurrencyRate startDate(java.time.LocalDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Mandatory date for the currency rate (first day of month for monthly rates)
   * @return startDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getStartDate() {
    return startDate;
  }


  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartDate(java.time.LocalDateTime startDate) {
    this.startDate = startDate;
  }


  public CurrencyRate endDate(java.time.LocalDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Mandatory end date for the currency rate (first day of month for monthly rates) - same date as startDate
   * @return endDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getEndDate() {
    return endDate;
  }


  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndDate(java.time.LocalDateTime endDate) {
    this.endDate = endDate;
  }


   /**
   * Date &amp; time of the last update of the currency rate
   * @return updatedOnTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED_ON_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getUpdatedOnTime() {
    return updatedOnTime;
  }




   /**
   * Date &amp; time of creation of the currency rate
   * @return createdOnTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_ON_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getCreatedOnTime() {
    return createdOnTime;
  }




  public CurrencyRate updateMainRate(UpdateMainRateEnum updateMainRate) {
    this.updateMainRate = updateMainRate;
    return this;
  }

   /**
   * Update main rate. 0 : No, 1 : Yes
   * @return updateMainRate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATE_MAIN_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UpdateMainRateEnum getUpdateMainRate() {
    return updateMainRate;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_MAIN_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdateMainRate(UpdateMainRateEnum updateMainRate) {
    this.updateMainRate = updateMainRate;
  }


  public CurrencyRate extraData(List<SpecificData> extraData) {
    this.extraData = extraData;
    return this;
  }

  public CurrencyRate addExtraDataItem(SpecificData extraDataItem) {
    if (this.extraData == null) {
      this.extraData = new ArrayList<>();
    }
    this.extraData.add(extraDataItem);
    return this;
  }

   /**
   * Extra data of the company. For more information, see Extra data section
   * @return extraData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SpecificData> getExtraData() {
    return extraData;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtraData(List<SpecificData> extraData) {
    this.extraData = extraData;
  }


  /**
   * Return true if this currencyRate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyRate currencyRate = (CurrencyRate) o;
    return Objects.equals(this.id, currencyRate.id) &&
        Objects.equals(this.entity, currencyRate.entity) &&
        Objects.equals(this.baseCurrency, currencyRate.baseCurrency) &&
        Objects.equals(this.counterCurrency, currencyRate.counterCurrency) &&
        Objects.equals(this.rate, currencyRate.rate) &&
        Objects.equals(this.startDate, currencyRate.startDate) &&
        Objects.equals(this.endDate, currencyRate.endDate) &&
        Objects.equals(this.updatedOnTime, currencyRate.updatedOnTime) &&
        Objects.equals(this.createdOnTime, currencyRate.createdOnTime) &&
        Objects.equals(this.updateMainRate, currencyRate.updateMainRate) &&
        Objects.equals(this.extraData, currencyRate.extraData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, entity, baseCurrency, counterCurrency, rate, startDate, endDate, updatedOnTime, createdOnTime, updateMainRate, extraData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyRate {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    baseCurrency: ").append(toIndentedString(baseCurrency)).append("\n");
    sb.append("    counterCurrency: ").append(toIndentedString(counterCurrency)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    updatedOnTime: ").append(toIndentedString(updatedOnTime)).append("\n");
    sb.append("    createdOnTime: ").append(toIndentedString(createdOnTime)).append("\n");
    sb.append("    updateMainRate: ").append(toIndentedString(updateMainRate)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

