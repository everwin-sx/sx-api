/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.02.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * Guest
 */
@JsonPropertyOrder({
  Guest.JSON_PROPERTY_ID,
  Guest.JSON_PROPERTY_TYPE,
  Guest.JSON_PROPERTY_NAME,
  Guest.JSON_PROPERTY_FUNCTION,
  Guest.JSON_PROPERTY_COMPANY,
  Guest.JSON_PROPERTY_EXPENSE_LINE,
  Guest.JSON_PROPERTY_ENTITY,
  Guest.JSON_PROPERTY_EMPLOYEE,
  Guest.JSON_PROPERTY_TOTAL,
  Guest.JSON_PROPERTY_EXTRA_DATA,
  Guest.JSON_PROPERTY_DELETABLE
})
@JsonTypeName("guest")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-10-06T08:58:20.555636300+02:00[Europe/Paris]")
public class Guest {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  /**
   * Type of the guest. Can be an employee or an external person. For more information, see &lt;a href&#x3D;&#39;Javascript:systemInfos(\&quot;Guest-Type\&quot;);&#39;&gt;Types&lt;/a&gt; in System data section
   */
  public enum TypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    TypeEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(Integer value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_FUNCTION = "function";
  private String function;

  public static final String JSON_PROPERTY_COMPANY = "company";
  private String company;

  public static final String JSON_PROPERTY_EXPENSE_LINE = "expenseLine";
  private ExpenseSheetLineDataLink expenseLine;

  public static final String JSON_PROPERTY_ENTITY = "entity";
  private EntityDataLink entity;

  public static final String JSON_PROPERTY_EMPLOYEE = "employee";
  private EmployeeDataLink employee;

  public static final String JSON_PROPERTY_TOTAL = "total";
  private Double total;

  public static final String JSON_PROPERTY_EXTRA_DATA = "extraData";
  private List<SpecificData> extraData;

  public static final String JSON_PROPERTY_DELETABLE = "deletable";
  private Boolean deletable;

  public Guest() { 
  }

  @JsonCreator
  public Guest(
    @JsonProperty(JSON_PROPERTY_DELETABLE) Boolean deletable
  ) {
    this();
    this.deletable = deletable;
  }

  public Guest id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * id of the object
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public Guest type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of the guest. Can be an employee or an external person. For more information, see &lt;a href&#x3D;&#39;Javascript:systemInfos(\&quot;Guest-Type\&quot;);&#39;&gt;Types&lt;/a&gt; in System data section
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Guest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the guest
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public Guest function(String function) {
    this.function = function;
    return this;
  }

   /**
   * Function of the guest
   * @return function
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FUNCTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFunction() {
    return function;
  }


  @JsonProperty(JSON_PROPERTY_FUNCTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFunction(String function) {
    this.function = function;
  }


  public Guest company(String company) {
    this.company = company;
    return this;
  }

   /**
   * Company of the guest
   * @return company
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPANY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCompany() {
    return company;
  }


  @JsonProperty(JSON_PROPERTY_COMPANY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompany(String company) {
    this.company = company;
  }


  public Guest expenseLine(ExpenseSheetLineDataLink expenseLine) {
    this.expenseLine = expenseLine;
    return this;
  }

   /**
   * Get expenseLine
   * @return expenseLine
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPENSE_LINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExpenseSheetLineDataLink getExpenseLine() {
    return expenseLine;
  }


  @JsonProperty(JSON_PROPERTY_EXPENSE_LINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpenseLine(ExpenseSheetLineDataLink expenseLine) {
    this.expenseLine = expenseLine;
  }


  public Guest entity(EntityDataLink entity) {
    this.entity = entity;
    return this;
  }

   /**
   * Get entity
   * @return entity
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityDataLink getEntity() {
    return entity;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntity(EntityDataLink entity) {
    this.entity = entity;
  }


  public Guest employee(EmployeeDataLink employee) {
    this.employee = employee;
    return this;
  }

   /**
   * Get employee
   * @return employee
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMPLOYEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EmployeeDataLink getEmployee() {
    return employee;
  }


  @JsonProperty(JSON_PROPERTY_EMPLOYEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmployee(EmployeeDataLink employee) {
    this.employee = employee;
  }


  public Guest total(Double total) {
    this.total = total;
    return this;
  }

   /**
   * The amount of the expense line for the guest
   * @return total
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getTotal() {
    return total;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotal(Double total) {
    this.total = total;
  }


  public Guest extraData(List<SpecificData> extraData) {
    this.extraData = extraData;
    return this;
  }

  public Guest addExtraDataItem(SpecificData extraDataItem) {
    if (this.extraData == null) {
      this.extraData = new ArrayList<>();
    }
    this.extraData.add(extraDataItem);
    return this;
  }

   /**
   * Extra data of the guest. For more information, see Extra data section
   * @return extraData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SpecificData> getExtraData() {
    return extraData;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtraData(List<SpecificData> extraData) {
    this.extraData = extraData;
  }


   /**
   * Define if the guest can be deleted
   * @return deletable
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELETABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDeletable() {
    return deletable;
  }




  /**
   * Return true if this guest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Guest guest = (Guest) o;
    return Objects.equals(this.id, guest.id) &&
        Objects.equals(this.type, guest.type) &&
        Objects.equals(this.name, guest.name) &&
        Objects.equals(this.function, guest.function) &&
        Objects.equals(this.company, guest.company) &&
        Objects.equals(this.expenseLine, guest.expenseLine) &&
        Objects.equals(this.entity, guest.entity) &&
        Objects.equals(this.employee, guest.employee) &&
        Objects.equals(this.total, guest.total) &&
        Objects.equals(this.extraData, guest.extraData) &&
        Objects.equals(this.deletable, guest.deletable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, name, function, company, expenseLine, entity, employee, total, extraData, deletable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Guest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    expenseLine: ").append(toIndentedString(expenseLine)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("    deletable: ").append(toIndentedString(deletable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

