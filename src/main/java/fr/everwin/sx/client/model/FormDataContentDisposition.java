/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.02.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;


/**
 * FormDataContentDisposition
 */
@JsonPropertyOrder({
  FormDataContentDisposition.JSON_PROPERTY_TYPE,
  FormDataContentDisposition.JSON_PROPERTY_PARAMETERS,
  FormDataContentDisposition.JSON_PROPERTY_FILE_NAME,
  FormDataContentDisposition.JSON_PROPERTY_CREATION_DATE,
  FormDataContentDisposition.JSON_PROPERTY_MODIFICATION_DATE,
  FormDataContentDisposition.JSON_PROPERTY_READ_DATE,
  FormDataContentDisposition.JSON_PROPERTY_SIZE,
  FormDataContentDisposition.JSON_PROPERTY_ENCODED,
  FormDataContentDisposition.JSON_PROPERTY_NAME
})
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-10-06T08:58:20.555636300+02:00[Europe/Paris]")
public class FormDataContentDisposition {
  public static final String JSON_PROPERTY_TYPE = "type";
  private FormDataContentDispositionType type;

  public static final String JSON_PROPERTY_PARAMETERS = "parameters";
  private Map<String, String> parameters = new HashMap<>();

  public static final String JSON_PROPERTY_FILE_NAME = "fileName";
  private String fileName;

  public static final String JSON_PROPERTY_CREATION_DATE = "creationDate";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime creationDate;

  public static final String JSON_PROPERTY_MODIFICATION_DATE = "modificationDate";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime modificationDate;

  public static final String JSON_PROPERTY_READ_DATE = "readDate";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime readDate;

  public static final String JSON_PROPERTY_SIZE = "size";
  private Long size;

  public static final String JSON_PROPERTY_ENCODED = "encoded";
  private Boolean encoded;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public FormDataContentDisposition() { 
  }

  public FormDataContentDisposition type(FormDataContentDispositionType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FormDataContentDispositionType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(FormDataContentDispositionType type) {
    this.type = type;
  }


  public FormDataContentDisposition parameters(Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public FormDataContentDisposition putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getParameters() {
    return parameters;
  }


  @JsonProperty(JSON_PROPERTY_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }


  public FormDataContentDisposition fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * Get fileName
   * @return fileName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileName() {
    return fileName;
  }


  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public FormDataContentDisposition creationDate(java.time.LocalDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getCreationDate() {
    return creationDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreationDate(java.time.LocalDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public FormDataContentDisposition modificationDate(java.time.LocalDateTime modificationDate) {
    this.modificationDate = modificationDate;
    return this;
  }

   /**
   * Get modificationDate
   * @return modificationDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODIFICATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getModificationDate() {
    return modificationDate;
  }


  @JsonProperty(JSON_PROPERTY_MODIFICATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModificationDate(java.time.LocalDateTime modificationDate) {
    this.modificationDate = modificationDate;
  }


  public FormDataContentDisposition readDate(java.time.LocalDateTime readDate) {
    this.readDate = readDate;
    return this;
  }

   /**
   * Get readDate
   * @return readDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_READ_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getReadDate() {
    return readDate;
  }


  @JsonProperty(JSON_PROPERTY_READ_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReadDate(java.time.LocalDateTime readDate) {
    this.readDate = readDate;
  }


  public FormDataContentDisposition size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(Long size) {
    this.size = size;
  }


  public FormDataContentDisposition encoded(Boolean encoded) {
    this.encoded = encoded;
    return this;
  }

   /**
   * Get encoded
   * @return encoded
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENCODED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEncoded() {
    return encoded;
  }


  @JsonProperty(JSON_PROPERTY_ENCODED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEncoded(Boolean encoded) {
    this.encoded = encoded;
  }


  public FormDataContentDisposition name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  /**
   * Return true if this FormDataContentDisposition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormDataContentDisposition formDataContentDisposition = (FormDataContentDisposition) o;
    return Objects.equals(this.type, formDataContentDisposition.type) &&
        Objects.equals(this.parameters, formDataContentDisposition.parameters) &&
        Objects.equals(this.fileName, formDataContentDisposition.fileName) &&
        Objects.equals(this.creationDate, formDataContentDisposition.creationDate) &&
        Objects.equals(this.modificationDate, formDataContentDisposition.modificationDate) &&
        Objects.equals(this.readDate, formDataContentDisposition.readDate) &&
        Objects.equals(this.size, formDataContentDisposition.size) &&
        Objects.equals(this.encoded, formDataContentDisposition.encoded) &&
        Objects.equals(this.name, formDataContentDisposition.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, parameters, fileName, creationDate, modificationDate, readDate, size, encoded, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormDataContentDisposition {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    modificationDate: ").append(toIndentedString(modificationDate)).append("\n");
    sb.append("    readDate: ").append(toIndentedString(readDate)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    encoded: ").append(toIndentedString(encoded)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

