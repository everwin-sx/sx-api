/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * JspConfigDescriptor
 */
@JsonPropertyOrder({
  JspConfigDescriptor.JSON_PROPERTY_TAGLIBS,
  JspConfigDescriptor.JSON_PROPERTY_JSP_PROPERTY_GROUPS
})
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-21T16:37:39.682984900+02:00[Europe/Paris]")
public class JspConfigDescriptor {
  public static final String JSON_PROPERTY_TAGLIBS = "taglibs";
  private List<TaglibDescriptor> taglibs;

  public static final String JSON_PROPERTY_JSP_PROPERTY_GROUPS = "jspPropertyGroups";
  private List<JspPropertyGroupDescriptor> jspPropertyGroups;

  public JspConfigDescriptor() { 
  }

  public JspConfigDescriptor taglibs(List<TaglibDescriptor> taglibs) {
    this.taglibs = taglibs;
    return this;
  }

  public JspConfigDescriptor addTaglibsItem(TaglibDescriptor taglibsItem) {
    if (this.taglibs == null) {
      this.taglibs = new ArrayList<>();
    }
    this.taglibs.add(taglibsItem);
    return this;
  }

   /**
   * Get taglibs
   * @return taglibs
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAGLIBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TaglibDescriptor> getTaglibs() {
    return taglibs;
  }


  @JsonProperty(JSON_PROPERTY_TAGLIBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaglibs(List<TaglibDescriptor> taglibs) {
    this.taglibs = taglibs;
  }


  public JspConfigDescriptor jspPropertyGroups(List<JspPropertyGroupDescriptor> jspPropertyGroups) {
    this.jspPropertyGroups = jspPropertyGroups;
    return this;
  }

  public JspConfigDescriptor addJspPropertyGroupsItem(JspPropertyGroupDescriptor jspPropertyGroupsItem) {
    if (this.jspPropertyGroups == null) {
      this.jspPropertyGroups = new ArrayList<>();
    }
    this.jspPropertyGroups.add(jspPropertyGroupsItem);
    return this;
  }

   /**
   * Get jspPropertyGroups
   * @return jspPropertyGroups
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_JSP_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<JspPropertyGroupDescriptor> getJspPropertyGroups() {
    return jspPropertyGroups;
  }


  @JsonProperty(JSON_PROPERTY_JSP_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJspPropertyGroups(List<JspPropertyGroupDescriptor> jspPropertyGroups) {
    this.jspPropertyGroups = jspPropertyGroups;
  }


  /**
   * Return true if this JspConfigDescriptor object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JspConfigDescriptor jspConfigDescriptor = (JspConfigDescriptor) o;
    return Objects.equals(this.taglibs, jspConfigDescriptor.taglibs) &&
        Objects.equals(this.jspPropertyGroups, jspConfigDescriptor.jspPropertyGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taglibs, jspPropertyGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JspConfigDescriptor {\n");
    sb.append("    taglibs: ").append(toIndentedString(taglibs)).append("\n");
    sb.append("    jspPropertyGroups: ").append(toIndentedString(jspPropertyGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

