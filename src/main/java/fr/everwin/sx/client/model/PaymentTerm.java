/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.02.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;


/**
 * PaymentTerm
 */
@JsonPropertyOrder({
  PaymentTerm.JSON_PROPERTY_ID,
  PaymentTerm.JSON_PROPERTY_SETTLEMENT_TYPE,
  PaymentTerm.JSON_PROPERTY_LABEL,
  PaymentTerm.JSON_PROPERTY_CODE,
  PaymentTerm.JSON_PROPERTY_EXTRA_DAYS,
  PaymentTerm.JSON_PROPERTY_EXTRA_MONTHS,
  PaymentTerm.JSON_PROPERTY_END_OF_MONTH,
  PaymentTerm.JSON_PROPERTY_CARRY_FORWARD_DATE,
  PaymentTerm.JSON_PROPERTY_ENTITIES,
  PaymentTerm.JSON_PROPERTY_VISIBILITY,
  PaymentTerm.JSON_PROPERTY_METHOD_SENT_TO_CHORUS,
  PaymentTerm.JSON_PROPERTY_DEBIT_MODE,
  PaymentTerm.JSON_PROPERTY_DEBIT_DATE,
  PaymentTerm.JSON_PROPERTY_FREQUENCY,
  PaymentTerm.JSON_PROPERTY_DUE_NUMBER,
  PaymentTerm.JSON_PROPERTY_DAY_OF_THE_MONTH,
  PaymentTerm.JSON_PROPERTY_EXTRA_DATA
})
@JsonTypeName("paymentTerm")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-10-06T08:58:20.555636300+02:00[Europe/Paris]")
public class PaymentTerm {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_SETTLEMENT_TYPE = "settlementType";
  private SettlementTypeDataLink settlementType;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_EXTRA_DAYS = "extraDays";
  private Integer extraDays;

  public static final String JSON_PROPERTY_EXTRA_MONTHS = "extraMonths";
  private Integer extraMonths;

  /**
   * Indicates if payment term is on the end of the month. 0 : No, 1 : yes
   */
  public enum EndOfMonthEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    EndOfMonthEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EndOfMonthEnum fromValue(Integer value) {
      for (EndOfMonthEnum b : EndOfMonthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_END_OF_MONTH = "endOfMonth";
  private EndOfMonthEnum endOfMonth;

  public static final String JSON_PROPERTY_CARRY_FORWARD_DATE = "carryForwardDate";
  private Integer carryForwardDate;

  public static final String JSON_PROPERTY_ENTITIES = "entities";
  private List<EntityDataLink> entities;

  /**
   * Indicates the visibility of the payment term. 0 : Active, 10 : Unavailable
   */
  public enum VisibilityEnum {
    NUMBER_0(0),
    
    NUMBER_10(10);

    private Integer value;

    VisibilityEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VisibilityEnum fromValue(Integer value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VISIBILITY = "visibility";
  private VisibilityEnum visibility;

  /**
   * Indicates the method sent to Chorus of the payment term. 1 : Other, 10 : Cash, 20 : Cheque, 30 : Credit transfer, 31 : Debit transfer, 42 : Payment to bank, 48 : Bank card, 49 : Direct debit, 49 : Direct debit, 97 : Carry forward
   */
  public enum MethodSentToChorusEnum {
    NUMBER_1(1),
    
    NUMBER_10(10),
    
    NUMBER_20(20),
    
    NUMBER_30(30),
    
    NUMBER_31(31),
    
    NUMBER_42(42),
    
    NUMBER_48(48),
    
    NUMBER_49(49),
    
    NUMBER_97(97);

    private Integer value;

    MethodSentToChorusEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MethodSentToChorusEnum fromValue(Integer value) {
      for (MethodSentToChorusEnum b : MethodSentToChorusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_METHOD_SENT_TO_CHORUS = "methodSentToChorus";
  private MethodSentToChorusEnum methodSentToChorus = MethodSentToChorusEnum.NUMBER_1;

  /**
   * Indicates the debit mode of the payment term. 0 : Unique, 1 : Multiple
   */
  public enum DebitModeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    DebitModeEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DebitModeEnum fromValue(Integer value) {
      for (DebitModeEnum b : DebitModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DEBIT_MODE = "debitMode";
  private DebitModeEnum debitMode;

  /**
   * Indicates the debit date of the payment term. 0 : At the due date, 1 : One day after the due date, 2 : One week after the due date, 3 : Two weeks after the due date, 4 : One month after the due date
   */
  public enum DebitDateEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4);

    private Integer value;

    DebitDateEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DebitDateEnum fromValue(Integer value) {
      for (DebitDateEnum b : DebitDateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DEBIT_DATE = "debitDate";
  private DebitDateEnum debitDate;

  /**
   * Indicates the frequency of the payment term. 0 : Monthly, 1 : Bimonthly, 2 : Quarterly, 3 : Half-yearly, 4 : Annual
   */
  public enum FrequencyEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4);

    private Integer value;

    FrequencyEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FrequencyEnum fromValue(Integer value) {
      for (FrequencyEnum b : FrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_FREQUENCY = "frequency";
  private JsonNullable<FrequencyEnum> frequency = JsonNullable.<FrequencyEnum>undefined();

  public static final String JSON_PROPERTY_DUE_NUMBER = "dueNumber";
  private Integer dueNumber;

  public static final String JSON_PROPERTY_DAY_OF_THE_MONTH = "dayOfTheMonth";
  private Integer dayOfTheMonth;

  public static final String JSON_PROPERTY_EXTRA_DATA = "extraData";
  private List<SpecificData> extraData;

  public PaymentTerm() { 
  }

  public PaymentTerm id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * id of the object
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public PaymentTerm settlementType(SettlementTypeDataLink settlementType) {
    this.settlementType = settlementType;
    return this;
  }

   /**
   * Get settlementType
   * @return settlementType
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SETTLEMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SettlementTypeDataLink getSettlementType() {
    return settlementType;
  }


  @JsonProperty(JSON_PROPERTY_SETTLEMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSettlementType(SettlementTypeDataLink settlementType) {
    this.settlementType = settlementType;
  }


  public PaymentTerm label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Label of the payment term
   * @return label
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabel(String label) {
    this.label = label;
  }


  public PaymentTerm code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Code of the payment term
   * @return code
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCode(String code) {
    this.code = code;
  }


  public PaymentTerm extraDays(Integer extraDays) {
    this.extraDays = extraDays;
    return this;
  }

   /**
   * Extra days of the payment term
   * @return extraDays
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTRA_DAYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getExtraDays() {
    return extraDays;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_DAYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtraDays(Integer extraDays) {
    this.extraDays = extraDays;
  }


  public PaymentTerm extraMonths(Integer extraMonths) {
    this.extraMonths = extraMonths;
    return this;
  }

   /**
   * Extra months of the payment term
   * @return extraMonths
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTRA_MONTHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getExtraMonths() {
    return extraMonths;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_MONTHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtraMonths(Integer extraMonths) {
    this.extraMonths = extraMonths;
  }


  public PaymentTerm endOfMonth(EndOfMonthEnum endOfMonth) {
    this.endOfMonth = endOfMonth;
    return this;
  }

   /**
   * Indicates if payment term is on the end of the month. 0 : No, 1 : yes
   * @return endOfMonth
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_OF_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EndOfMonthEnum getEndOfMonth() {
    return endOfMonth;
  }


  @JsonProperty(JSON_PROPERTY_END_OF_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndOfMonth(EndOfMonthEnum endOfMonth) {
    this.endOfMonth = endOfMonth;
  }


  public PaymentTerm carryForwardDate(Integer carryForwardDate) {
    this.carryForwardDate = carryForwardDate;
    return this;
  }

   /**
   * Carry forward date of the payment term
   * @return carryForwardDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CARRY_FORWARD_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCarryForwardDate() {
    return carryForwardDate;
  }


  @JsonProperty(JSON_PROPERTY_CARRY_FORWARD_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCarryForwardDate(Integer carryForwardDate) {
    this.carryForwardDate = carryForwardDate;
  }


  public PaymentTerm entities(List<EntityDataLink> entities) {
    this.entities = entities;
    return this;
  }

  public PaymentTerm addEntitiesItem(EntityDataLink entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

   /**
   * Multiple link to entities that own this payment term. For more informations see the /entities resource
   * @return entities
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<EntityDataLink> getEntities() {
    return entities;
  }


  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntities(List<EntityDataLink> entities) {
    this.entities = entities;
  }


  public PaymentTerm visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

   /**
   * Indicates the visibility of the payment term. 0 : Active, 10 : Unavailable
   * @return visibility
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VisibilityEnum getVisibility() {
    return visibility;
  }


  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }


  public PaymentTerm methodSentToChorus(MethodSentToChorusEnum methodSentToChorus) {
    this.methodSentToChorus = methodSentToChorus;
    return this;
  }

   /**
   * Indicates the method sent to Chorus of the payment term. 1 : Other, 10 : Cash, 20 : Cheque, 30 : Credit transfer, 31 : Debit transfer, 42 : Payment to bank, 48 : Bank card, 49 : Direct debit, 49 : Direct debit, 97 : Carry forward
   * @return methodSentToChorus
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METHOD_SENT_TO_CHORUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MethodSentToChorusEnum getMethodSentToChorus() {
    return methodSentToChorus;
  }


  @JsonProperty(JSON_PROPERTY_METHOD_SENT_TO_CHORUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMethodSentToChorus(MethodSentToChorusEnum methodSentToChorus) {
    this.methodSentToChorus = methodSentToChorus;
  }


  public PaymentTerm debitMode(DebitModeEnum debitMode) {
    this.debitMode = debitMode;
    return this;
  }

   /**
   * Indicates the debit mode of the payment term. 0 : Unique, 1 : Multiple
   * @return debitMode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEBIT_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DebitModeEnum getDebitMode() {
    return debitMode;
  }


  @JsonProperty(JSON_PROPERTY_DEBIT_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDebitMode(DebitModeEnum debitMode) {
    this.debitMode = debitMode;
  }


  public PaymentTerm debitDate(DebitDateEnum debitDate) {
    this.debitDate = debitDate;
    return this;
  }

   /**
   * Indicates the debit date of the payment term. 0 : At the due date, 1 : One day after the due date, 2 : One week after the due date, 3 : Two weeks after the due date, 4 : One month after the due date
   * @return debitDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEBIT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DebitDateEnum getDebitDate() {
    return debitDate;
  }


  @JsonProperty(JSON_PROPERTY_DEBIT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDebitDate(DebitDateEnum debitDate) {
    this.debitDate = debitDate;
  }


  public PaymentTerm frequency(FrequencyEnum frequency) {
    this.frequency = JsonNullable.<FrequencyEnum>of(frequency);
    return this;
  }

   /**
   * Indicates the frequency of the payment term. 0 : Monthly, 1 : Bimonthly, 2 : Quarterly, 3 : Half-yearly, 4 : Annual
   * @return frequency
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public FrequencyEnum getFrequency() {
        return frequency.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<FrequencyEnum> getFrequency_JsonNullable() {
    return frequency;
  }
  
  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  public void setFrequency_JsonNullable(JsonNullable<FrequencyEnum> frequency) {
    this.frequency = frequency;
  }

  public void setFrequency(FrequencyEnum frequency) {
    this.frequency = JsonNullable.<FrequencyEnum>of(frequency);
  }


  public PaymentTerm dueNumber(Integer dueNumber) {
    this.dueNumber = dueNumber;
    return this;
  }

   /**
   * Due number of the payment term
   * @return dueNumber
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DUE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDueNumber() {
    return dueNumber;
  }


  @JsonProperty(JSON_PROPERTY_DUE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDueNumber(Integer dueNumber) {
    this.dueNumber = dueNumber;
  }


  public PaymentTerm dayOfTheMonth(Integer dayOfTheMonth) {
    this.dayOfTheMonth = dayOfTheMonth;
    return this;
  }

   /**
   * Indicates the day of the month of the payment term.
   * @return dayOfTheMonth
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DAY_OF_THE_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDayOfTheMonth() {
    return dayOfTheMonth;
  }


  @JsonProperty(JSON_PROPERTY_DAY_OF_THE_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDayOfTheMonth(Integer dayOfTheMonth) {
    this.dayOfTheMonth = dayOfTheMonth;
  }


  public PaymentTerm extraData(List<SpecificData> extraData) {
    this.extraData = extraData;
    return this;
  }

  public PaymentTerm addExtraDataItem(SpecificData extraDataItem) {
    if (this.extraData == null) {
      this.extraData = new ArrayList<>();
    }
    this.extraData.add(extraDataItem);
    return this;
  }

   /**
   * Extra data of the lead event. For more information, see Extra data section
   * @return extraData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SpecificData> getExtraData() {
    return extraData;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtraData(List<SpecificData> extraData) {
    this.extraData = extraData;
  }


  /**
   * Return true if this paymentTerm object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentTerm paymentTerm = (PaymentTerm) o;
    return Objects.equals(this.id, paymentTerm.id) &&
        Objects.equals(this.settlementType, paymentTerm.settlementType) &&
        Objects.equals(this.label, paymentTerm.label) &&
        Objects.equals(this.code, paymentTerm.code) &&
        Objects.equals(this.extraDays, paymentTerm.extraDays) &&
        Objects.equals(this.extraMonths, paymentTerm.extraMonths) &&
        Objects.equals(this.endOfMonth, paymentTerm.endOfMonth) &&
        Objects.equals(this.carryForwardDate, paymentTerm.carryForwardDate) &&
        Objects.equals(this.entities, paymentTerm.entities) &&
        Objects.equals(this.visibility, paymentTerm.visibility) &&
        Objects.equals(this.methodSentToChorus, paymentTerm.methodSentToChorus) &&
        Objects.equals(this.debitMode, paymentTerm.debitMode) &&
        Objects.equals(this.debitDate, paymentTerm.debitDate) &&
        equalsNullable(this.frequency, paymentTerm.frequency) &&
        Objects.equals(this.dueNumber, paymentTerm.dueNumber) &&
        Objects.equals(this.dayOfTheMonth, paymentTerm.dayOfTheMonth) &&
        Objects.equals(this.extraData, paymentTerm.extraData);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, settlementType, label, code, extraDays, extraMonths, endOfMonth, carryForwardDate, entities, visibility, methodSentToChorus, debitMode, debitDate, hashCodeNullable(frequency), dueNumber, dayOfTheMonth, extraData);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentTerm {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    settlementType: ").append(toIndentedString(settlementType)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    extraDays: ").append(toIndentedString(extraDays)).append("\n");
    sb.append("    extraMonths: ").append(toIndentedString(extraMonths)).append("\n");
    sb.append("    endOfMonth: ").append(toIndentedString(endOfMonth)).append("\n");
    sb.append("    carryForwardDate: ").append(toIndentedString(carryForwardDate)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    methodSentToChorus: ").append(toIndentedString(methodSentToChorus)).append("\n");
    sb.append("    debitMode: ").append(toIndentedString(debitMode)).append("\n");
    sb.append("    debitDate: ").append(toIndentedString(debitDate)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    dueNumber: ").append(toIndentedString(dueNumber)).append("\n");
    sb.append("    dayOfTheMonth: ").append(toIndentedString(dayOfTheMonth)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

