/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import fr.everwin.sx.client.model.Access;
import fr.everwin.sx.client.model.CounterDataLink;
import fr.everwin.sx.client.model.DurationDetail;
import fr.everwin.sx.client.model.EmployeeDataLink;
import fr.everwin.sx.client.model.EntityDataLink;
import fr.everwin.sx.client.model.SpecificData;
import fr.everwin.sx.client.model.TypeDataLink;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import fr.everwin.sx.client.JSON;


/**
 * LeaveRequest
 */
@JsonPropertyOrder({
  LeaveRequest.JSON_PROPERTY_ID,
  LeaveRequest.JSON_PROPERTY_VALIDATION_STEP,
  LeaveRequest.JSON_PROPERTY_CODE,
  LeaveRequest.JSON_PROPERTY_EMPLOYEE,
  LeaveRequest.JSON_PROPERTY_ENTITY,
  LeaveRequest.JSON_PROPERTY_TYPE,
  LeaveRequest.JSON_PROPERTY_START_DATE,
  LeaveRequest.JSON_PROPERTY_START_HALF_DAY_INDICATOR,
  LeaveRequest.JSON_PROPERTY_END_DATE,
  LeaveRequest.JSON_PROPERTY_END_HALF_DAY_INDICATOR,
  LeaveRequest.JSON_PROPERTY_DURATION,
  LeaveRequest.JSON_PROPERTY_PROOF_DOCUMENT_MANDATORY,
  LeaveRequest.JSON_PROPERTY_HAS_PROOF_DOCUMENT,
  LeaveRequest.JSON_PROPERTY_EMPLOYEE_TIME_COUNTER,
  LeaveRequest.JSON_PROPERTY_ESTIMATED_BALANCE_AT_DATE,
  LeaveRequest.JSON_PROPERTY_ACCESS,
  LeaveRequest.JSON_PROPERTY_DURATION_DETAILS,
  LeaveRequest.JSON_PROPERTY_STATUS,
  LeaveRequest.JSON_PROPERTY_HAS_VALIDATION_HISTORY,
  LeaveRequest.JSON_PROPERTY_EXTRA_DATA
})
@JsonTypeName("leaveRequest")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-22T08:24:46.022483900+02:00[Europe/Paris]")
public class LeaveRequest {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_VALIDATION_STEP = "validationStep";
  private String validationStep;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_EMPLOYEE = "employee";
  private EmployeeDataLink employee;

  public static final String JSON_PROPERTY_ENTITY = "entity";
  private EntityDataLink entity;

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeDataLink type;

  public static final String JSON_PROPERTY_START_DATE = "startDate";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime startDate;

  /**
   * Start half day indicator of the leave request. 1 : Morning, 2 : Noon, 4 : Morning middle, 5 : afternoon middle
   */
  public enum StartHalfDayIndicatorEnum {
    _1("1"),
    
    _2("2"),
    
    _4("4"),
    
    _5("5");

    private String value;

    StartHalfDayIndicatorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StartHalfDayIndicatorEnum fromValue(String value) {
      for (StartHalfDayIndicatorEnum b : StartHalfDayIndicatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_START_HALF_DAY_INDICATOR = "startHalfDayIndicator";
  private StartHalfDayIndicatorEnum startHalfDayIndicator;

  public static final String JSON_PROPERTY_END_DATE = "endDate";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime endDate;

  /**
   * End half day indicator of the leave request. 2 : Noon, 3 : End of day, 4 : Morning middle, 5 : afternoon middle
   */
  public enum EndHalfDayIndicatorEnum {
    _2("2"),
    
    _3("3"),
    
    _4("4"),
    
    _5("5");

    private String value;

    EndHalfDayIndicatorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EndHalfDayIndicatorEnum fromValue(String value) {
      for (EndHalfDayIndicatorEnum b : EndHalfDayIndicatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_END_HALF_DAY_INDICATOR = "endHalfDayIndicator";
  private EndHalfDayIndicatorEnum endHalfDayIndicator;

  public static final String JSON_PROPERTY_DURATION = "duration";
  private Double duration;

  public static final String JSON_PROPERTY_PROOF_DOCUMENT_MANDATORY = "proofDocumentMandatory";
  private Boolean proofDocumentMandatory;

  public static final String JSON_PROPERTY_HAS_PROOF_DOCUMENT = "hasProofDocument";
  private Boolean hasProofDocument;

  public static final String JSON_PROPERTY_EMPLOYEE_TIME_COUNTER = "employeeTimeCounter";
  private CounterDataLink employeeTimeCounter;

  public static final String JSON_PROPERTY_ESTIMATED_BALANCE_AT_DATE = "estimatedBalanceAtDate";
  private Double estimatedBalanceAtDate;

  public static final String JSON_PROPERTY_ACCESS = "access";
  private Access access;

  public static final String JSON_PROPERTY_DURATION_DETAILS = "durationDetails";
  private List<DurationDetail> durationDetails;

  public static final String JSON_PROPERTY_STATUS = "status";
  private Integer status;

  public static final String JSON_PROPERTY_HAS_VALIDATION_HISTORY = "hasValidationHistory";
  private Boolean hasValidationHistory;

  public static final String JSON_PROPERTY_EXTRA_DATA = "extraData";
  private List<SpecificData> extraData;

  public LeaveRequest() { 
  }

  @JsonCreator
  public LeaveRequest(
    @JsonProperty(JSON_PROPERTY_DURATION) Double duration, 
    @JsonProperty(JSON_PROPERTY_PROOF_DOCUMENT_MANDATORY) Boolean proofDocumentMandatory, 
    @JsonProperty(JSON_PROPERTY_HAS_PROOF_DOCUMENT) Boolean hasProofDocument, 
    @JsonProperty(JSON_PROPERTY_ESTIMATED_BALANCE_AT_DATE) Double estimatedBalanceAtDate, 
    @JsonProperty(JSON_PROPERTY_HAS_VALIDATION_HISTORY) Boolean hasValidationHistory
  ) {
    this();
    this.duration = duration;
    this.proofDocumentMandatory = proofDocumentMandatory;
    this.hasProofDocument = hasProofDocument;
    this.estimatedBalanceAtDate = estimatedBalanceAtDate;
    this.hasValidationHistory = hasValidationHistory;
  }

  public LeaveRequest id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * id of the object
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public LeaveRequest validationStep(String validationStep) {
    this.validationStep = validationStep;
    return this;
  }

   /**
   * Validation step of the leave request
   * @return validationStep
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALIDATION_STEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getValidationStep() {
    return validationStep;
  }


  @JsonProperty(JSON_PROPERTY_VALIDATION_STEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValidationStep(String validationStep) {
    this.validationStep = validationStep;
  }


  public LeaveRequest code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Unique leave request code assigned to this leave request
   * @return code
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCode(String code) {
    this.code = code;
  }


  public LeaveRequest employee(EmployeeDataLink employee) {
    this.employee = employee;
    return this;
  }

   /**
   * Get employee
   * @return employee
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EMPLOYEE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EmployeeDataLink getEmployee() {
    return employee;
  }


  @JsonProperty(JSON_PROPERTY_EMPLOYEE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmployee(EmployeeDataLink employee) {
    this.employee = employee;
  }


  public LeaveRequest entity(EntityDataLink entity) {
    this.entity = entity;
    return this;
  }

   /**
   * Get entity
   * @return entity
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityDataLink getEntity() {
    return entity;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntity(EntityDataLink entity) {
    this.entity = entity;
  }


  public LeaveRequest type(TypeDataLink type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeDataLink getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeDataLink type) {
    this.type = type;
  }


  public LeaveRequest startDate(java.time.LocalDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Mandatory start date of the leave request
   * @return startDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getStartDate() {
    return startDate;
  }


  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartDate(java.time.LocalDateTime startDate) {
    this.startDate = startDate;
  }


  public LeaveRequest startHalfDayIndicator(StartHalfDayIndicatorEnum startHalfDayIndicator) {
    this.startHalfDayIndicator = startHalfDayIndicator;
    return this;
  }

   /**
   * Start half day indicator of the leave request. 1 : Morning, 2 : Noon, 4 : Morning middle, 5 : afternoon middle
   * @return startHalfDayIndicator
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_HALF_DAY_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StartHalfDayIndicatorEnum getStartHalfDayIndicator() {
    return startHalfDayIndicator;
  }


  @JsonProperty(JSON_PROPERTY_START_HALF_DAY_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartHalfDayIndicator(StartHalfDayIndicatorEnum startHalfDayIndicator) {
    this.startHalfDayIndicator = startHalfDayIndicator;
  }


  public LeaveRequest endDate(java.time.LocalDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Mandatory end date of the leave request
   * @return endDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getEndDate() {
    return endDate;
  }


  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndDate(java.time.LocalDateTime endDate) {
    this.endDate = endDate;
  }


  public LeaveRequest endHalfDayIndicator(EndHalfDayIndicatorEnum endHalfDayIndicator) {
    this.endHalfDayIndicator = endHalfDayIndicator;
    return this;
  }

   /**
   * End half day indicator of the leave request. 2 : Noon, 3 : End of day, 4 : Morning middle, 5 : afternoon middle
   * @return endHalfDayIndicator
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_HALF_DAY_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EndHalfDayIndicatorEnum getEndHalfDayIndicator() {
    return endHalfDayIndicator;
  }


  @JsonProperty(JSON_PROPERTY_END_HALF_DAY_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndHalfDayIndicator(EndHalfDayIndicatorEnum endHalfDayIndicator) {
    this.endHalfDayIndicator = endHalfDayIndicator;
  }


   /**
   * Duration in days acording employee work mode of the leave request
   * @return duration
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getDuration() {
    return duration;
  }




   /**
   * True if a proof document is mandatory for the leave request
   * @return proofDocumentMandatory
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROOF_DOCUMENT_MANDATORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getProofDocumentMandatory() {
    return proofDocumentMandatory;
  }




   /**
   * True if a proof document is linked to the leave request
   * @return hasProofDocument
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAS_PROOF_DOCUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasProofDocument() {
    return hasProofDocument;
  }




  public LeaveRequest employeeTimeCounter(CounterDataLink employeeTimeCounter) {
    this.employeeTimeCounter = employeeTimeCounter;
    return this;
  }

   /**
   * Get employeeTimeCounter
   * @return employeeTimeCounter
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMPLOYEE_TIME_COUNTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CounterDataLink getEmployeeTimeCounter() {
    return employeeTimeCounter;
  }


  @JsonProperty(JSON_PROPERTY_EMPLOYEE_TIME_COUNTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmployeeTimeCounter(CounterDataLink employeeTimeCounter) {
    this.employeeTimeCounter = employeeTimeCounter;
  }


   /**
   * Estimated balance in days at the leave request date it is associated  to a time counter
   * @return estimatedBalanceAtDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ESTIMATED_BALANCE_AT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getEstimatedBalanceAtDate() {
    return estimatedBalanceAtDate;
  }




  public LeaveRequest access(Access access) {
    this.access = access;
    return this;
  }

   /**
   * Get access
   * @return access
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Access getAccess() {
    return access;
  }


  @JsonProperty(JSON_PROPERTY_ACCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccess(Access access) {
    this.access = access;
  }


  public LeaveRequest durationDetails(List<DurationDetail> durationDetails) {
    this.durationDetails = durationDetails;
    return this;
  }

  public LeaveRequest addDurationDetailsItem(DurationDetail durationDetailsItem) {
    if (this.durationDetails == null) {
      this.durationDetails = new ArrayList<>();
    }
    this.durationDetails.add(durationDetailsItem);
    return this;
  }

   /**
   * Leave duration for each day
   * @return durationDetails
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DURATION_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DurationDetail> getDurationDetails() {
    return durationDetails;
  }


  @JsonProperty(JSON_PROPERTY_DURATION_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDurationDetails(List<DurationDetail> durationDetails) {
    this.durationDetails = durationDetails;
  }


  public LeaveRequest status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * Status
   * @return status
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(Integer status) {
    this.status = status;
  }


   /**
   * True is timesheet has validation history data
   * @return hasValidationHistory
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAS_VALIDATION_HISTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasValidationHistory() {
    return hasValidationHistory;
  }




  public LeaveRequest extraData(List<SpecificData> extraData) {
    this.extraData = extraData;
    return this;
  }

  public LeaveRequest addExtraDataItem(SpecificData extraDataItem) {
    if (this.extraData == null) {
      this.extraData = new ArrayList<>();
    }
    this.extraData.add(extraDataItem);
    return this;
  }

   /**
   * Extra data of the company. For more information, see Extra data section
   * @return extraData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SpecificData> getExtraData() {
    return extraData;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtraData(List<SpecificData> extraData) {
    this.extraData = extraData;
  }


  /**
   * Return true if this leaveRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaveRequest leaveRequest = (LeaveRequest) o;
    return Objects.equals(this.id, leaveRequest.id) &&
        Objects.equals(this.validationStep, leaveRequest.validationStep) &&
        Objects.equals(this.code, leaveRequest.code) &&
        Objects.equals(this.employee, leaveRequest.employee) &&
        Objects.equals(this.entity, leaveRequest.entity) &&
        Objects.equals(this.type, leaveRequest.type) &&
        Objects.equals(this.startDate, leaveRequest.startDate) &&
        Objects.equals(this.startHalfDayIndicator, leaveRequest.startHalfDayIndicator) &&
        Objects.equals(this.endDate, leaveRequest.endDate) &&
        Objects.equals(this.endHalfDayIndicator, leaveRequest.endHalfDayIndicator) &&
        Objects.equals(this.duration, leaveRequest.duration) &&
        Objects.equals(this.proofDocumentMandatory, leaveRequest.proofDocumentMandatory) &&
        Objects.equals(this.hasProofDocument, leaveRequest.hasProofDocument) &&
        Objects.equals(this.employeeTimeCounter, leaveRequest.employeeTimeCounter) &&
        Objects.equals(this.estimatedBalanceAtDate, leaveRequest.estimatedBalanceAtDate) &&
        Objects.equals(this.access, leaveRequest.access) &&
        Objects.equals(this.durationDetails, leaveRequest.durationDetails) &&
        Objects.equals(this.status, leaveRequest.status) &&
        Objects.equals(this.hasValidationHistory, leaveRequest.hasValidationHistory) &&
        Objects.equals(this.extraData, leaveRequest.extraData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, validationStep, code, employee, entity, type, startDate, startHalfDayIndicator, endDate, endHalfDayIndicator, duration, proofDocumentMandatory, hasProofDocument, employeeTimeCounter, estimatedBalanceAtDate, access, durationDetails, status, hasValidationHistory, extraData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaveRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    validationStep: ").append(toIndentedString(validationStep)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    startHalfDayIndicator: ").append(toIndentedString(startHalfDayIndicator)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    endHalfDayIndicator: ").append(toIndentedString(endHalfDayIndicator)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    proofDocumentMandatory: ").append(toIndentedString(proofDocumentMandatory)).append("\n");
    sb.append("    hasProofDocument: ").append(toIndentedString(hasProofDocument)).append("\n");
    sb.append("    employeeTimeCounter: ").append(toIndentedString(employeeTimeCounter)).append("\n");
    sb.append("    estimatedBalanceAtDate: ").append(toIndentedString(estimatedBalanceAtDate)).append("\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    durationDetails: ").append(toIndentedString(durationDetails)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    hasValidationHistory: ").append(toIndentedString(hasValidationHistory)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

