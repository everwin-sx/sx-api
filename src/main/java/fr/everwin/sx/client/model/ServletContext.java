/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import fr.everwin.sx.client.model.FilterRegistration;
import fr.everwin.sx.client.model.JspConfigDescriptor;
import fr.everwin.sx.client.model.ServletContextClassLoader;
import fr.everwin.sx.client.model.ServletRegistration;
import fr.everwin.sx.client.model.SessionCookieConfig;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import fr.everwin.sx.client.JSON;


/**
 * ServletContext
 */
@JsonPropertyOrder({
  ServletContext.JSON_PROPERTY_CLASS_LOADER,
  ServletContext.JSON_PROPERTY_MAJOR_VERSION,
  ServletContext.JSON_PROPERTY_MINOR_VERSION,
  ServletContext.JSON_PROPERTY_SERVER_INFO,
  ServletContext.JSON_PROPERTY_CONTEXT_PATH,
  ServletContext.JSON_PROPERTY_EFFECTIVE_MINOR_VERSION,
  ServletContext.JSON_PROPERTY_SERVLET_CONTEXT_NAME,
  ServletContext.JSON_PROPERTY_EFFECTIVE_MAJOR_VERSION,
  ServletContext.JSON_PROPERTY_INIT_PARAMETER_NAMES,
  ServletContext.JSON_PROPERTY_SERVLET_REGISTRATIONS,
  ServletContext.JSON_PROPERTY_SESSION_COOKIE_CONFIG,
  ServletContext.JSON_PROPERTY_FILTER_REGISTRATIONS,
  ServletContext.JSON_PROPERTY_VIRTUAL_SERVER_NAME,
  ServletContext.JSON_PROPERTY_SESSION_TRACKING_MODES,
  ServletContext.JSON_PROPERTY_JSP_CONFIG_DESCRIPTOR,
  ServletContext.JSON_PROPERTY_SESSION_TIMEOUT,
  ServletContext.JSON_PROPERTY_EFFECTIVE_SESSION_TRACKING_MODES,
  ServletContext.JSON_PROPERTY_RESPONSE_CHARACTER_ENCODING,
  ServletContext.JSON_PROPERTY_REQUEST_CHARACTER_ENCODING,
  ServletContext.JSON_PROPERTY_DEFAULT_SESSION_TRACKING_MODES,
  ServletContext.JSON_PROPERTY_ATTRIBUTE_NAMES
})
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-21T16:37:39.682984900+02:00[Europe/Paris]")
public class ServletContext {
  public static final String JSON_PROPERTY_CLASS_LOADER = "classLoader";
  private ServletContextClassLoader classLoader;

  public static final String JSON_PROPERTY_MAJOR_VERSION = "majorVersion";
  private Integer majorVersion;

  public static final String JSON_PROPERTY_MINOR_VERSION = "minorVersion";
  private Integer minorVersion;

  public static final String JSON_PROPERTY_SERVER_INFO = "serverInfo";
  private String serverInfo;

  public static final String JSON_PROPERTY_CONTEXT_PATH = "contextPath";
  private String contextPath;

  public static final String JSON_PROPERTY_EFFECTIVE_MINOR_VERSION = "effectiveMinorVersion";
  private Integer effectiveMinorVersion;

  public static final String JSON_PROPERTY_SERVLET_CONTEXT_NAME = "servletContextName";
  private String servletContextName;

  public static final String JSON_PROPERTY_EFFECTIVE_MAJOR_VERSION = "effectiveMajorVersion";
  private Integer effectiveMajorVersion;

  public static final String JSON_PROPERTY_INIT_PARAMETER_NAMES = "initParameterNames";
  private Object initParameterNames;

  public static final String JSON_PROPERTY_SERVLET_REGISTRATIONS = "servletRegistrations";
  private Map<String, ServletRegistration> servletRegistrations = new HashMap<>();

  public static final String JSON_PROPERTY_SESSION_COOKIE_CONFIG = "sessionCookieConfig";
  private SessionCookieConfig sessionCookieConfig;

  public static final String JSON_PROPERTY_FILTER_REGISTRATIONS = "filterRegistrations";
  private Map<String, FilterRegistration> filterRegistrations = new HashMap<>();

  public static final String JSON_PROPERTY_VIRTUAL_SERVER_NAME = "virtualServerName";
  private String virtualServerName;

  /**
   * Gets or Sets sessionTrackingModes
   */
  public enum SessionTrackingModesEnum {
    COOKIE("COOKIE"),
    
    URL("URL"),
    
    SSL("SSL");

    private String value;

    SessionTrackingModesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SessionTrackingModesEnum fromValue(String value) {
      for (SessionTrackingModesEnum b : SessionTrackingModesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SESSION_TRACKING_MODES = "sessionTrackingModes";
  private Set<SessionTrackingModesEnum> sessionTrackingModes;

  public static final String JSON_PROPERTY_JSP_CONFIG_DESCRIPTOR = "jspConfigDescriptor";
  private JspConfigDescriptor jspConfigDescriptor;

  public static final String JSON_PROPERTY_SESSION_TIMEOUT = "sessionTimeout";
  private Integer sessionTimeout;

  /**
   * Gets or Sets effectiveSessionTrackingModes
   */
  public enum EffectiveSessionTrackingModesEnum {
    COOKIE("COOKIE"),
    
    URL("URL"),
    
    SSL("SSL");

    private String value;

    EffectiveSessionTrackingModesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EffectiveSessionTrackingModesEnum fromValue(String value) {
      for (EffectiveSessionTrackingModesEnum b : EffectiveSessionTrackingModesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EFFECTIVE_SESSION_TRACKING_MODES = "effectiveSessionTrackingModes";
  private Set<EffectiveSessionTrackingModesEnum> effectiveSessionTrackingModes;

  public static final String JSON_PROPERTY_RESPONSE_CHARACTER_ENCODING = "responseCharacterEncoding";
  private String responseCharacterEncoding;

  public static final String JSON_PROPERTY_REQUEST_CHARACTER_ENCODING = "requestCharacterEncoding";
  private String requestCharacterEncoding;

  /**
   * Gets or Sets defaultSessionTrackingModes
   */
  public enum DefaultSessionTrackingModesEnum {
    COOKIE("COOKIE"),
    
    URL("URL"),
    
    SSL("SSL");

    private String value;

    DefaultSessionTrackingModesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DefaultSessionTrackingModesEnum fromValue(String value) {
      for (DefaultSessionTrackingModesEnum b : DefaultSessionTrackingModesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DEFAULT_SESSION_TRACKING_MODES = "defaultSessionTrackingModes";
  private Set<DefaultSessionTrackingModesEnum> defaultSessionTrackingModes;

  public static final String JSON_PROPERTY_ATTRIBUTE_NAMES = "attributeNames";
  private Object attributeNames;

  public ServletContext() { 
  }

  public ServletContext classLoader(ServletContextClassLoader classLoader) {
    this.classLoader = classLoader;
    return this;
  }

   /**
   * Get classLoader
   * @return classLoader
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLASS_LOADER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ServletContextClassLoader getClassLoader() {
    return classLoader;
  }


  @JsonProperty(JSON_PROPERTY_CLASS_LOADER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClassLoader(ServletContextClassLoader classLoader) {
    this.classLoader = classLoader;
  }


  public ServletContext majorVersion(Integer majorVersion) {
    this.majorVersion = majorVersion;
    return this;
  }

   /**
   * Get majorVersion
   * @return majorVersion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAJOR_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMajorVersion() {
    return majorVersion;
  }


  @JsonProperty(JSON_PROPERTY_MAJOR_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMajorVersion(Integer majorVersion) {
    this.majorVersion = majorVersion;
  }


  public ServletContext minorVersion(Integer minorVersion) {
    this.minorVersion = minorVersion;
    return this;
  }

   /**
   * Get minorVersion
   * @return minorVersion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MINOR_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMinorVersion() {
    return minorVersion;
  }


  @JsonProperty(JSON_PROPERTY_MINOR_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinorVersion(Integer minorVersion) {
    this.minorVersion = minorVersion;
  }


  public ServletContext serverInfo(String serverInfo) {
    this.serverInfo = serverInfo;
    return this;
  }

   /**
   * Get serverInfo
   * @return serverInfo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVER_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getServerInfo() {
    return serverInfo;
  }


  @JsonProperty(JSON_PROPERTY_SERVER_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServerInfo(String serverInfo) {
    this.serverInfo = serverInfo;
  }


  public ServletContext contextPath(String contextPath) {
    this.contextPath = contextPath;
    return this;
  }

   /**
   * Get contextPath
   * @return contextPath
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTEXT_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContextPath() {
    return contextPath;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXT_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContextPath(String contextPath) {
    this.contextPath = contextPath;
  }


  public ServletContext effectiveMinorVersion(Integer effectiveMinorVersion) {
    this.effectiveMinorVersion = effectiveMinorVersion;
    return this;
  }

   /**
   * Get effectiveMinorVersion
   * @return effectiveMinorVersion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_MINOR_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getEffectiveMinorVersion() {
    return effectiveMinorVersion;
  }


  @JsonProperty(JSON_PROPERTY_EFFECTIVE_MINOR_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffectiveMinorVersion(Integer effectiveMinorVersion) {
    this.effectiveMinorVersion = effectiveMinorVersion;
  }


  public ServletContext servletContextName(String servletContextName) {
    this.servletContextName = servletContextName;
    return this;
  }

   /**
   * Get servletContextName
   * @return servletContextName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVLET_CONTEXT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getServletContextName() {
    return servletContextName;
  }


  @JsonProperty(JSON_PROPERTY_SERVLET_CONTEXT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServletContextName(String servletContextName) {
    this.servletContextName = servletContextName;
  }


  public ServletContext effectiveMajorVersion(Integer effectiveMajorVersion) {
    this.effectiveMajorVersion = effectiveMajorVersion;
    return this;
  }

   /**
   * Get effectiveMajorVersion
   * @return effectiveMajorVersion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_MAJOR_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getEffectiveMajorVersion() {
    return effectiveMajorVersion;
  }


  @JsonProperty(JSON_PROPERTY_EFFECTIVE_MAJOR_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffectiveMajorVersion(Integer effectiveMajorVersion) {
    this.effectiveMajorVersion = effectiveMajorVersion;
  }


  public ServletContext initParameterNames(Object initParameterNames) {
    this.initParameterNames = initParameterNames;
    return this;
  }

   /**
   * Get initParameterNames
   * @return initParameterNames
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INIT_PARAMETER_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getInitParameterNames() {
    return initParameterNames;
  }


  @JsonProperty(JSON_PROPERTY_INIT_PARAMETER_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInitParameterNames(Object initParameterNames) {
    this.initParameterNames = initParameterNames;
  }


  public ServletContext servletRegistrations(Map<String, ServletRegistration> servletRegistrations) {
    this.servletRegistrations = servletRegistrations;
    return this;
  }

  public ServletContext putServletRegistrationsItem(String key, ServletRegistration servletRegistrationsItem) {
    if (this.servletRegistrations == null) {
      this.servletRegistrations = new HashMap<>();
    }
    this.servletRegistrations.put(key, servletRegistrationsItem);
    return this;
  }

   /**
   * Get servletRegistrations
   * @return servletRegistrations
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVLET_REGISTRATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, ServletRegistration> getServletRegistrations() {
    return servletRegistrations;
  }


  @JsonProperty(JSON_PROPERTY_SERVLET_REGISTRATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServletRegistrations(Map<String, ServletRegistration> servletRegistrations) {
    this.servletRegistrations = servletRegistrations;
  }


  public ServletContext sessionCookieConfig(SessionCookieConfig sessionCookieConfig) {
    this.sessionCookieConfig = sessionCookieConfig;
    return this;
  }

   /**
   * Get sessionCookieConfig
   * @return sessionCookieConfig
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SESSION_COOKIE_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SessionCookieConfig getSessionCookieConfig() {
    return sessionCookieConfig;
  }


  @JsonProperty(JSON_PROPERTY_SESSION_COOKIE_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSessionCookieConfig(SessionCookieConfig sessionCookieConfig) {
    this.sessionCookieConfig = sessionCookieConfig;
  }


  public ServletContext filterRegistrations(Map<String, FilterRegistration> filterRegistrations) {
    this.filterRegistrations = filterRegistrations;
    return this;
  }

  public ServletContext putFilterRegistrationsItem(String key, FilterRegistration filterRegistrationsItem) {
    if (this.filterRegistrations == null) {
      this.filterRegistrations = new HashMap<>();
    }
    this.filterRegistrations.put(key, filterRegistrationsItem);
    return this;
  }

   /**
   * Get filterRegistrations
   * @return filterRegistrations
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILTER_REGISTRATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, FilterRegistration> getFilterRegistrations() {
    return filterRegistrations;
  }


  @JsonProperty(JSON_PROPERTY_FILTER_REGISTRATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilterRegistrations(Map<String, FilterRegistration> filterRegistrations) {
    this.filterRegistrations = filterRegistrations;
  }


  public ServletContext virtualServerName(String virtualServerName) {
    this.virtualServerName = virtualServerName;
    return this;
  }

   /**
   * Get virtualServerName
   * @return virtualServerName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VIRTUAL_SERVER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVirtualServerName() {
    return virtualServerName;
  }


  @JsonProperty(JSON_PROPERTY_VIRTUAL_SERVER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVirtualServerName(String virtualServerName) {
    this.virtualServerName = virtualServerName;
  }


  public ServletContext sessionTrackingModes(Set<SessionTrackingModesEnum> sessionTrackingModes) {
    this.sessionTrackingModes = sessionTrackingModes;
    return this;
  }

  public ServletContext addSessionTrackingModesItem(SessionTrackingModesEnum sessionTrackingModesItem) {
    if (this.sessionTrackingModes == null) {
      this.sessionTrackingModes = new LinkedHashSet<>();
    }
    this.sessionTrackingModes.add(sessionTrackingModesItem);
    return this;
  }

   /**
   * Get sessionTrackingModes
   * @return sessionTrackingModes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SESSION_TRACKING_MODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<SessionTrackingModesEnum> getSessionTrackingModes() {
    return sessionTrackingModes;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_SESSION_TRACKING_MODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSessionTrackingModes(Set<SessionTrackingModesEnum> sessionTrackingModes) {
    this.sessionTrackingModes = sessionTrackingModes;
  }


  public ServletContext jspConfigDescriptor(JspConfigDescriptor jspConfigDescriptor) {
    this.jspConfigDescriptor = jspConfigDescriptor;
    return this;
  }

   /**
   * Get jspConfigDescriptor
   * @return jspConfigDescriptor
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_JSP_CONFIG_DESCRIPTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JspConfigDescriptor getJspConfigDescriptor() {
    return jspConfigDescriptor;
  }


  @JsonProperty(JSON_PROPERTY_JSP_CONFIG_DESCRIPTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJspConfigDescriptor(JspConfigDescriptor jspConfigDescriptor) {
    this.jspConfigDescriptor = jspConfigDescriptor;
  }


  public ServletContext sessionTimeout(Integer sessionTimeout) {
    this.sessionTimeout = sessionTimeout;
    return this;
  }

   /**
   * Get sessionTimeout
   * @return sessionTimeout
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SESSION_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSessionTimeout() {
    return sessionTimeout;
  }


  @JsonProperty(JSON_PROPERTY_SESSION_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSessionTimeout(Integer sessionTimeout) {
    this.sessionTimeout = sessionTimeout;
  }


  public ServletContext effectiveSessionTrackingModes(Set<EffectiveSessionTrackingModesEnum> effectiveSessionTrackingModes) {
    this.effectiveSessionTrackingModes = effectiveSessionTrackingModes;
    return this;
  }

  public ServletContext addEffectiveSessionTrackingModesItem(EffectiveSessionTrackingModesEnum effectiveSessionTrackingModesItem) {
    if (this.effectiveSessionTrackingModes == null) {
      this.effectiveSessionTrackingModes = new LinkedHashSet<>();
    }
    this.effectiveSessionTrackingModes.add(effectiveSessionTrackingModesItem);
    return this;
  }

   /**
   * Get effectiveSessionTrackingModes
   * @return effectiveSessionTrackingModes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_SESSION_TRACKING_MODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<EffectiveSessionTrackingModesEnum> getEffectiveSessionTrackingModes() {
    return effectiveSessionTrackingModes;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_SESSION_TRACKING_MODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffectiveSessionTrackingModes(Set<EffectiveSessionTrackingModesEnum> effectiveSessionTrackingModes) {
    this.effectiveSessionTrackingModes = effectiveSessionTrackingModes;
  }


  public ServletContext responseCharacterEncoding(String responseCharacterEncoding) {
    this.responseCharacterEncoding = responseCharacterEncoding;
    return this;
  }

   /**
   * Get responseCharacterEncoding
   * @return responseCharacterEncoding
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSE_CHARACTER_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getResponseCharacterEncoding() {
    return responseCharacterEncoding;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE_CHARACTER_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponseCharacterEncoding(String responseCharacterEncoding) {
    this.responseCharacterEncoding = responseCharacterEncoding;
  }


  public ServletContext requestCharacterEncoding(String requestCharacterEncoding) {
    this.requestCharacterEncoding = requestCharacterEncoding;
    return this;
  }

   /**
   * Get requestCharacterEncoding
   * @return requestCharacterEncoding
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUEST_CHARACTER_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestCharacterEncoding() {
    return requestCharacterEncoding;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_CHARACTER_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestCharacterEncoding(String requestCharacterEncoding) {
    this.requestCharacterEncoding = requestCharacterEncoding;
  }


  public ServletContext defaultSessionTrackingModes(Set<DefaultSessionTrackingModesEnum> defaultSessionTrackingModes) {
    this.defaultSessionTrackingModes = defaultSessionTrackingModes;
    return this;
  }

  public ServletContext addDefaultSessionTrackingModesItem(DefaultSessionTrackingModesEnum defaultSessionTrackingModesItem) {
    if (this.defaultSessionTrackingModes == null) {
      this.defaultSessionTrackingModes = new LinkedHashSet<>();
    }
    this.defaultSessionTrackingModes.add(defaultSessionTrackingModesItem);
    return this;
  }

   /**
   * Get defaultSessionTrackingModes
   * @return defaultSessionTrackingModes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_SESSION_TRACKING_MODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<DefaultSessionTrackingModesEnum> getDefaultSessionTrackingModes() {
    return defaultSessionTrackingModes;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_DEFAULT_SESSION_TRACKING_MODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultSessionTrackingModes(Set<DefaultSessionTrackingModesEnum> defaultSessionTrackingModes) {
    this.defaultSessionTrackingModes = defaultSessionTrackingModes;
  }


  public ServletContext attributeNames(Object attributeNames) {
    this.attributeNames = attributeNames;
    return this;
  }

   /**
   * Get attributeNames
   * @return attributeNames
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTE_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getAttributeNames() {
    return attributeNames;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTE_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributeNames(Object attributeNames) {
    this.attributeNames = attributeNames;
  }


  /**
   * Return true if this ServletContext object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServletContext servletContext = (ServletContext) o;
    return Objects.equals(this.classLoader, servletContext.classLoader) &&
        Objects.equals(this.majorVersion, servletContext.majorVersion) &&
        Objects.equals(this.minorVersion, servletContext.minorVersion) &&
        Objects.equals(this.serverInfo, servletContext.serverInfo) &&
        Objects.equals(this.contextPath, servletContext.contextPath) &&
        Objects.equals(this.effectiveMinorVersion, servletContext.effectiveMinorVersion) &&
        Objects.equals(this.servletContextName, servletContext.servletContextName) &&
        Objects.equals(this.effectiveMajorVersion, servletContext.effectiveMajorVersion) &&
        Objects.equals(this.initParameterNames, servletContext.initParameterNames) &&
        Objects.equals(this.servletRegistrations, servletContext.servletRegistrations) &&
        Objects.equals(this.sessionCookieConfig, servletContext.sessionCookieConfig) &&
        Objects.equals(this.filterRegistrations, servletContext.filterRegistrations) &&
        Objects.equals(this.virtualServerName, servletContext.virtualServerName) &&
        Objects.equals(this.sessionTrackingModes, servletContext.sessionTrackingModes) &&
        Objects.equals(this.jspConfigDescriptor, servletContext.jspConfigDescriptor) &&
        Objects.equals(this.sessionTimeout, servletContext.sessionTimeout) &&
        Objects.equals(this.effectiveSessionTrackingModes, servletContext.effectiveSessionTrackingModes) &&
        Objects.equals(this.responseCharacterEncoding, servletContext.responseCharacterEncoding) &&
        Objects.equals(this.requestCharacterEncoding, servletContext.requestCharacterEncoding) &&
        Objects.equals(this.defaultSessionTrackingModes, servletContext.defaultSessionTrackingModes) &&
        Objects.equals(this.attributeNames, servletContext.attributeNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classLoader, majorVersion, minorVersion, serverInfo, contextPath, effectiveMinorVersion, servletContextName, effectiveMajorVersion, initParameterNames, servletRegistrations, sessionCookieConfig, filterRegistrations, virtualServerName, sessionTrackingModes, jspConfigDescriptor, sessionTimeout, effectiveSessionTrackingModes, responseCharacterEncoding, requestCharacterEncoding, defaultSessionTrackingModes, attributeNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServletContext {\n");
    sb.append("    classLoader: ").append(toIndentedString(classLoader)).append("\n");
    sb.append("    majorVersion: ").append(toIndentedString(majorVersion)).append("\n");
    sb.append("    minorVersion: ").append(toIndentedString(minorVersion)).append("\n");
    sb.append("    serverInfo: ").append(toIndentedString(serverInfo)).append("\n");
    sb.append("    contextPath: ").append(toIndentedString(contextPath)).append("\n");
    sb.append("    effectiveMinorVersion: ").append(toIndentedString(effectiveMinorVersion)).append("\n");
    sb.append("    servletContextName: ").append(toIndentedString(servletContextName)).append("\n");
    sb.append("    effectiveMajorVersion: ").append(toIndentedString(effectiveMajorVersion)).append("\n");
    sb.append("    initParameterNames: ").append(toIndentedString(initParameterNames)).append("\n");
    sb.append("    servletRegistrations: ").append(toIndentedString(servletRegistrations)).append("\n");
    sb.append("    sessionCookieConfig: ").append(toIndentedString(sessionCookieConfig)).append("\n");
    sb.append("    filterRegistrations: ").append(toIndentedString(filterRegistrations)).append("\n");
    sb.append("    virtualServerName: ").append(toIndentedString(virtualServerName)).append("\n");
    sb.append("    sessionTrackingModes: ").append(toIndentedString(sessionTrackingModes)).append("\n");
    sb.append("    jspConfigDescriptor: ").append(toIndentedString(jspConfigDescriptor)).append("\n");
    sb.append("    sessionTimeout: ").append(toIndentedString(sessionTimeout)).append("\n");
    sb.append("    effectiveSessionTrackingModes: ").append(toIndentedString(effectiveSessionTrackingModes)).append("\n");
    sb.append("    responseCharacterEncoding: ").append(toIndentedString(responseCharacterEncoding)).append("\n");
    sb.append("    requestCharacterEncoding: ").append(toIndentedString(requestCharacterEncoding)).append("\n");
    sb.append("    defaultSessionTrackingModes: ").append(toIndentedString(defaultSessionTrackingModes)).append("\n");
    sb.append("    attributeNames: ").append(toIndentedString(attributeNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

