/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * ServletRequest
 */
@JsonPropertyOrder({
  ServletRequest.JSON_PROPERTY_SCHEME,
  ServletRequest.JSON_PROPERTY_INPUT_STREAM,
  ServletRequest.JSON_PROPERTY_PROTOCOL,
  ServletRequest.JSON_PROPERTY_LOCALE,
  ServletRequest.JSON_PROPERTY_CONTENT_LENGTH,
  ServletRequest.JSON_PROPERTY_SERVLET_CONTEXT,
  ServletRequest.JSON_PROPERTY_READER,
  ServletRequest.JSON_PROPERTY_REMOTE_ADDR,
  ServletRequest.JSON_PROPERTY_CHARACTER_ENCODING,
  ServletRequest.JSON_PROPERTY_PROTOCOL_REQUEST_ID,
  ServletRequest.JSON_PROPERTY_SERVLET_CONNECTION,
  ServletRequest.JSON_PROPERTY_LOCALES,
  ServletRequest.JSON_PROPERTY_SECURE,
  ServletRequest.JSON_PROPERTY_LOCAL_ADDR,
  ServletRequest.JSON_PROPERTY_SERVER_PORT,
  ServletRequest.JSON_PROPERTY_ASYNC_STARTED,
  ServletRequest.JSON_PROPERTY_REMOTE_PORT,
  ServletRequest.JSON_PROPERTY_ATTRIBUTE_NAMES,
  ServletRequest.JSON_PROPERTY_REMOTE_HOST,
  ServletRequest.JSON_PROPERTY_ASYNC_SUPPORTED,
  ServletRequest.JSON_PROPERTY_SERVER_NAME,
  ServletRequest.JSON_PROPERTY_PARAMETER_MAP,
  ServletRequest.JSON_PROPERTY_LOCAL_PORT,
  ServletRequest.JSON_PROPERTY_DISPATCHER_TYPE,
  ServletRequest.JSON_PROPERTY_ASYNC_CONTEXT,
  ServletRequest.JSON_PROPERTY_REQUEST_ID,
  ServletRequest.JSON_PROPERTY_CONTENT_LENGTH_LONG,
  ServletRequest.JSON_PROPERTY_CONTENT_TYPE,
  ServletRequest.JSON_PROPERTY_LOCAL_NAME,
  ServletRequest.JSON_PROPERTY_PARAMETER_NAMES
})
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-21T16:37:39.682984900+02:00[Europe/Paris]")
public class ServletRequest {
  public static final String JSON_PROPERTY_SCHEME = "scheme";
  private String scheme;

  public static final String JSON_PROPERTY_INPUT_STREAM = "inputStream";
  private ServletInputStream inputStream;

  public static final String JSON_PROPERTY_PROTOCOL = "protocol";
  private String protocol;

  public static final String JSON_PROPERTY_LOCALE = "locale";
  private HttpServletRequestLocale locale;

  public static final String JSON_PROPERTY_CONTENT_LENGTH = "contentLength";
  private Integer contentLength;

  public static final String JSON_PROPERTY_SERVLET_CONTEXT = "servletContext";
  private ServletContext servletContext;

  public static final String JSON_PROPERTY_READER = "reader";
  private Object reader;

  public static final String JSON_PROPERTY_REMOTE_ADDR = "remoteAddr";
  private String remoteAddr;

  public static final String JSON_PROPERTY_CHARACTER_ENCODING = "characterEncoding";
  private String characterEncoding;

  public static final String JSON_PROPERTY_PROTOCOL_REQUEST_ID = "protocolRequestId";
  private String protocolRequestId;

  public static final String JSON_PROPERTY_SERVLET_CONNECTION = "servletConnection";
  private ServletConnection servletConnection;

  public static final String JSON_PROPERTY_LOCALES = "locales";
  private Object locales;

  public static final String JSON_PROPERTY_SECURE = "secure";
  private Boolean secure;

  public static final String JSON_PROPERTY_LOCAL_ADDR = "localAddr";
  private String localAddr;

  public static final String JSON_PROPERTY_SERVER_PORT = "serverPort";
  private Integer serverPort;

  public static final String JSON_PROPERTY_ASYNC_STARTED = "asyncStarted";
  private Boolean asyncStarted;

  public static final String JSON_PROPERTY_REMOTE_PORT = "remotePort";
  private Integer remotePort;

  public static final String JSON_PROPERTY_ATTRIBUTE_NAMES = "attributeNames";
  private Object attributeNames;

  public static final String JSON_PROPERTY_REMOTE_HOST = "remoteHost";
  private String remoteHost;

  public static final String JSON_PROPERTY_ASYNC_SUPPORTED = "asyncSupported";
  private Boolean asyncSupported;

  public static final String JSON_PROPERTY_SERVER_NAME = "serverName";
  private String serverName;

  public static final String JSON_PROPERTY_PARAMETER_MAP = "parameterMap";
  private Map<String, List<String>> parameterMap = new HashMap<>();

  public static final String JSON_PROPERTY_LOCAL_PORT = "localPort";
  private Integer localPort;

  /**
   * Gets or Sets dispatcherType
   */
  public enum DispatcherTypeEnum {
    FORWARD("FORWARD"),
    
    INCLUDE("INCLUDE"),
    
    REQUEST("REQUEST"),
    
    ASYNC("ASYNC"),
    
    ERROR("ERROR");

    private String value;

    DispatcherTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DispatcherTypeEnum fromValue(String value) {
      for (DispatcherTypeEnum b : DispatcherTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DISPATCHER_TYPE = "dispatcherType";
  private DispatcherTypeEnum dispatcherType;

  public static final String JSON_PROPERTY_ASYNC_CONTEXT = "asyncContext";
  private AsyncContext asyncContext;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  public static final String JSON_PROPERTY_CONTENT_LENGTH_LONG = "contentLengthLong";
  private Long contentLengthLong;

  public static final String JSON_PROPERTY_CONTENT_TYPE = "contentType";
  private String contentType;

  public static final String JSON_PROPERTY_LOCAL_NAME = "localName";
  private String localName;

  public static final String JSON_PROPERTY_PARAMETER_NAMES = "parameterNames";
  private Object parameterNames;

  public ServletRequest() { 
  }

  public ServletRequest scheme(String scheme) {
    this.scheme = scheme;
    return this;
  }

   /**
   * Get scheme
   * @return scheme
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCHEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScheme() {
    return scheme;
  }


  @JsonProperty(JSON_PROPERTY_SCHEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScheme(String scheme) {
    this.scheme = scheme;
  }


  public ServletRequest inputStream(ServletInputStream inputStream) {
    this.inputStream = inputStream;
    return this;
  }

   /**
   * Get inputStream
   * @return inputStream
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ServletInputStream getInputStream() {
    return inputStream;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputStream(ServletInputStream inputStream) {
    this.inputStream = inputStream;
  }


  public ServletRequest protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Get protocol
   * @return protocol
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProtocol() {
    return protocol;
  }


  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public ServletRequest locale(HttpServletRequestLocale locale) {
    this.locale = locale;
    return this;
  }

   /**
   * Get locale
   * @return locale
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HttpServletRequestLocale getLocale() {
    return locale;
  }


  @JsonProperty(JSON_PROPERTY_LOCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocale(HttpServletRequestLocale locale) {
    this.locale = locale;
  }


  public ServletRequest contentLength(Integer contentLength) {
    this.contentLength = contentLength;
    return this;
  }

   /**
   * Get contentLength
   * @return contentLength
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getContentLength() {
    return contentLength;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentLength(Integer contentLength) {
    this.contentLength = contentLength;
  }


  public ServletRequest servletContext(ServletContext servletContext) {
    this.servletContext = servletContext;
    return this;
  }

   /**
   * Get servletContext
   * @return servletContext
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVLET_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ServletContext getServletContext() {
    return servletContext;
  }


  @JsonProperty(JSON_PROPERTY_SERVLET_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServletContext(ServletContext servletContext) {
    this.servletContext = servletContext;
  }


  public ServletRequest reader(Object reader) {
    this.reader = reader;
    return this;
  }

   /**
   * Get reader
   * @return reader
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_READER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getReader() {
    return reader;
  }


  @JsonProperty(JSON_PROPERTY_READER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReader(Object reader) {
    this.reader = reader;
  }


  public ServletRequest remoteAddr(String remoteAddr) {
    this.remoteAddr = remoteAddr;
    return this;
  }

   /**
   * Get remoteAddr
   * @return remoteAddr
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMOTE_ADDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRemoteAddr() {
    return remoteAddr;
  }


  @JsonProperty(JSON_PROPERTY_REMOTE_ADDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemoteAddr(String remoteAddr) {
    this.remoteAddr = remoteAddr;
  }


  public ServletRequest characterEncoding(String characterEncoding) {
    this.characterEncoding = characterEncoding;
    return this;
  }

   /**
   * Get characterEncoding
   * @return characterEncoding
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHARACTER_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCharacterEncoding() {
    return characterEncoding;
  }


  @JsonProperty(JSON_PROPERTY_CHARACTER_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCharacterEncoding(String characterEncoding) {
    this.characterEncoding = characterEncoding;
  }


  public ServletRequest protocolRequestId(String protocolRequestId) {
    this.protocolRequestId = protocolRequestId;
    return this;
  }

   /**
   * Get protocolRequestId
   * @return protocolRequestId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROTOCOL_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProtocolRequestId() {
    return protocolRequestId;
  }


  @JsonProperty(JSON_PROPERTY_PROTOCOL_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProtocolRequestId(String protocolRequestId) {
    this.protocolRequestId = protocolRequestId;
  }


  public ServletRequest servletConnection(ServletConnection servletConnection) {
    this.servletConnection = servletConnection;
    return this;
  }

   /**
   * Get servletConnection
   * @return servletConnection
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVLET_CONNECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ServletConnection getServletConnection() {
    return servletConnection;
  }


  @JsonProperty(JSON_PROPERTY_SERVLET_CONNECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServletConnection(ServletConnection servletConnection) {
    this.servletConnection = servletConnection;
  }


  public ServletRequest locales(Object locales) {
    this.locales = locales;
    return this;
  }

   /**
   * Get locales
   * @return locales
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCALES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getLocales() {
    return locales;
  }


  @JsonProperty(JSON_PROPERTY_LOCALES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocales(Object locales) {
    this.locales = locales;
  }


  public ServletRequest secure(Boolean secure) {
    this.secure = secure;
    return this;
  }

   /**
   * Get secure
   * @return secure
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSecure() {
    return secure;
  }


  @JsonProperty(JSON_PROPERTY_SECURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecure(Boolean secure) {
    this.secure = secure;
  }


  public ServletRequest localAddr(String localAddr) {
    this.localAddr = localAddr;
    return this;
  }

   /**
   * Get localAddr
   * @return localAddr
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCAL_ADDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocalAddr() {
    return localAddr;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_ADDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocalAddr(String localAddr) {
    this.localAddr = localAddr;
  }


  public ServletRequest serverPort(Integer serverPort) {
    this.serverPort = serverPort;
    return this;
  }

   /**
   * Get serverPort
   * @return serverPort
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVER_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getServerPort() {
    return serverPort;
  }


  @JsonProperty(JSON_PROPERTY_SERVER_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServerPort(Integer serverPort) {
    this.serverPort = serverPort;
  }


  public ServletRequest asyncStarted(Boolean asyncStarted) {
    this.asyncStarted = asyncStarted;
    return this;
  }

   /**
   * Get asyncStarted
   * @return asyncStarted
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASYNC_STARTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAsyncStarted() {
    return asyncStarted;
  }


  @JsonProperty(JSON_PROPERTY_ASYNC_STARTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAsyncStarted(Boolean asyncStarted) {
    this.asyncStarted = asyncStarted;
  }


  public ServletRequest remotePort(Integer remotePort) {
    this.remotePort = remotePort;
    return this;
  }

   /**
   * Get remotePort
   * @return remotePort
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMOTE_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRemotePort() {
    return remotePort;
  }


  @JsonProperty(JSON_PROPERTY_REMOTE_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemotePort(Integer remotePort) {
    this.remotePort = remotePort;
  }


  public ServletRequest attributeNames(Object attributeNames) {
    this.attributeNames = attributeNames;
    return this;
  }

   /**
   * Get attributeNames
   * @return attributeNames
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTE_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getAttributeNames() {
    return attributeNames;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTE_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributeNames(Object attributeNames) {
    this.attributeNames = attributeNames;
  }


  public ServletRequest remoteHost(String remoteHost) {
    this.remoteHost = remoteHost;
    return this;
  }

   /**
   * Get remoteHost
   * @return remoteHost
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMOTE_HOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRemoteHost() {
    return remoteHost;
  }


  @JsonProperty(JSON_PROPERTY_REMOTE_HOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemoteHost(String remoteHost) {
    this.remoteHost = remoteHost;
  }


  public ServletRequest asyncSupported(Boolean asyncSupported) {
    this.asyncSupported = asyncSupported;
    return this;
  }

   /**
   * Get asyncSupported
   * @return asyncSupported
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASYNC_SUPPORTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAsyncSupported() {
    return asyncSupported;
  }


  @JsonProperty(JSON_PROPERTY_ASYNC_SUPPORTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAsyncSupported(Boolean asyncSupported) {
    this.asyncSupported = asyncSupported;
  }


  public ServletRequest serverName(String serverName) {
    this.serverName = serverName;
    return this;
  }

   /**
   * Get serverName
   * @return serverName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getServerName() {
    return serverName;
  }


  @JsonProperty(JSON_PROPERTY_SERVER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServerName(String serverName) {
    this.serverName = serverName;
  }


  public ServletRequest parameterMap(Map<String, List<String>> parameterMap) {
    this.parameterMap = parameterMap;
    return this;
  }

  public ServletRequest putParameterMapItem(String key, List<String> parameterMapItem) {
    if (this.parameterMap == null) {
      this.parameterMap = new HashMap<>();
    }
    this.parameterMap.put(key, parameterMapItem);
    return this;
  }

   /**
   * Get parameterMap
   * @return parameterMap
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARAMETER_MAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, List<String>> getParameterMap() {
    return parameterMap;
  }


  @JsonProperty(JSON_PROPERTY_PARAMETER_MAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParameterMap(Map<String, List<String>> parameterMap) {
    this.parameterMap = parameterMap;
  }


  public ServletRequest localPort(Integer localPort) {
    this.localPort = localPort;
    return this;
  }

   /**
   * Get localPort
   * @return localPort
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCAL_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLocalPort() {
    return localPort;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocalPort(Integer localPort) {
    this.localPort = localPort;
  }


  public ServletRequest dispatcherType(DispatcherTypeEnum dispatcherType) {
    this.dispatcherType = dispatcherType;
    return this;
  }

   /**
   * Get dispatcherType
   * @return dispatcherType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISPATCHER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DispatcherTypeEnum getDispatcherType() {
    return dispatcherType;
  }


  @JsonProperty(JSON_PROPERTY_DISPATCHER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDispatcherType(DispatcherTypeEnum dispatcherType) {
    this.dispatcherType = dispatcherType;
  }


  public ServletRequest asyncContext(AsyncContext asyncContext) {
    this.asyncContext = asyncContext;
    return this;
  }

   /**
   * Get asyncContext
   * @return asyncContext
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASYNC_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AsyncContext getAsyncContext() {
    return asyncContext;
  }


  @JsonProperty(JSON_PROPERTY_ASYNC_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAsyncContext(AsyncContext asyncContext) {
    this.asyncContext = asyncContext;
  }


  public ServletRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Get requestId
   * @return requestId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public ServletRequest contentLengthLong(Long contentLengthLong) {
    this.contentLengthLong = contentLengthLong;
    return this;
  }

   /**
   * Get contentLengthLong
   * @return contentLengthLong
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_LENGTH_LONG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getContentLengthLong() {
    return contentLengthLong;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_LENGTH_LONG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentLengthLong(Long contentLengthLong) {
    this.contentLengthLong = contentLengthLong;
  }


  public ServletRequest contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * Get contentType
   * @return contentType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContentType() {
    return contentType;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public ServletRequest localName(String localName) {
    this.localName = localName;
    return this;
  }

   /**
   * Get localName
   * @return localName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCAL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocalName() {
    return localName;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocalName(String localName) {
    this.localName = localName;
  }


  public ServletRequest parameterNames(Object parameterNames) {
    this.parameterNames = parameterNames;
    return this;
  }

   /**
   * Get parameterNames
   * @return parameterNames
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARAMETER_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getParameterNames() {
    return parameterNames;
  }


  @JsonProperty(JSON_PROPERTY_PARAMETER_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParameterNames(Object parameterNames) {
    this.parameterNames = parameterNames;
  }


  /**
   * Return true if this ServletRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServletRequest servletRequest = (ServletRequest) o;
    return Objects.equals(this.scheme, servletRequest.scheme) &&
        Objects.equals(this.inputStream, servletRequest.inputStream) &&
        Objects.equals(this.protocol, servletRequest.protocol) &&
        Objects.equals(this.locale, servletRequest.locale) &&
        Objects.equals(this.contentLength, servletRequest.contentLength) &&
        Objects.equals(this.servletContext, servletRequest.servletContext) &&
        Objects.equals(this.reader, servletRequest.reader) &&
        Objects.equals(this.remoteAddr, servletRequest.remoteAddr) &&
        Objects.equals(this.characterEncoding, servletRequest.characterEncoding) &&
        Objects.equals(this.protocolRequestId, servletRequest.protocolRequestId) &&
        Objects.equals(this.servletConnection, servletRequest.servletConnection) &&
        Objects.equals(this.locales, servletRequest.locales) &&
        Objects.equals(this.secure, servletRequest.secure) &&
        Objects.equals(this.localAddr, servletRequest.localAddr) &&
        Objects.equals(this.serverPort, servletRequest.serverPort) &&
        Objects.equals(this.asyncStarted, servletRequest.asyncStarted) &&
        Objects.equals(this.remotePort, servletRequest.remotePort) &&
        Objects.equals(this.attributeNames, servletRequest.attributeNames) &&
        Objects.equals(this.remoteHost, servletRequest.remoteHost) &&
        Objects.equals(this.asyncSupported, servletRequest.asyncSupported) &&
        Objects.equals(this.serverName, servletRequest.serverName) &&
        Objects.equals(this.parameterMap, servletRequest.parameterMap) &&
        Objects.equals(this.localPort, servletRequest.localPort) &&
        Objects.equals(this.dispatcherType, servletRequest.dispatcherType) &&
        Objects.equals(this.asyncContext, servletRequest.asyncContext) &&
        Objects.equals(this.requestId, servletRequest.requestId) &&
        Objects.equals(this.contentLengthLong, servletRequest.contentLengthLong) &&
        Objects.equals(this.contentType, servletRequest.contentType) &&
        Objects.equals(this.localName, servletRequest.localName) &&
        Objects.equals(this.parameterNames, servletRequest.parameterNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scheme, inputStream, protocol, locale, contentLength, servletContext, reader, remoteAddr, characterEncoding, protocolRequestId, servletConnection, locales, secure, localAddr, serverPort, asyncStarted, remotePort, attributeNames, remoteHost, asyncSupported, serverName, parameterMap, localPort, dispatcherType, asyncContext, requestId, contentLengthLong, contentType, localName, parameterNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServletRequest {\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("    inputStream: ").append(toIndentedString(inputStream)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    contentLength: ").append(toIndentedString(contentLength)).append("\n");
    sb.append("    servletContext: ").append(toIndentedString(servletContext)).append("\n");
    sb.append("    reader: ").append(toIndentedString(reader)).append("\n");
    sb.append("    remoteAddr: ").append(toIndentedString(remoteAddr)).append("\n");
    sb.append("    characterEncoding: ").append(toIndentedString(characterEncoding)).append("\n");
    sb.append("    protocolRequestId: ").append(toIndentedString(protocolRequestId)).append("\n");
    sb.append("    servletConnection: ").append(toIndentedString(servletConnection)).append("\n");
    sb.append("    locales: ").append(toIndentedString(locales)).append("\n");
    sb.append("    secure: ").append(toIndentedString(secure)).append("\n");
    sb.append("    localAddr: ").append(toIndentedString(localAddr)).append("\n");
    sb.append("    serverPort: ").append(toIndentedString(serverPort)).append("\n");
    sb.append("    asyncStarted: ").append(toIndentedString(asyncStarted)).append("\n");
    sb.append("    remotePort: ").append(toIndentedString(remotePort)).append("\n");
    sb.append("    attributeNames: ").append(toIndentedString(attributeNames)).append("\n");
    sb.append("    remoteHost: ").append(toIndentedString(remoteHost)).append("\n");
    sb.append("    asyncSupported: ").append(toIndentedString(asyncSupported)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    parameterMap: ").append(toIndentedString(parameterMap)).append("\n");
    sb.append("    localPort: ").append(toIndentedString(localPort)).append("\n");
    sb.append("    dispatcherType: ").append(toIndentedString(dispatcherType)).append("\n");
    sb.append("    asyncContext: ").append(toIndentedString(asyncContext)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    contentLengthLong: ").append(toIndentedString(contentLengthLong)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    localName: ").append(toIndentedString(localName)).append("\n");
    sb.append("    parameterNames: ").append(toIndentedString(parameterNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

