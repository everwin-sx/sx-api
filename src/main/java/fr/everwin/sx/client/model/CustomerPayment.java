/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.02.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * CustomerPayment
 */
@JsonPropertyOrder({
  CustomerPayment.JSON_PROPERTY_ID,
  CustomerPayment.JSON_PROPERTY_VALIDATION_STEP,
  CustomerPayment.JSON_PROPERTY_CUSTOMER,
  CustomerPayment.JSON_PROPERTY_ACCOUNTING_DATA,
  CustomerPayment.JSON_PROPERTY_CONTACT,
  CustomerPayment.JSON_PROPERTY_DATE,
  CustomerPayment.JSON_PROPERTY_PAYMENT_TYPE,
  CustomerPayment.JSON_PROPERTY_ACCOUNTING_ENTITY,
  CustomerPayment.JSON_PROPERTY_BANK,
  CustomerPayment.JSON_PROPERTY_REFERENCE,
  CustomerPayment.JSON_PROPERTY_CURRENCY,
  CustomerPayment.JSON_PROPERTY_AMOUNT,
  CustomerPayment.JSON_PROPERTY_CREATOR,
  CustomerPayment.JSON_PROPERTY_CREATED_ON_TIME,
  CustomerPayment.JSON_PROPERTY_UPDATED_ON_TIME,
  CustomerPayment.JSON_PROPERTY_UPDATED_BY,
  CustomerPayment.JSON_PROPERTY_EXTRA_DATA
})
@JsonTypeName("customerPayment")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-10-06T08:58:20.555636300+02:00[Europe/Paris]")
public class CustomerPayment {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_VALIDATION_STEP = "validationStep";
  private String validationStep;

  public static final String JSON_PROPERTY_CUSTOMER = "customer";
  private CompanyDataLink customer;

  public static final String JSON_PROPERTY_ACCOUNTING_DATA = "accountingData";
  private CompanyAccountDataLink accountingData;

  public static final String JSON_PROPERTY_CONTACT = "contact";
  private ContactResponsibilityDataLink contact;

  public static final String JSON_PROPERTY_DATE = "date";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime date;

  public static final String JSON_PROPERTY_PAYMENT_TYPE = "paymentType";
  private DataLink paymentType;

  public static final String JSON_PROPERTY_ACCOUNTING_ENTITY = "accountingEntity";
  private EntityDataLink accountingEntity;

  public static final String JSON_PROPERTY_BANK = "bank";
  private DataLink bank;

  public static final String JSON_PROPERTY_REFERENCE = "reference";
  private String reference;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private CurrencyDataLink currency;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private CustomerPaymentMultiCurrencyValue amount;

  public static final String JSON_PROPERTY_CREATOR = "creator";
  private EmployeeDataLink creator;

  public static final String JSON_PROPERTY_CREATED_ON_TIME = "createdOnTime";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime createdOnTime;

  public static final String JSON_PROPERTY_UPDATED_ON_TIME = "updatedOnTime";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime updatedOnTime;

  public static final String JSON_PROPERTY_UPDATED_BY = "updatedBy";
  private String updatedBy;

  public static final String JSON_PROPERTY_EXTRA_DATA = "extraData";
  private List<SpecificData> extraData;

  public CustomerPayment() { 
  }

  @JsonCreator
  public CustomerPayment(
    @JsonProperty(JSON_PROPERTY_CREATED_ON_TIME) java.time.LocalDateTime createdOnTime, 
    @JsonProperty(JSON_PROPERTY_UPDATED_ON_TIME) java.time.LocalDateTime updatedOnTime, 
    @JsonProperty(JSON_PROPERTY_UPDATED_BY) String updatedBy
  ) {
    this();
    this.createdOnTime = createdOnTime;
    this.updatedOnTime = updatedOnTime;
    this.updatedBy = updatedBy;
  }

  public CustomerPayment id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * id of the object
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public CustomerPayment validationStep(String validationStep) {
    this.validationStep = validationStep;
    return this;
  }

   /**
   * Validation step of the element
   * @return validationStep
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VALIDATION_STEP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getValidationStep() {
    return validationStep;
  }


  @JsonProperty(JSON_PROPERTY_VALIDATION_STEP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValidationStep(String validationStep) {
    this.validationStep = validationStep;
  }


  public CustomerPayment customer(CompanyDataLink customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CompanyDataLink getCustomer() {
    return customer;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomer(CompanyDataLink customer) {
    this.customer = customer;
  }


  public CustomerPayment accountingData(CompanyAccountDataLink accountingData) {
    this.accountingData = accountingData;
    return this;
  }

   /**
   * Get accountingData
   * @return accountingData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNTING_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CompanyAccountDataLink getAccountingData() {
    return accountingData;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNTING_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccountingData(CompanyAccountDataLink accountingData) {
    this.accountingData = accountingData;
  }


  public CustomerPayment contact(ContactResponsibilityDataLink contact) {
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ContactResponsibilityDataLink getContact() {
    return contact;
  }


  @JsonProperty(JSON_PROPERTY_CONTACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContact(ContactResponsibilityDataLink contact) {
    this.contact = contact;
  }


  public CustomerPayment date(java.time.LocalDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Date of the customer payment
   * @return date
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(java.time.LocalDateTime date) {
    this.date = date;
  }


  public CustomerPayment paymentType(DataLink paymentType) {
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Get paymentType
   * @return paymentType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DataLink getPaymentType() {
    return paymentType;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentType(DataLink paymentType) {
    this.paymentType = paymentType;
  }


  public CustomerPayment accountingEntity(EntityDataLink accountingEntity) {
    this.accountingEntity = accountingEntity;
    return this;
  }

   /**
   * Get accountingEntity
   * @return accountingEntity
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNTING_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityDataLink getAccountingEntity() {
    return accountingEntity;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNTING_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccountingEntity(EntityDataLink accountingEntity) {
    this.accountingEntity = accountingEntity;
  }


  public CustomerPayment bank(DataLink bank) {
    this.bank = bank;
    return this;
  }

   /**
   * Get bank
   * @return bank
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BANK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DataLink getBank() {
    return bank;
  }


  @JsonProperty(JSON_PROPERTY_BANK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBank(DataLink bank) {
    this.bank = bank;
  }


  public CustomerPayment reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Reference of the customer payment
   * @return reference
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReference() {
    return reference;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReference(String reference) {
    this.reference = reference;
  }


  public CustomerPayment currency(CurrencyDataLink currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CurrencyDataLink getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(CurrencyDataLink currency) {
    this.currency = currency;
  }


  public CustomerPayment amount(CustomerPaymentMultiCurrencyValue amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CustomerPaymentMultiCurrencyValue getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(CustomerPaymentMultiCurrencyValue amount) {
    this.amount = amount;
  }


  public CustomerPayment creator(EmployeeDataLink creator) {
    this.creator = creator;
    return this;
  }

   /**
   * Get creator
   * @return creator
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EmployeeDataLink getCreator() {
    return creator;
  }


  @JsonProperty(JSON_PROPERTY_CREATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreator(EmployeeDataLink creator) {
    this.creator = creator;
  }


   /**
   * Date &amp; time of creation of the customer payment
   * @return createdOnTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_ON_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getCreatedOnTime() {
    return createdOnTime;
  }




   /**
   * Date &amp; time of the last update of the customer payment
   * @return updatedOnTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED_ON_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.time.LocalDateTime getUpdatedOnTime() {
    return updatedOnTime;
  }




   /**
   * Login of the user doing the last update on the customer payment
   * @return updatedBy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUpdatedBy() {
    return updatedBy;
  }




  public CustomerPayment extraData(List<SpecificData> extraData) {
    this.extraData = extraData;
    return this;
  }

  public CustomerPayment addExtraDataItem(SpecificData extraDataItem) {
    if (this.extraData == null) {
      this.extraData = new ArrayList<>();
    }
    this.extraData.add(extraDataItem);
    return this;
  }

   /**
   * Extra data of the customer payment. For more information, see Extra data section
   * @return extraData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SpecificData> getExtraData() {
    return extraData;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtraData(List<SpecificData> extraData) {
    this.extraData = extraData;
  }


  /**
   * Return true if this customerPayment object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerPayment customerPayment = (CustomerPayment) o;
    return Objects.equals(this.id, customerPayment.id) &&
        Objects.equals(this.validationStep, customerPayment.validationStep) &&
        Objects.equals(this.customer, customerPayment.customer) &&
        Objects.equals(this.accountingData, customerPayment.accountingData) &&
        Objects.equals(this.contact, customerPayment.contact) &&
        Objects.equals(this.date, customerPayment.date) &&
        Objects.equals(this.paymentType, customerPayment.paymentType) &&
        Objects.equals(this.accountingEntity, customerPayment.accountingEntity) &&
        Objects.equals(this.bank, customerPayment.bank) &&
        Objects.equals(this.reference, customerPayment.reference) &&
        Objects.equals(this.currency, customerPayment.currency) &&
        Objects.equals(this.amount, customerPayment.amount) &&
        Objects.equals(this.creator, customerPayment.creator) &&
        Objects.equals(this.createdOnTime, customerPayment.createdOnTime) &&
        Objects.equals(this.updatedOnTime, customerPayment.updatedOnTime) &&
        Objects.equals(this.updatedBy, customerPayment.updatedBy) &&
        Objects.equals(this.extraData, customerPayment.extraData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, validationStep, customer, accountingData, contact, date, paymentType, accountingEntity, bank, reference, currency, amount, creator, createdOnTime, updatedOnTime, updatedBy, extraData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerPayment {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    validationStep: ").append(toIndentedString(validationStep)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    accountingData: ").append(toIndentedString(accountingData)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    accountingEntity: ").append(toIndentedString(accountingEntity)).append("\n");
    sb.append("    bank: ").append(toIndentedString(bank)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    createdOnTime: ").append(toIndentedString(createdOnTime)).append("\n");
    sb.append("    updatedOnTime: ").append(toIndentedString(updatedOnTime)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

