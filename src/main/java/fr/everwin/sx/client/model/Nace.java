/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import fr.everwin.sx.client.model.NaceGroupDataLink;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import fr.everwin.sx.client.JSON;


/**
 * Nace
 */
@JsonPropertyOrder({
  Nace.JSON_PROPERTY_ID,
  Nace.JSON_PROPERTY_CODE,
  Nace.JSON_PROPERTY_LABEL,
  Nace.JSON_PROPERTY_REVISION,
  Nace.JSON_PROPERTY_NACE_GROUP,
  Nace.JSON_PROPERTY_IS_ARCHIVED
})
@JsonTypeName("nace")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-22T08:24:46.022483900+02:00[Europe/Paris]")
public class Nace {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  public static final String JSON_PROPERTY_REVISION = "revision";
  private Integer revision;

  public static final String JSON_PROPERTY_NACE_GROUP = "naceGroup";
  private NaceGroupDataLink naceGroup;

  /**
   * Indicates if nace is active or not. 0 : Active, 10 : Unavailable
   */
  public enum IsArchivedEnum {
    NUMBER_0(0),
    
    NUMBER_10(10);

    private Integer value;

    IsArchivedEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IsArchivedEnum fromValue(Integer value) {
      for (IsArchivedEnum b : IsArchivedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_IS_ARCHIVED = "isArchived";
  private IsArchivedEnum isArchived;

  public Nace() { 
  }

  public Nace id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * id of the object
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public Nace code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Code of the NACE
   * @return code
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(String code) {
    this.code = code;
  }


  public Nace label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Label of the NACE
   * @return label
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLabel(String label) {
    this.label = label;
  }


  public Nace revision(Integer revision) {
    this.revision = revision;
    return this;
  }

   /**
   * Revision number of the NACE
   * @return revision
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REVISION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRevision() {
    return revision;
  }


  @JsonProperty(JSON_PROPERTY_REVISION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRevision(Integer revision) {
    this.revision = revision;
  }


  public Nace naceGroup(NaceGroupDataLink naceGroup) {
    this.naceGroup = naceGroup;
    return this;
  }

   /**
   * Get naceGroup
   * @return naceGroup
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NACE_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NaceGroupDataLink getNaceGroup() {
    return naceGroup;
  }


  @JsonProperty(JSON_PROPERTY_NACE_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNaceGroup(NaceGroupDataLink naceGroup) {
    this.naceGroup = naceGroup;
  }


  public Nace isArchived(IsArchivedEnum isArchived) {
    this.isArchived = isArchived;
    return this;
  }

   /**
   * Indicates if nace is active or not. 0 : Active, 10 : Unavailable
   * @return isArchived
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IsArchivedEnum getIsArchived() {
    return isArchived;
  }


  @JsonProperty(JSON_PROPERTY_IS_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsArchived(IsArchivedEnum isArchived) {
    this.isArchived = isArchived;
  }


  /**
   * Return true if this nace object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Nace nace = (Nace) o;
    return Objects.equals(this.id, nace.id) &&
        Objects.equals(this.code, nace.code) &&
        Objects.equals(this.label, nace.label) &&
        Objects.equals(this.revision, nace.revision) &&
        Objects.equals(this.naceGroup, nace.naceGroup) &&
        Objects.equals(this.isArchived, nace.isArchived);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, code, label, revision, naceGroup, isArchived);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Nace {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    naceGroup: ").append(toIndentedString(naceGroup)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

