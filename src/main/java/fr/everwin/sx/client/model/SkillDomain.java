/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.02.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * SkillDomain
 */
@JsonPropertyOrder({
  SkillDomain.JSON_PROPERTY_ID,
  SkillDomain.JSON_PROPERTY_LABEL,
  SkillDomain.JSON_PROPERTY_DESCRIPTION,
  SkillDomain.JSON_PROPERTY_IS_UNIQUE,
  SkillDomain.JSON_PROPERTY_HAS_DYNAMIC_SKILLS,
  SkillDomain.JSON_PROPERTY_HAS_DATE,
  SkillDomain.JSON_PROPERTY_ENTITIES,
  SkillDomain.JSON_PROPERTY_ORDER,
  SkillDomain.JSON_PROPERTY_CVPARSER_TYPE,
  SkillDomain.JSON_PROPERTY_HAS_COMMENT,
  SkillDomain.JSON_PROPERTY_EXTRA_DATA
})
@JsonTypeName("skillDomain")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-10-06T08:58:20.555636300+02:00[Europe/Paris]")
public class SkillDomain {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  /**
   * Indicates if the skill-domain can be defined only once for a given employee. 0 : No, 1 : Yes
   */
  public enum IsUniqueEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    IsUniqueEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IsUniqueEnum fromValue(Integer value) {
      for (IsUniqueEnum b : IsUniqueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_IS_UNIQUE = "isUnique";
  private IsUniqueEnum isUnique;

  /**
   * Indicates if a skill can be set dynamically for the skill-domain. 0 : No, 1 : Yes
   */
  public enum HasDynamicSkillsEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    HasDynamicSkillsEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HasDynamicSkillsEnum fromValue(Integer value) {
      for (HasDynamicSkillsEnum b : HasDynamicSkillsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_HAS_DYNAMIC_SKILLS = "hasDynamicSkills";
  private HasDynamicSkillsEnum hasDynamicSkills;

  /**
   * Indicates if a date can be managed for the skills. 0 : No, 1 : Yes manually, 2 : Yes on creation, 3 :  Yes on update
   */
  public enum HasDateEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    HasDateEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HasDateEnum fromValue(Integer value) {
      for (HasDateEnum b : HasDateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_HAS_DATE = "hasDate";
  private HasDateEnum hasDate;

  public static final String JSON_PROPERTY_ENTITIES = "entities";
  private List<EntityDataLink> entities;

  public static final String JSON_PROPERTY_ORDER = "order";
  private Integer order;

  /**
   * CV Parser skill-domain type. 1 : Langue, 2 : Other
   */
  public enum CvparserTypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    CvparserTypeEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CvparserTypeEnum fromValue(Integer value) {
      for (CvparserTypeEnum b : CvparserTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CVPARSER_TYPE = "cvparserType";
  private CvparserTypeEnum cvparserType;

  /**
   * Indicates if the skill has a comment. 0 : No, 1 : Yes
   */
  public enum HasCommentEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    HasCommentEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HasCommentEnum fromValue(Integer value) {
      for (HasCommentEnum b : HasCommentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_HAS_COMMENT = "hasComment";
  private HasCommentEnum hasComment;

  public static final String JSON_PROPERTY_EXTRA_DATA = "extraData";
  private List<SpecificData> extraData;

  public SkillDomain() { 
  }

  public SkillDomain id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * id of the object
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public SkillDomain label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Mandatory label of the skill-domain
   * @return label
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLabel(String label) {
    this.label = label;
  }


  public SkillDomain description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Mandatory label of the skill-domain
   * @return description
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public SkillDomain isUnique(IsUniqueEnum isUnique) {
    this.isUnique = isUnique;
    return this;
  }

   /**
   * Indicates if the skill-domain can be defined only once for a given employee. 0 : No, 1 : Yes
   * @return isUnique
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_UNIQUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public IsUniqueEnum getIsUnique() {
    return isUnique;
  }


  @JsonProperty(JSON_PROPERTY_IS_UNIQUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsUnique(IsUniqueEnum isUnique) {
    this.isUnique = isUnique;
  }


  public SkillDomain hasDynamicSkills(HasDynamicSkillsEnum hasDynamicSkills) {
    this.hasDynamicSkills = hasDynamicSkills;
    return this;
  }

   /**
   * Indicates if a skill can be set dynamically for the skill-domain. 0 : No, 1 : Yes
   * @return hasDynamicSkills
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HAS_DYNAMIC_SKILLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public HasDynamicSkillsEnum getHasDynamicSkills() {
    return hasDynamicSkills;
  }


  @JsonProperty(JSON_PROPERTY_HAS_DYNAMIC_SKILLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasDynamicSkills(HasDynamicSkillsEnum hasDynamicSkills) {
    this.hasDynamicSkills = hasDynamicSkills;
  }


  public SkillDomain hasDate(HasDateEnum hasDate) {
    this.hasDate = hasDate;
    return this;
  }

   /**
   * Indicates if a date can be managed for the skills. 0 : No, 1 : Yes manually, 2 : Yes on creation, 3 :  Yes on update
   * @return hasDate
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HAS_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public HasDateEnum getHasDate() {
    return hasDate;
  }


  @JsonProperty(JSON_PROPERTY_HAS_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasDate(HasDateEnum hasDate) {
    this.hasDate = hasDate;
  }


  public SkillDomain entities(List<EntityDataLink> entities) {
    this.entities = entities;
    return this;
  }

  public SkillDomain addEntitiesItem(EntityDataLink entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

   /**
   * Multiple link to entity that own this accounting account. For more informations see the /entities resource
   * @return entities
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<EntityDataLink> getEntities() {
    return entities;
  }


  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntities(List<EntityDataLink> entities) {
    this.entities = entities;
  }


  public SkillDomain order(Integer order) {
    this.order = order;
    return this;
  }

   /**
   * Order of the skill-domain
   * @return order
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOrder() {
    return order;
  }


  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrder(Integer order) {
    this.order = order;
  }


  public SkillDomain cvparserType(CvparserTypeEnum cvparserType) {
    this.cvparserType = cvparserType;
    return this;
  }

   /**
   * CV Parser skill-domain type. 1 : Langue, 2 : Other
   * @return cvparserType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CVPARSER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CvparserTypeEnum getCvparserType() {
    return cvparserType;
  }


  @JsonProperty(JSON_PROPERTY_CVPARSER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCvparserType(CvparserTypeEnum cvparserType) {
    this.cvparserType = cvparserType;
  }


  public SkillDomain hasComment(HasCommentEnum hasComment) {
    this.hasComment = hasComment;
    return this;
  }

   /**
   * Indicates if the skill has a comment. 0 : No, 1 : Yes
   * @return hasComment
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HAS_COMMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public HasCommentEnum getHasComment() {
    return hasComment;
  }


  @JsonProperty(JSON_PROPERTY_HAS_COMMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasComment(HasCommentEnum hasComment) {
    this.hasComment = hasComment;
  }


  public SkillDomain extraData(List<SpecificData> extraData) {
    this.extraData = extraData;
    return this;
  }

  public SkillDomain addExtraDataItem(SpecificData extraDataItem) {
    if (this.extraData == null) {
      this.extraData = new ArrayList<>();
    }
    this.extraData.add(extraDataItem);
    return this;
  }

   /**
   * Extra data of the company. For more information, see Extra data section
   * @return extraData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SpecificData> getExtraData() {
    return extraData;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtraData(List<SpecificData> extraData) {
    this.extraData = extraData;
  }


  /**
   * Return true if this skillDomain object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkillDomain skillDomain = (SkillDomain) o;
    return Objects.equals(this.id, skillDomain.id) &&
        Objects.equals(this.label, skillDomain.label) &&
        Objects.equals(this.description, skillDomain.description) &&
        Objects.equals(this.isUnique, skillDomain.isUnique) &&
        Objects.equals(this.hasDynamicSkills, skillDomain.hasDynamicSkills) &&
        Objects.equals(this.hasDate, skillDomain.hasDate) &&
        Objects.equals(this.entities, skillDomain.entities) &&
        Objects.equals(this.order, skillDomain.order) &&
        Objects.equals(this.cvparserType, skillDomain.cvparserType) &&
        Objects.equals(this.hasComment, skillDomain.hasComment) &&
        Objects.equals(this.extraData, skillDomain.extraData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, description, isUnique, hasDynamicSkills, hasDate, entities, order, cvparserType, hasComment, extraData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkillDomain {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isUnique: ").append(toIndentedString(isUnique)).append("\n");
    sb.append("    hasDynamicSkills: ").append(toIndentedString(hasDynamicSkills)).append("\n");
    sb.append("    hasDate: ").append(toIndentedString(hasDate)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    cvparserType: ").append(toIndentedString(cvparserType)).append("\n");
    sb.append("    hasComment: ").append(toIndentedString(hasComment)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

