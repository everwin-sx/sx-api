/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * Part
 */
@JsonPropertyOrder({
  Part.JSON_PROPERTY_NAME,
  Part.JSON_PROPERTY_SIZE,
  Part.JSON_PROPERTY_INPUT_STREAM,
  Part.JSON_PROPERTY_SUBMITTED_FILE_NAME,
  Part.JSON_PROPERTY_HEADER_NAMES,
  Part.JSON_PROPERTY_CONTENT_TYPE
})
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-21T16:37:39.682984900+02:00[Europe/Paris]")
public class Part {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_SIZE = "size";
  private Long size;

  public static final String JSON_PROPERTY_INPUT_STREAM = "inputStream";
  private Object inputStream;

  public static final String JSON_PROPERTY_SUBMITTED_FILE_NAME = "submittedFileName";
  private String submittedFileName;

  public static final String JSON_PROPERTY_HEADER_NAMES = "headerNames";
  private List<String> headerNames;

  public static final String JSON_PROPERTY_CONTENT_TYPE = "contentType";
  private String contentType;

  public Part() { 
  }

  public Part name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public Part size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(Long size) {
    this.size = size;
  }


  public Part inputStream(Object inputStream) {
    this.inputStream = inputStream;
    return this;
  }

   /**
   * Get inputStream
   * @return inputStream
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getInputStream() {
    return inputStream;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputStream(Object inputStream) {
    this.inputStream = inputStream;
  }


  public Part submittedFileName(String submittedFileName) {
    this.submittedFileName = submittedFileName;
    return this;
  }

   /**
   * Get submittedFileName
   * @return submittedFileName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBMITTED_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubmittedFileName() {
    return submittedFileName;
  }


  @JsonProperty(JSON_PROPERTY_SUBMITTED_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubmittedFileName(String submittedFileName) {
    this.submittedFileName = submittedFileName;
  }


  public Part headerNames(List<String> headerNames) {
    this.headerNames = headerNames;
    return this;
  }

  public Part addHeaderNamesItem(String headerNamesItem) {
    if (this.headerNames == null) {
      this.headerNames = new ArrayList<>();
    }
    this.headerNames.add(headerNamesItem);
    return this;
  }

   /**
   * Get headerNames
   * @return headerNames
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEADER_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getHeaderNames() {
    return headerNames;
  }


  @JsonProperty(JSON_PROPERTY_HEADER_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeaderNames(List<String> headerNames) {
    this.headerNames = headerNames;
  }


  public Part contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * Get contentType
   * @return contentType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContentType() {
    return contentType;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  /**
   * Return true if this Part object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Part part = (Part) o;
    return Objects.equals(this.name, part.name) &&
        Objects.equals(this.size, part.size) &&
        Objects.equals(this.inputStream, part.inputStream) &&
        Objects.equals(this.submittedFileName, part.submittedFileName) &&
        Objects.equals(this.headerNames, part.headerNames) &&
        Objects.equals(this.contentType, part.contentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, size, inputStream, submittedFileName, headerNames, contentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Part {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    inputStream: ").append(toIndentedString(inputStream)).append("\n");
    sb.append("    submittedFileName: ").append(toIndentedString(submittedFileName)).append("\n");
    sb.append("    headerNames: ").append(toIndentedString(headerNames)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

