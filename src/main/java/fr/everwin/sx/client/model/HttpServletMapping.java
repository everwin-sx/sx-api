/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import fr.everwin.sx.client.JSON;


/**
 * HttpServletMapping
 */
@JsonPropertyOrder({
  HttpServletMapping.JSON_PROPERTY_PATTERN,
  HttpServletMapping.JSON_PROPERTY_SERVLET_NAME,
  HttpServletMapping.JSON_PROPERTY_MAPPING_MATCH,
  HttpServletMapping.JSON_PROPERTY_MATCH_VALUE
})
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-21T16:37:39.682984900+02:00[Europe/Paris]")
public class HttpServletMapping {
  public static final String JSON_PROPERTY_PATTERN = "pattern";
  private String pattern;

  public static final String JSON_PROPERTY_SERVLET_NAME = "servletName";
  private String servletName;

  /**
   * Gets or Sets mappingMatch
   */
  public enum MappingMatchEnum {
    CONTEXT_ROOT("CONTEXT_ROOT"),
    
    DEFAULT("DEFAULT"),
    
    EXACT("EXACT"),
    
    EXTENSION("EXTENSION"),
    
    PATH("PATH");

    private String value;

    MappingMatchEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MappingMatchEnum fromValue(String value) {
      for (MappingMatchEnum b : MappingMatchEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MAPPING_MATCH = "mappingMatch";
  private MappingMatchEnum mappingMatch;

  public static final String JSON_PROPERTY_MATCH_VALUE = "matchValue";
  private String matchValue;

  public HttpServletMapping() { 
  }

  public HttpServletMapping pattern(String pattern) {
    this.pattern = pattern;
    return this;
  }

   /**
   * Get pattern
   * @return pattern
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPattern() {
    return pattern;
  }


  @JsonProperty(JSON_PROPERTY_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPattern(String pattern) {
    this.pattern = pattern;
  }


  public HttpServletMapping servletName(String servletName) {
    this.servletName = servletName;
    return this;
  }

   /**
   * Get servletName
   * @return servletName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVLET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getServletName() {
    return servletName;
  }


  @JsonProperty(JSON_PROPERTY_SERVLET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServletName(String servletName) {
    this.servletName = servletName;
  }


  public HttpServletMapping mappingMatch(MappingMatchEnum mappingMatch) {
    this.mappingMatch = mappingMatch;
    return this;
  }

   /**
   * Get mappingMatch
   * @return mappingMatch
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAPPING_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MappingMatchEnum getMappingMatch() {
    return mappingMatch;
  }


  @JsonProperty(JSON_PROPERTY_MAPPING_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMappingMatch(MappingMatchEnum mappingMatch) {
    this.mappingMatch = mappingMatch;
  }


  public HttpServletMapping matchValue(String matchValue) {
    this.matchValue = matchValue;
    return this;
  }

   /**
   * Get matchValue
   * @return matchValue
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MATCH_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMatchValue() {
    return matchValue;
  }


  @JsonProperty(JSON_PROPERTY_MATCH_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMatchValue(String matchValue) {
    this.matchValue = matchValue;
  }


  /**
   * Return true if this HttpServletMapping object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpServletMapping httpServletMapping = (HttpServletMapping) o;
    return Objects.equals(this.pattern, httpServletMapping.pattern) &&
        Objects.equals(this.servletName, httpServletMapping.servletName) &&
        Objects.equals(this.mappingMatch, httpServletMapping.mappingMatch) &&
        Objects.equals(this.matchValue, httpServletMapping.matchValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pattern, servletName, mappingMatch, matchValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpServletMapping {\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("    servletName: ").append(toIndentedString(servletName)).append("\n");
    sb.append("    mappingMatch: ").append(toIndentedString(mappingMatch)).append("\n");
    sb.append("    matchValue: ").append(toIndentedString(matchValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

