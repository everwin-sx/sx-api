/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;


/**
 * ServletContextClassLoaderParentUnnamedModule
 */
@JsonPropertyOrder({
  ServletContextClassLoaderParentUnnamedModule.JSON_PROPERTY_NAME,
  ServletContextClassLoaderParentUnnamedModule.JSON_PROPERTY_DESCRIPTOR,
  ServletContextClassLoaderParentUnnamedModule.JSON_PROPERTY_NAMED,
  ServletContextClassLoaderParentUnnamedModule.JSON_PROPERTY_ANNOTATIONS,
  ServletContextClassLoaderParentUnnamedModule.JSON_PROPERTY_DECLARED_ANNOTATIONS,
  ServletContextClassLoaderParentUnnamedModule.JSON_PROPERTY_PACKAGES,
  ServletContextClassLoaderParentUnnamedModule.JSON_PROPERTY_NATIVE_ACCESS_ENABLED,
  ServletContextClassLoaderParentUnnamedModule.JSON_PROPERTY_LAYER
})
@JsonTypeName("ServletContext_classLoader_parent_unnamedModule")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-21T16:37:39.682984900+02:00[Europe/Paris]")
public class ServletContextClassLoaderParentUnnamedModule {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTOR = "descriptor";
  private ServletContextClassLoaderParentUnnamedModuleDescriptor descriptor;

  public static final String JSON_PROPERTY_NAMED = "named";
  private Boolean named;

  public static final String JSON_PROPERTY_ANNOTATIONS = "annotations";
  private List<Object> annotations;

  public static final String JSON_PROPERTY_DECLARED_ANNOTATIONS = "declaredAnnotations";
  private List<Object> declaredAnnotations;

  public static final String JSON_PROPERTY_PACKAGES = "packages";
  private Set<String> packages;

  public static final String JSON_PROPERTY_NATIVE_ACCESS_ENABLED = "nativeAccessEnabled";
  private Boolean nativeAccessEnabled;

  public static final String JSON_PROPERTY_LAYER = "layer";
  private Object layer;

  public ServletContextClassLoaderParentUnnamedModule() { 
  }

  public ServletContextClassLoaderParentUnnamedModule name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ServletContextClassLoaderParentUnnamedModule descriptor(ServletContextClassLoaderParentUnnamedModuleDescriptor descriptor) {
    this.descriptor = descriptor;
    return this;
  }

   /**
   * Get descriptor
   * @return descriptor
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ServletContextClassLoaderParentUnnamedModuleDescriptor getDescriptor() {
    return descriptor;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescriptor(ServletContextClassLoaderParentUnnamedModuleDescriptor descriptor) {
    this.descriptor = descriptor;
  }


  public ServletContextClassLoaderParentUnnamedModule named(Boolean named) {
    this.named = named;
    return this;
  }

   /**
   * Get named
   * @return named
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAMED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getNamed() {
    return named;
  }


  @JsonProperty(JSON_PROPERTY_NAMED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNamed(Boolean named) {
    this.named = named;
  }


  public ServletContextClassLoaderParentUnnamedModule annotations(List<Object> annotations) {
    this.annotations = annotations;
    return this;
  }

  public ServletContextClassLoaderParentUnnamedModule addAnnotationsItem(Object annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<>();
    }
    this.annotations.add(annotationsItem);
    return this;
  }

   /**
   * Get annotations
   * @return annotations
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getAnnotations() {
    return annotations;
  }


  @JsonProperty(JSON_PROPERTY_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnnotations(List<Object> annotations) {
    this.annotations = annotations;
  }


  public ServletContextClassLoaderParentUnnamedModule declaredAnnotations(List<Object> declaredAnnotations) {
    this.declaredAnnotations = declaredAnnotations;
    return this;
  }

  public ServletContextClassLoaderParentUnnamedModule addDeclaredAnnotationsItem(Object declaredAnnotationsItem) {
    if (this.declaredAnnotations == null) {
      this.declaredAnnotations = new ArrayList<>();
    }
    this.declaredAnnotations.add(declaredAnnotationsItem);
    return this;
  }

   /**
   * Get declaredAnnotations
   * @return declaredAnnotations
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DECLARED_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getDeclaredAnnotations() {
    return declaredAnnotations;
  }


  @JsonProperty(JSON_PROPERTY_DECLARED_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeclaredAnnotations(List<Object> declaredAnnotations) {
    this.declaredAnnotations = declaredAnnotations;
  }


  public ServletContextClassLoaderParentUnnamedModule packages(Set<String> packages) {
    this.packages = packages;
    return this;
  }

  public ServletContextClassLoaderParentUnnamedModule addPackagesItem(String packagesItem) {
    if (this.packages == null) {
      this.packages = new LinkedHashSet<>();
    }
    this.packages.add(packagesItem);
    return this;
  }

   /**
   * Get packages
   * @return packages
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PACKAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getPackages() {
    return packages;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_PACKAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPackages(Set<String> packages) {
    this.packages = packages;
  }


  public ServletContextClassLoaderParentUnnamedModule nativeAccessEnabled(Boolean nativeAccessEnabled) {
    this.nativeAccessEnabled = nativeAccessEnabled;
    return this;
  }

   /**
   * Get nativeAccessEnabled
   * @return nativeAccessEnabled
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NATIVE_ACCESS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getNativeAccessEnabled() {
    return nativeAccessEnabled;
  }


  @JsonProperty(JSON_PROPERTY_NATIVE_ACCESS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNativeAccessEnabled(Boolean nativeAccessEnabled) {
    this.nativeAccessEnabled = nativeAccessEnabled;
  }


  public ServletContextClassLoaderParentUnnamedModule layer(Object layer) {
    this.layer = layer;
    return this;
  }

   /**
   * Get layer
   * @return layer
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAYER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getLayer() {
    return layer;
  }


  @JsonProperty(JSON_PROPERTY_LAYER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLayer(Object layer) {
    this.layer = layer;
  }


  /**
   * Return true if this ServletContext_classLoader_parent_unnamedModule object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServletContextClassLoaderParentUnnamedModule servletContextClassLoaderParentUnnamedModule = (ServletContextClassLoaderParentUnnamedModule) o;
    return Objects.equals(this.name, servletContextClassLoaderParentUnnamedModule.name) &&
        Objects.equals(this.descriptor, servletContextClassLoaderParentUnnamedModule.descriptor) &&
        Objects.equals(this.named, servletContextClassLoaderParentUnnamedModule.named) &&
        Objects.equals(this.annotations, servletContextClassLoaderParentUnnamedModule.annotations) &&
        Objects.equals(this.declaredAnnotations, servletContextClassLoaderParentUnnamedModule.declaredAnnotations) &&
        Objects.equals(this.packages, servletContextClassLoaderParentUnnamedModule.packages) &&
        Objects.equals(this.nativeAccessEnabled, servletContextClassLoaderParentUnnamedModule.nativeAccessEnabled) &&
        Objects.equals(this.layer, servletContextClassLoaderParentUnnamedModule.layer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, descriptor, named, annotations, declaredAnnotations, packages, nativeAccessEnabled, layer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServletContextClassLoaderParentUnnamedModule {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    descriptor: ").append(toIndentedString(descriptor)).append("\n");
    sb.append("    named: ").append(toIndentedString(named)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    declaredAnnotations: ").append(toIndentedString(declaredAnnotations)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    nativeAccessEnabled: ").append(toIndentedString(nativeAccessEnabled)).append("\n");
    sb.append("    layer: ").append(toIndentedString(layer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

