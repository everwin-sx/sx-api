/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import fr.everwin.sx.client.model.DataLink;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import fr.everwin.sx.client.JSON;


/**
 * ProjectLineOtherRealInvoicing
 */
@JsonPropertyOrder({
  ProjectLineOtherRealInvoicing.JSON_PROPERTY_PIECE,
  ProjectLineOtherRealInvoicing.JSON_PROPERTY_TOTAL,
  ProjectLineOtherRealInvoicing.JSON_PROPERTY_BONUS_MALUS
})
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-22T08:24:46.022483900+02:00[Europe/Paris]")
public class ProjectLineOtherRealInvoicing {
  public static final String JSON_PROPERTY_PIECE = "piece";
  private DataLink piece;

  public static final String JSON_PROPERTY_TOTAL = "total";
  private Double total;

  public static final String JSON_PROPERTY_BONUS_MALUS = "bonusMalus";
  private Double bonusMalus;

  public ProjectLineOtherRealInvoicing() { 
  }

  public ProjectLineOtherRealInvoicing piece(DataLink piece) {
    this.piece = piece;
    return this;
  }

   /**
   * Get piece
   * @return piece
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PIECE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DataLink getPiece() {
    return piece;
  }


  @JsonProperty(JSON_PROPERTY_PIECE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPiece(DataLink piece) {
    this.piece = piece;
  }


  public ProjectLineOtherRealInvoicing total(Double total) {
    this.total = total;
    return this;
  }

   /**
   * Invoicing total
   * @return total
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getTotal() {
    return total;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotal(Double total) {
    this.total = total;
  }


  public ProjectLineOtherRealInvoicing bonusMalus(Double bonusMalus) {
    this.bonusMalus = bonusMalus;
    return this;
  }

   /**
   * Invoicing bonus / malus
   * @return bonusMalus
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BONUS_MALUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getBonusMalus() {
    return bonusMalus;
  }


  @JsonProperty(JSON_PROPERTY_BONUS_MALUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBonusMalus(Double bonusMalus) {
    this.bonusMalus = bonusMalus;
  }


  /**
   * Return true if this ProjectLineOtherRealInvoicing object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectLineOtherRealInvoicing projectLineOtherRealInvoicing = (ProjectLineOtherRealInvoicing) o;
    return Objects.equals(this.piece, projectLineOtherRealInvoicing.piece) &&
        Objects.equals(this.total, projectLineOtherRealInvoicing.total) &&
        Objects.equals(this.bonusMalus, projectLineOtherRealInvoicing.bonusMalus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(piece, total, bonusMalus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectLineOtherRealInvoicing {\n");
    sb.append("    piece: ").append(toIndentedString(piece)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    bonusMalus: ").append(toIndentedString(bonusMalus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

