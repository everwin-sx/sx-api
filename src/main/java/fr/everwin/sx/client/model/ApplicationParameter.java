/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.02.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.util.Objects;


/**
 * ApplicationParameter
 */
@JsonPropertyOrder({
  ApplicationParameter.JSON_PROPERTY_NAME,
  ApplicationParameter.JSON_PROPERTY_STRING_VALUE,
  ApplicationParameter.JSON_PROPERTY_FLOAT_VALUE
})
@JsonTypeName("application-parameter")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-10-06T08:58:20.555636300+02:00[Europe/Paris]")
public class ApplicationParameter {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_STRING_VALUE = "stringValue";
  private String stringValue;

  public static final String JSON_PROPERTY_FLOAT_VALUE = "floatValue";
  private Double floatValue;

  public ApplicationParameter() { 
  }

  public ApplicationParameter name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the application parameter
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ApplicationParameter stringValue(String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

   /**
   * String-typed value of the parameter
   * @return stringValue
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STRING_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStringValue() {
    return stringValue;
  }


  @JsonProperty(JSON_PROPERTY_STRING_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStringValue(String stringValue) {
    this.stringValue = stringValue;
  }


  public ApplicationParameter floatValue(Double floatValue) {
    this.floatValue = floatValue;
    return this;
  }

   /**
   * Float-typed value of the parameter
   * @return floatValue
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FLOAT_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getFloatValue() {
    return floatValue;
  }


  @JsonProperty(JSON_PROPERTY_FLOAT_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFloatValue(Double floatValue) {
    this.floatValue = floatValue;
  }


  /**
   * Return true if this application-parameter object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationParameter applicationParameter = (ApplicationParameter) o;
    return Objects.equals(this.name, applicationParameter.name) &&
        Objects.equals(this.stringValue, applicationParameter.stringValue) &&
        Objects.equals(this.floatValue, applicationParameter.floatValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, stringValue, floatValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationParameter {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    stringValue: ").append(toIndentedString(stringValue)).append("\n");
    sb.append("    floatValue: ").append(toIndentedString(floatValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

