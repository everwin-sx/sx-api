/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import fr.everwin.sx.client.model.ServletContextClassLoaderParent;
import fr.everwin.sx.client.model.ServletContextClassLoaderParentDefinedPackagesInner;
import fr.everwin.sx.client.model.ServletContextClassLoaderParentUnnamedModule;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import fr.everwin.sx.client.JSON;


/**
 * ServletContextClassLoader
 */
@JsonPropertyOrder({
  ServletContextClassLoader.JSON_PROPERTY_NAME,
  ServletContextClassLoader.JSON_PROPERTY_REGISTERED_AS_PARALLEL_CAPABLE,
  ServletContextClassLoader.JSON_PROPERTY_PARENT,
  ServletContextClassLoader.JSON_PROPERTY_UNNAMED_MODULE,
  ServletContextClassLoader.JSON_PROPERTY_DEFINED_PACKAGES,
  ServletContextClassLoader.JSON_PROPERTY_DEFAULT_ASSERTION_STATUS
})
@JsonTypeName("ServletContext_classLoader")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-21T16:37:39.682984900+02:00[Europe/Paris]")
public class ServletContextClassLoader {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_REGISTERED_AS_PARALLEL_CAPABLE = "registeredAsParallelCapable";
  private Boolean registeredAsParallelCapable;

  public static final String JSON_PROPERTY_PARENT = "parent";
  private ServletContextClassLoaderParent parent;

  public static final String JSON_PROPERTY_UNNAMED_MODULE = "unnamedModule";
  private ServletContextClassLoaderParentUnnamedModule unnamedModule;

  public static final String JSON_PROPERTY_DEFINED_PACKAGES = "definedPackages";
  private List<ServletContextClassLoaderParentDefinedPackagesInner> definedPackages;

  public static final String JSON_PROPERTY_DEFAULT_ASSERTION_STATUS = "defaultAssertionStatus";
  private Boolean defaultAssertionStatus;

  public ServletContextClassLoader() { 
  }

  public ServletContextClassLoader name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ServletContextClassLoader registeredAsParallelCapable(Boolean registeredAsParallelCapable) {
    this.registeredAsParallelCapable = registeredAsParallelCapable;
    return this;
  }

   /**
   * Get registeredAsParallelCapable
   * @return registeredAsParallelCapable
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REGISTERED_AS_PARALLEL_CAPABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRegisteredAsParallelCapable() {
    return registeredAsParallelCapable;
  }


  @JsonProperty(JSON_PROPERTY_REGISTERED_AS_PARALLEL_CAPABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegisteredAsParallelCapable(Boolean registeredAsParallelCapable) {
    this.registeredAsParallelCapable = registeredAsParallelCapable;
  }


  public ServletContextClassLoader parent(ServletContextClassLoaderParent parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ServletContextClassLoaderParent getParent() {
    return parent;
  }


  @JsonProperty(JSON_PROPERTY_PARENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParent(ServletContextClassLoaderParent parent) {
    this.parent = parent;
  }


  public ServletContextClassLoader unnamedModule(ServletContextClassLoaderParentUnnamedModule unnamedModule) {
    this.unnamedModule = unnamedModule;
    return this;
  }

   /**
   * Get unnamedModule
   * @return unnamedModule
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNNAMED_MODULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ServletContextClassLoaderParentUnnamedModule getUnnamedModule() {
    return unnamedModule;
  }


  @JsonProperty(JSON_PROPERTY_UNNAMED_MODULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnnamedModule(ServletContextClassLoaderParentUnnamedModule unnamedModule) {
    this.unnamedModule = unnamedModule;
  }


  public ServletContextClassLoader definedPackages(List<ServletContextClassLoaderParentDefinedPackagesInner> definedPackages) {
    this.definedPackages = definedPackages;
    return this;
  }

  public ServletContextClassLoader addDefinedPackagesItem(ServletContextClassLoaderParentDefinedPackagesInner definedPackagesItem) {
    if (this.definedPackages == null) {
      this.definedPackages = new ArrayList<>();
    }
    this.definedPackages.add(definedPackagesItem);
    return this;
  }

   /**
   * Get definedPackages
   * @return definedPackages
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFINED_PACKAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ServletContextClassLoaderParentDefinedPackagesInner> getDefinedPackages() {
    return definedPackages;
  }


  @JsonProperty(JSON_PROPERTY_DEFINED_PACKAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefinedPackages(List<ServletContextClassLoaderParentDefinedPackagesInner> definedPackages) {
    this.definedPackages = definedPackages;
  }


  public ServletContextClassLoader defaultAssertionStatus(Boolean defaultAssertionStatus) {
    this.defaultAssertionStatus = defaultAssertionStatus;
    return this;
  }

   /**
   * Get defaultAssertionStatus
   * @return defaultAssertionStatus
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_ASSERTION_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDefaultAssertionStatus() {
    return defaultAssertionStatus;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_ASSERTION_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultAssertionStatus(Boolean defaultAssertionStatus) {
    this.defaultAssertionStatus = defaultAssertionStatus;
  }


  /**
   * Return true if this ServletContext_classLoader object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServletContextClassLoader servletContextClassLoader = (ServletContextClassLoader) o;
    return Objects.equals(this.name, servletContextClassLoader.name) &&
        Objects.equals(this.registeredAsParallelCapable, servletContextClassLoader.registeredAsParallelCapable) &&
        Objects.equals(this.parent, servletContextClassLoader.parent) &&
        Objects.equals(this.unnamedModule, servletContextClassLoader.unnamedModule) &&
        Objects.equals(this.definedPackages, servletContextClassLoader.definedPackages) &&
        Objects.equals(this.defaultAssertionStatus, servletContextClassLoader.defaultAssertionStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, registeredAsParallelCapable, parent, unnamedModule, definedPackages, defaultAssertionStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServletContextClassLoader {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    registeredAsParallelCapable: ").append(toIndentedString(registeredAsParallelCapable)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    unnamedModule: ").append(toIndentedString(unnamedModule)).append("\n");
    sb.append("    definedPackages: ").append(toIndentedString(definedPackages)).append("\n");
    sb.append("    defaultAssertionStatus: ").append(toIndentedString(defaultAssertionStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

