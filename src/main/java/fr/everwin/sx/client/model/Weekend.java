/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import fr.everwin.sx.client.model.EntityDataLink;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import fr.everwin.sx.client.JSON;


/**
 * Weekend
 */
@JsonPropertyOrder({
  Weekend.JSON_PROPERTY_ID,
  Weekend.JSON_PROPERTY_ENTITIES,
  Weekend.JSON_PROPERTY_MONDAY,
  Weekend.JSON_PROPERTY_TUESDAY,
  Weekend.JSON_PROPERTY_WEDNESDAY,
  Weekend.JSON_PROPERTY_THURSDAY,
  Weekend.JSON_PROPERTY_FRIDAY,
  Weekend.JSON_PROPERTY_SATURDAY,
  Weekend.JSON_PROPERTY_SUNDAY
})
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-22T08:24:46.022483900+02:00[Europe/Paris]")
public class Weekend {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_ENTITIES = "entities";
  private List<EntityDataLink> entities;

  /**
   * Indicates if monday is a week-end day. 0 : No, 1: Yes
   */
  public enum MondayEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    MondayEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MondayEnum fromValue(Integer value) {
      for (MondayEnum b : MondayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MONDAY = "monday";
  private MondayEnum monday;

  /**
   * Indicates if tuesday is a week-end day. 0 : No, 1: Yes
   */
  public enum TuesdayEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    TuesdayEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TuesdayEnum fromValue(Integer value) {
      for (TuesdayEnum b : TuesdayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TUESDAY = "tuesday";
  private TuesdayEnum tuesday;

  /**
   * Indicates if wednesday is a week-end day. 0 : No, 1: Yes
   */
  public enum WednesdayEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    WednesdayEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static WednesdayEnum fromValue(Integer value) {
      for (WednesdayEnum b : WednesdayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_WEDNESDAY = "wednesday";
  private WednesdayEnum wednesday;

  /**
   * Indicates if thursday is a week-end day. 0 : No, 1: Yes
   */
  public enum ThursdayEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    ThursdayEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ThursdayEnum fromValue(Integer value) {
      for (ThursdayEnum b : ThursdayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_THURSDAY = "thursday";
  private ThursdayEnum thursday;

  /**
   * Indicates if friday is a week-end day. 0 : No, 1: Yes
   */
  public enum FridayEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    FridayEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FridayEnum fromValue(Integer value) {
      for (FridayEnum b : FridayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FRIDAY = "friday";
  private FridayEnum friday;

  /**
   * Indicates if saturday is a week-end day. 0 : No, 1: Yes
   */
  public enum SaturdayEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    SaturdayEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SaturdayEnum fromValue(Integer value) {
      for (SaturdayEnum b : SaturdayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SATURDAY = "saturday";
  private SaturdayEnum saturday;

  /**
   * Indicates if sunday is a week-end day. 0 : No, 1: Yes
   */
  public enum SundayEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    SundayEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SundayEnum fromValue(Integer value) {
      for (SundayEnum b : SundayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SUNDAY = "sunday";
  private SundayEnum sunday;

  public Weekend() { 
  }

  public Weekend id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * id of the object
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public Weekend entities(List<EntityDataLink> entities) {
    this.entities = entities;
    return this;
  }

  public Weekend addEntitiesItem(EntityDataLink entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

   /**
   * Link to entities who use this weekends days. For more information see the /entities resource
   * @return entities
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<EntityDataLink> getEntities() {
    return entities;
  }


  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntities(List<EntityDataLink> entities) {
    this.entities = entities;
  }


  public Weekend monday(MondayEnum monday) {
    this.monday = monday;
    return this;
  }

   /**
   * Indicates if monday is a week-end day. 0 : No, 1: Yes
   * @return monday
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MONDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MondayEnum getMonday() {
    return monday;
  }


  @JsonProperty(JSON_PROPERTY_MONDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMonday(MondayEnum monday) {
    this.monday = monday;
  }


  public Weekend tuesday(TuesdayEnum tuesday) {
    this.tuesday = tuesday;
    return this;
  }

   /**
   * Indicates if tuesday is a week-end day. 0 : No, 1: Yes
   * @return tuesday
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TUESDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TuesdayEnum getTuesday() {
    return tuesday;
  }


  @JsonProperty(JSON_PROPERTY_TUESDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTuesday(TuesdayEnum tuesday) {
    this.tuesday = tuesday;
  }


  public Weekend wednesday(WednesdayEnum wednesday) {
    this.wednesday = wednesday;
    return this;
  }

   /**
   * Indicates if wednesday is a week-end day. 0 : No, 1: Yes
   * @return wednesday
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEDNESDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WednesdayEnum getWednesday() {
    return wednesday;
  }


  @JsonProperty(JSON_PROPERTY_WEDNESDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWednesday(WednesdayEnum wednesday) {
    this.wednesday = wednesday;
  }


  public Weekend thursday(ThursdayEnum thursday) {
    this.thursday = thursday;
    return this;
  }

   /**
   * Indicates if thursday is a week-end day. 0 : No, 1: Yes
   * @return thursday
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THURSDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ThursdayEnum getThursday() {
    return thursday;
  }


  @JsonProperty(JSON_PROPERTY_THURSDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThursday(ThursdayEnum thursday) {
    this.thursday = thursday;
  }


  public Weekend friday(FridayEnum friday) {
    this.friday = friday;
    return this;
  }

   /**
   * Indicates if friday is a week-end day. 0 : No, 1: Yes
   * @return friday
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FRIDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FridayEnum getFriday() {
    return friday;
  }


  @JsonProperty(JSON_PROPERTY_FRIDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFriday(FridayEnum friday) {
    this.friday = friday;
  }


  public Weekend saturday(SaturdayEnum saturday) {
    this.saturday = saturday;
    return this;
  }

   /**
   * Indicates if saturday is a week-end day. 0 : No, 1: Yes
   * @return saturday
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SATURDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SaturdayEnum getSaturday() {
    return saturday;
  }


  @JsonProperty(JSON_PROPERTY_SATURDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSaturday(SaturdayEnum saturday) {
    this.saturday = saturday;
  }


  public Weekend sunday(SundayEnum sunday) {
    this.sunday = sunday;
    return this;
  }

   /**
   * Indicates if sunday is a week-end day. 0 : No, 1: Yes
   * @return sunday
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUNDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SundayEnum getSunday() {
    return sunday;
  }


  @JsonProperty(JSON_PROPERTY_SUNDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSunday(SundayEnum sunday) {
    this.sunday = sunday;
  }


  /**
   * Return true if this Weekend object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Weekend weekend = (Weekend) o;
    return Objects.equals(this.id, weekend.id) &&
        Objects.equals(this.entities, weekend.entities) &&
        Objects.equals(this.monday, weekend.monday) &&
        Objects.equals(this.tuesday, weekend.tuesday) &&
        Objects.equals(this.wednesday, weekend.wednesday) &&
        Objects.equals(this.thursday, weekend.thursday) &&
        Objects.equals(this.friday, weekend.friday) &&
        Objects.equals(this.saturday, weekend.saturday) &&
        Objects.equals(this.sunday, weekend.sunday);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, entities, monday, tuesday, wednesday, thursday, friday, saturday, sunday);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Weekend {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    monday: ").append(toIndentedString(monday)).append("\n");
    sb.append("    tuesday: ").append(toIndentedString(tuesday)).append("\n");
    sb.append("    wednesday: ").append(toIndentedString(wednesday)).append("\n");
    sb.append("    thursday: ").append(toIndentedString(thursday)).append("\n");
    sb.append("    friday: ").append(toIndentedString(friday)).append("\n");
    sb.append("    saturday: ").append(toIndentedString(saturday)).append("\n");
    sb.append("    sunday: ").append(toIndentedString(sunday)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

