/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.02.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * SettlementType
 */
@JsonPropertyOrder({
  SettlementType.JSON_PROPERTY_ID,
  SettlementType.JSON_PROPERTY_LABEL,
  SettlementType.JSON_PROPERTY_CODE,
  SettlementType.JSON_PROPERTY_ACCOUNTING_CODE,
  SettlementType.JSON_PROPERTY_ENTITIES,
  SettlementType.JSON_PROPERTY_VISIBILITY,
  SettlementType.JSON_PROPERTY_SEPA_DIRECT_DEBIT,
  SettlementType.JSON_PROPERTY_BY_DEFAULT,
  SettlementType.JSON_PROPERTY_EXTRA_DATA
})
@JsonTypeName("settlementType")
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-10-06T08:58:20.555636300+02:00[Europe/Paris]")
public class SettlementType {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_ACCOUNTING_CODE = "accountingCode";
  private String accountingCode;

  public static final String JSON_PROPERTY_ENTITIES = "entities";
  private List<EntityDataLink> entities;

  /**
   * Indicates the visibility of the settlement type. 0 : Active, 10 : Unavailable
   */
  public enum VisibilityEnum {
    NUMBER_0(0),
    
    NUMBER_10(10);

    private Integer value;

    VisibilityEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VisibilityEnum fromValue(Integer value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VISIBILITY = "visibility";
  private VisibilityEnum visibility;

  /**
   * Indicates the SEPA Direct Debit of the settlement type. 0 : No, 1 : yes
   */
  public enum SepaDirectDebitEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    SepaDirectDebitEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SepaDirectDebitEnum fromValue(Integer value) {
      for (SepaDirectDebitEnum b : SepaDirectDebitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SEPA_DIRECT_DEBIT = "sepaDirectDebit";
  private SepaDirectDebitEnum sepaDirectDebit;

  /**
   * Indicates if the settlement type is the default. 0 : No, 1 : yes
   */
  public enum ByDefaultEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    ByDefaultEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ByDefaultEnum fromValue(Integer value) {
      for (ByDefaultEnum b : ByDefaultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BY_DEFAULT = "byDefault";
  private ByDefaultEnum byDefault;

  public static final String JSON_PROPERTY_EXTRA_DATA = "extraData";
  private List<SpecificData> extraData;

  public SettlementType() { 
  }

  public SettlementType id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * id of the object
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public SettlementType label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Label of the settlement type
   * @return label
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLabel(String label) {
    this.label = label;
  }


  public SettlementType code(String code) {
    this.code = code;
    return this;
  }

   /**
   * code of the settlement type
   * @return code
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(String code) {
    this.code = code;
  }


  public SettlementType accountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
    return this;
  }

   /**
   * Accounting code of the settlement type
   * @return accountingCode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNTING_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccountingCode() {
    return accountingCode;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNTING_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
  }


  public SettlementType entities(List<EntityDataLink> entities) {
    this.entities = entities;
    return this;
  }

  public SettlementType addEntitiesItem(EntityDataLink entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

   /**
   * Multiple link to entities that own this settlement type. For more informations see the /entities resource
   * @return entities
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<EntityDataLink> getEntities() {
    return entities;
  }


  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntities(List<EntityDataLink> entities) {
    this.entities = entities;
  }


  public SettlementType visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

   /**
   * Indicates the visibility of the settlement type. 0 : Active, 10 : Unavailable
   * @return visibility
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VisibilityEnum getVisibility() {
    return visibility;
  }


  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }


  public SettlementType sepaDirectDebit(SepaDirectDebitEnum sepaDirectDebit) {
    this.sepaDirectDebit = sepaDirectDebit;
    return this;
  }

   /**
   * Indicates the SEPA Direct Debit of the settlement type. 0 : No, 1 : yes
   * @return sepaDirectDebit
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEPA_DIRECT_DEBIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SepaDirectDebitEnum getSepaDirectDebit() {
    return sepaDirectDebit;
  }


  @JsonProperty(JSON_PROPERTY_SEPA_DIRECT_DEBIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSepaDirectDebit(SepaDirectDebitEnum sepaDirectDebit) {
    this.sepaDirectDebit = sepaDirectDebit;
  }


  public SettlementType byDefault(ByDefaultEnum byDefault) {
    this.byDefault = byDefault;
    return this;
  }

   /**
   * Indicates if the settlement type is the default. 0 : No, 1 : yes
   * @return byDefault
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BY_DEFAULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ByDefaultEnum getByDefault() {
    return byDefault;
  }


  @JsonProperty(JSON_PROPERTY_BY_DEFAULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setByDefault(ByDefaultEnum byDefault) {
    this.byDefault = byDefault;
  }


  public SettlementType extraData(List<SpecificData> extraData) {
    this.extraData = extraData;
    return this;
  }

  public SettlementType addExtraDataItem(SpecificData extraDataItem) {
    if (this.extraData == null) {
      this.extraData = new ArrayList<>();
    }
    this.extraData.add(extraDataItem);
    return this;
  }

   /**
   * Extra data of the lead event. For more information, see Extra data section
   * @return extraData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SpecificData> getExtraData() {
    return extraData;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtraData(List<SpecificData> extraData) {
    this.extraData = extraData;
  }


  /**
   * Return true if this settlementType object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettlementType settlementType = (SettlementType) o;
    return Objects.equals(this.id, settlementType.id) &&
        Objects.equals(this.label, settlementType.label) &&
        Objects.equals(this.code, settlementType.code) &&
        Objects.equals(this.accountingCode, settlementType.accountingCode) &&
        Objects.equals(this.entities, settlementType.entities) &&
        Objects.equals(this.visibility, settlementType.visibility) &&
        Objects.equals(this.sepaDirectDebit, settlementType.sepaDirectDebit) &&
        Objects.equals(this.byDefault, settlementType.byDefault) &&
        Objects.equals(this.extraData, settlementType.extraData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, code, accountingCode, entities, visibility, sepaDirectDebit, byDefault, extraData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettlementType {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    accountingCode: ").append(toIndentedString(accountingCode)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    sepaDirectDebit: ").append(toIndentedString(sepaDirectDebit)).append("\n");
    sb.append("    byDefault: ").append(toIndentedString(byDefault)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

