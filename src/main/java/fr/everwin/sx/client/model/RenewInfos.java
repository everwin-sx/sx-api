/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import fr.everwin.sx.client.JSON;


/**
 * renewinfo
 */
@JsonPropertyOrder({
  RenewInfos.JSON_PROPERTY_INDEX,
  RenewInfos.JSON_PROPERTY_START_DATE,
  RenewInfos.JSON_PROPERTY_END_DATE
})
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-22T08:24:46.022483900+02:00[Europe/Paris]")
public class RenewInfos {
  public static final String JSON_PROPERTY_INDEX = "index";
  private Double index;

  public static final String JSON_PROPERTY_START_DATE = "startDate";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime startDate;

  public static final String JSON_PROPERTY_END_DATE = "endDate";
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss", timezone = "CET")
  private java.time.LocalDateTime endDate;

  public RenewInfos() { 
  }

  public RenewInfos index(Double index) {
    this.index = index;
    return this;
  }

   /**
   * Renew Index. Mandatory
   * @return index
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getIndex() {
    return index;
  }


  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIndex(Double index) {
    this.index = index;
  }


  public RenewInfos startDate(java.time.LocalDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Renew start date. Mandatory
   * @return startDate
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public java.time.LocalDateTime getStartDate() {
    return startDate;
  }


  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartDate(java.time.LocalDateTime startDate) {
    this.startDate = startDate;
  }


  public RenewInfos endDate(java.time.LocalDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Renew end date. Mandatory
   * @return endDate
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public java.time.LocalDateTime getEndDate() {
    return endDate;
  }


  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEndDate(java.time.LocalDateTime endDate) {
    this.endDate = endDate;
  }


  /**
   * Return true if this RenewInfos object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RenewInfos renewInfos = (RenewInfos) o;
    return Objects.equals(this.index, renewInfos.index) &&
        Objects.equals(this.startDate, renewInfos.startDate) &&
        Objects.equals(this.endDate, renewInfos.endDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(index, startDate, endDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RenewInfos {\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

