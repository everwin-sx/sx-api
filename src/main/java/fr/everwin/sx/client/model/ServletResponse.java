/*
 * Everwin API documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.01.00
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.everwin.sx.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.Objects;


/**
 * ServletResponse
 */
@JsonPropertyOrder({
  ServletResponse.JSON_PROPERTY_LOCALE,
  ServletResponse.JSON_PROPERTY_BUFFER_SIZE,
  ServletResponse.JSON_PROPERTY_CONTENT_LENGTH_LONG,
  ServletResponse.JSON_PROPERTY_WRITER,
  ServletResponse.JSON_PROPERTY_COMMITTED,
  ServletResponse.JSON_PROPERTY_CHARACTER_ENCODING,
  ServletResponse.JSON_PROPERTY_CONTENT_TYPE,
  ServletResponse.JSON_PROPERTY_OUTPUT_STREAM,
  ServletResponse.JSON_PROPERTY_CONTENT_LENGTH
})
@jakarta.annotation.Generated(value = "fr.everwin.sx.openapi.codegen.CustomJavaClientCodegen", date = "2025-05-21T16:37:39.682984900+02:00[Europe/Paris]")
public class ServletResponse {
  public static final String JSON_PROPERTY_LOCALE = "locale";
  private HttpServletRequestLocale locale;

  public static final String JSON_PROPERTY_BUFFER_SIZE = "bufferSize";
  private Integer bufferSize;

  public static final String JSON_PROPERTY_CONTENT_LENGTH_LONG = "contentLengthLong";
  private Long contentLengthLong;

  public static final String JSON_PROPERTY_WRITER = "writer";
  private Object writer;

  public static final String JSON_PROPERTY_COMMITTED = "committed";
  private Boolean committed;

  public static final String JSON_PROPERTY_CHARACTER_ENCODING = "characterEncoding";
  private String characterEncoding;

  public static final String JSON_PROPERTY_CONTENT_TYPE = "contentType";
  private String contentType;

  public static final String JSON_PROPERTY_OUTPUT_STREAM = "outputStream";
  private ServletOutputStream outputStream;

  public static final String JSON_PROPERTY_CONTENT_LENGTH = "contentLength";
  private Integer contentLength;

  public ServletResponse() { 
  }

  public ServletResponse locale(HttpServletRequestLocale locale) {
    this.locale = locale;
    return this;
  }

   /**
   * Get locale
   * @return locale
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HttpServletRequestLocale getLocale() {
    return locale;
  }


  @JsonProperty(JSON_PROPERTY_LOCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocale(HttpServletRequestLocale locale) {
    this.locale = locale;
  }


  public ServletResponse bufferSize(Integer bufferSize) {
    this.bufferSize = bufferSize;
    return this;
  }

   /**
   * Get bufferSize
   * @return bufferSize
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUFFER_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBufferSize() {
    return bufferSize;
  }


  @JsonProperty(JSON_PROPERTY_BUFFER_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBufferSize(Integer bufferSize) {
    this.bufferSize = bufferSize;
  }


  public ServletResponse contentLengthLong(Long contentLengthLong) {
    this.contentLengthLong = contentLengthLong;
    return this;
  }

   /**
   * Get contentLengthLong
   * @return contentLengthLong
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_LENGTH_LONG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getContentLengthLong() {
    return contentLengthLong;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_LENGTH_LONG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentLengthLong(Long contentLengthLong) {
    this.contentLengthLong = contentLengthLong;
  }


  public ServletResponse writer(Object writer) {
    this.writer = writer;
    return this;
  }

   /**
   * Get writer
   * @return writer
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WRITER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getWriter() {
    return writer;
  }


  @JsonProperty(JSON_PROPERTY_WRITER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWriter(Object writer) {
    this.writer = writer;
  }


  public ServletResponse committed(Boolean committed) {
    this.committed = committed;
    return this;
  }

   /**
   * Get committed
   * @return committed
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMITTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCommitted() {
    return committed;
  }


  @JsonProperty(JSON_PROPERTY_COMMITTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommitted(Boolean committed) {
    this.committed = committed;
  }


  public ServletResponse characterEncoding(String characterEncoding) {
    this.characterEncoding = characterEncoding;
    return this;
  }

   /**
   * Get characterEncoding
   * @return characterEncoding
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHARACTER_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCharacterEncoding() {
    return characterEncoding;
  }


  @JsonProperty(JSON_PROPERTY_CHARACTER_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCharacterEncoding(String characterEncoding) {
    this.characterEncoding = characterEncoding;
  }


  public ServletResponse contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * Get contentType
   * @return contentType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContentType() {
    return contentType;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public ServletResponse outputStream(ServletOutputStream outputStream) {
    this.outputStream = outputStream;
    return this;
  }

   /**
   * Get outputStream
   * @return outputStream
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUT_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ServletOutputStream getOutputStream() {
    return outputStream;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputStream(ServletOutputStream outputStream) {
    this.outputStream = outputStream;
  }


  public ServletResponse contentLength(Integer contentLength) {
    this.contentLength = contentLength;
    return this;
  }

   /**
   * Get contentLength
   * @return contentLength
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getContentLength() {
    return contentLength;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentLength(Integer contentLength) {
    this.contentLength = contentLength;
  }


  /**
   * Return true if this ServletResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServletResponse servletResponse = (ServletResponse) o;
    return Objects.equals(this.locale, servletResponse.locale) &&
        Objects.equals(this.bufferSize, servletResponse.bufferSize) &&
        Objects.equals(this.contentLengthLong, servletResponse.contentLengthLong) &&
        Objects.equals(this.writer, servletResponse.writer) &&
        Objects.equals(this.committed, servletResponse.committed) &&
        Objects.equals(this.characterEncoding, servletResponse.characterEncoding) &&
        Objects.equals(this.contentType, servletResponse.contentType) &&
        Objects.equals(this.outputStream, servletResponse.outputStream) &&
        Objects.equals(this.contentLength, servletResponse.contentLength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locale, bufferSize, contentLengthLong, writer, committed, characterEncoding, contentType, outputStream, contentLength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServletResponse {\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    bufferSize: ").append(toIndentedString(bufferSize)).append("\n");
    sb.append("    contentLengthLong: ").append(toIndentedString(contentLengthLong)).append("\n");
    sb.append("    writer: ").append(toIndentedString(writer)).append("\n");
    sb.append("    committed: ").append(toIndentedString(committed)).append("\n");
    sb.append("    characterEncoding: ").append(toIndentedString(characterEncoding)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    outputStream: ").append(toIndentedString(outputStream)).append("\n");
    sb.append("    contentLength: ").append(toIndentedString(contentLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

